/* Generated by SharpKit 5 v5.3.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$TemplateEngine$Web$BindingManagerBase =
{
    fullname: "Neptuo.TemplateEngine.Web.BindingManagerBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IBindingManager"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        TrySetValue: function (target, expression, value)
        {
            var info = null;
            var type = target.GetType();
            var exprs = expression.Split$$Char$Array$$StringSplitOptions(["."], 1);
            for (var i = 0; i < exprs.get_Length(); i++)
            {
                info = type.GetProperty$$String(exprs[i]);
                type = info.get_PropertyType();
                if (i < (exprs.get_Length() - 1))
                    target = info.GetValue$$Object$$Object$Array(target, null);
            }
            if (System.Reflection.PropertyInfo.op_Inequality$$PropertyInfo$$PropertyInfo(info, null))
                info.SetValue$$Object$$Object$$Object$Array(target, value, null);
            return System.Reflection.PropertyInfo.op_Inequality$$PropertyInfo$$PropertyInfo(info, null);
        },
        TryGetValue: function (expression, source, value)
        {
            if (System.String.IsNullOrEmpty(expression))
            {
                value.Value = source;
                return true;
            }
            if (source == null)
            {
                value.Value = null;
                return false;
            }
            var provider = As(source, Neptuo.PresentationModels.IModelValueProvider.ctor);
            if (provider != null)
                return provider.TryGetValue(expression, value);
            var info = null;
            var type = source.GetType();
            var exprs = expression.Split$$Char$Array$$StringSplitOptions(["."], 1);
            for (var i = 0; i < exprs.get_Length(); i++)
            {
                info = type.GetProperty$$String(exprs[i]);
                if (System.Reflection.PropertyInfo.op_Equality$$PropertyInfo$$PropertyInfo(info, null))
                {
                    value.Value = null;
                    return false;
                }
                type = info.get_PropertyType();
                if (source != null)
                    source = info.GetValue$$Object$$Object$Array(source, null);
            }
            value.Value = source;
            return true;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$BindingManagerBase);
var Neptuo$TemplateEngine$Web$Controls$ContentControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ContentControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Controls.IContentControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Content = null;
            Neptuo.TemplateEngine.Web.Controls.ControlBase.ctor.call(this, componentManager);
        },
        Content$$: "System.Collections.Generic.ICollection`1[[System.Object]]",
        get_Content: function ()
        {
            return this._Content;
        },
        set_Content: function (value)
        {
            this._Content = value;
        },
        OnInit: function ()
        {
            Neptuo.TemplateEngine.Web.Controls.ControlBase.commonPrototype.OnInit.call(this);
            if (this.get_Content() != null)
            {
                var $it1 = this.get_Content().GetEnumerator();
                while ($it1.MoveNext())
                {
                    var item = $it1.get_Current();
                    this.get_ComponentManager().Init(item);
                }
            }
        },
        Render: function (writer)
        {
            this.RenderBody(writer);
        },
        RenderBody: function (writer)
        {
            if (this.get_Content() != null)
            {
                var $it2 = this.get_Content().GetEnumerator();
                while ($it2.MoveNext())
                {
                    var item = $it2.get_Current();
                    this.get_ComponentManager().Render(item, writer);
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ContentControlBase);
var Neptuo$TemplateEngine$Web$Controls$CssClassCollection =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.CssClassCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.storage = new System.Collections.Generic.HashSet$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (className)
        {
            this.storage.Add(className);
        },
        ContainsKey: function (className)
        {
            return this.storage.Contains(className);
        },
        GetEnumerator: function ()
        {
            return this.storage.GetEnumerator();
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$CssClassCollection);
var Neptuo$TemplateEngine$Web$Controls$HtmlContentControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Controls.IContentControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, tagName, isSelfClosing)
        {
            this._Content = null;
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.ctor.call(this, componentManager, tagName, isSelfClosing);
        },
        IsSelfClosing$$: "System.Boolean",
        get_IsSelfClosing: function ()
        {
            if (this.get_Content() != null && this.get_Content().get_Count() != 0)
                return false;
            return Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.get_IsSelfClosing.call(this);
        },
        Content$$: "System.Collections.Generic.ICollection`1[[System.Object]]",
        get_Content: function ()
        {
            return this._Content;
        },
        set_Content: function (value)
        {
            this._Content = value;
        },
        OnInit: function ()
        {
            Neptuo.TemplateEngine.Web.Controls.ControlBase.commonPrototype.OnInit.call(this);
            if (this.get_Content() != null)
            {
                var $it3 = this.get_Content().GetEnumerator();
                while ($it3.MoveNext())
                {
                    var item = $it3.get_Current();
                    this.get_ComponentManager().Init(item);
                }
            }
        },
        RenderBody: function (writer)
        {
            if (this.get_Content() != null)
            {
                var $it4 = this.get_Content().GetEnumerator();
                while ($it4.MoveNext())
                {
                    var item = $it4.get_Current();
                    this.get_ComponentManager().Render(item, writer);
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "System.String", "System.Boolean"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$HtmlContentControlBase);
var Neptuo$TemplateEngine$Web$Controls$DesignData$HintAttribute =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (text)
        {
            this._Text = null;
            System.Attribute.ctor.call(this);
            this.set_Text(text);
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DesignData$HintAttribute);
var Neptuo$TemplateEngine$Web$Controls$DetailViewControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.DetailViewControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, storage, dataContext)
        {
            this._Source = null;
            this._DataContext = null;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, componentManager, storage);
            this.set_DataContext(dataContext);
        },
        Source$$: "Neptuo.TemplateEngine.Web.IDataSource",
        get_Source: function ()
        {
            return this._Source;
        },
        set_Source: function (value)
        {
            this._Source = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        },
        OnInit: function ()
        {
            this.InitComponent(this.get_Source());
            if (this.get_Source() == null)
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Missing data source."), new Error());
            this.get_DataContext().Push(this.get_Source().GetItem(), null);
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop(null);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DetailViewControl);
var Neptuo$TemplateEngine$Web$Controls$HtmlControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.HtmlControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.IAttributeCollection", "Neptuo.TemplateEngine.Web.Controls.IHtmlAttributeCollection"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, tagName, isSelfClosing)
        {
            this._ID = null;
            this._CssStyle = null;
            this._CssClass = null;
            this._Attributes = null;
            this._TagName = null;
            this._IsSelfClosing = false;
            Neptuo.TemplateEngine.Web.Controls.ControlBase.ctor.call(this, componentManager);
            this.set_TagName(tagName);
            this.set_IsSelfClosing(isSelfClosing);
            this.set_Attributes(new Neptuo.Templates.HtmlAttributeCollection.ctor());
        },
        ID$$: "System.String",
        get_ID: function ()
        {
            return this._ID;
        },
        set_ID: function (value)
        {
            this._ID = value;
        },
        CssStyle$$: "System.String",
        get_CssStyle: function ()
        {
            return this._CssStyle;
        },
        set_CssStyle: function (value)
        {
            this._CssStyle = value;
        },
        CssClass$$: "Neptuo.TemplateEngine.Web.Controls.CssClassCollection",
        get_CssClass: function ()
        {
            return this._CssClass;
        },
        set_CssClass: function (value)
        {
            this._CssClass = value;
        },
        Attributes$$: "Neptuo.Templates.HtmlAttributeCollection",
        get_Attributes: function ()
        {
            return this._Attributes;
        },
        set_Attributes: function (value)
        {
            this._Attributes = value;
        },
        TagName$$: "System.String",
        get_TagName: function ()
        {
            return this._TagName;
        },
        set_TagName: function (value)
        {
            this._TagName = value;
        },
        IsSelfClosing$$: "System.Boolean",
        get_IsSelfClosing: function ()
        {
            return this._IsSelfClosing;
        },
        set_IsSelfClosing: function (value)
        {
            this._IsSelfClosing = value;
        },
        Render: function (writer)
        {
            if (!System.String.IsNullOrEmpty(this.get_TagName()))
            {
                writer.Tag(this.get_TagName());
                this.RenderAttributes(writer);
                if (this.get_IsSelfClosing())
                {
                    writer.CloseTag();
                }
                else
                {
                    this.RenderBody(writer);
                    writer.CloseFullTag();
                }
            }
            else
            {
                this.RenderBody(writer);
            }
        },
        RenderBody: function (writer)
        {
        },
        RenderAttributes: function (writer)
        {
            if (!System.String.IsNullOrEmpty(this.get_ID()))
                this.get_Attributes().set_Item$$TKey("id", this.get_ID());
            if (this.get_CssClass() != null)
            {
                if (!this.get_Attributes().ContainsKey("class"))
                    this.get_Attributes().set_Item$$TKey("class", System.String.Join$$String$$IEnumerable$1$String(" ", this.get_CssClass()));
                else
                    this.get_Attributes().set_Item$$TKey("class", System.String.Format$$String$$Object$$Object("{0} {1}", this.get_Attributes().get_Item$$TKey("class"), System.String.Join$$String$$IEnumerable$1$String(" ", this.get_CssClass())));
            }
            var $it5 = this.get_Attributes().GetEnumerator();
            while ($it5.MoveNext())
            {
                var attribute = $it5.get_Current();
                writer.Attribute(attribute.get_Key(), attribute.get_Value());
            }
        },
        SetAttribute: function (name, value)
        {
            this.get_Attributes().set_Item$$TKey(name, value);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "System.String", "System.Boolean"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$HtmlControlBase);
var Neptuo$TemplateEngine$Web$Controls$IHtmlAttributeCollection = {fullname: "Neptuo.TemplateEngine.Web.Controls.IHtmlAttributeCollection", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$IHtmlAttributeCollection);
var Neptuo$TemplateEngine$Web$Controls$ListViewControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ListViewControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, storage, dataContext)
        {
            this._Source = null;
            this._ItemTemplate = null;
            this._EmptyTemplate = null;
            this._PageSize = null;
            this._PageIndex = null;
            this._DataContext = null;
            this._TotalCount = 0;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, componentManager, storage);
            this.set_DataContext(dataContext);
        },
        Source$$: "Neptuo.TemplateEngine.Web.IListDataSource",
        get_Source: function ()
        {
            return this._Source;
        },
        set_Source: function (value)
        {
            this._Source = value;
        },
        ItemTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_ItemTemplate: function ()
        {
            return this._ItemTemplate;
        },
        set_ItemTemplate: function (value)
        {
            this._ItemTemplate = value;
        },
        EmptyTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_EmptyTemplate: function ()
        {
            return this._EmptyTemplate;
        },
        set_EmptyTemplate: function (value)
        {
            this._EmptyTemplate = value;
        },
        PageSize$$: "System.Nullable`1[[System.Int32]]",
        get_PageSize: function ()
        {
            return this._PageSize;
        },
        set_PageSize: function (value)
        {
            this._PageSize = value;
        },
        PageIndex$$: "System.Nullable`1[[System.Int32]]",
        get_PageIndex: function ()
        {
            return this._PageIndex;
        },
        set_PageIndex: function (value)
        {
            this._PageIndex = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        },
        TotalCount$$: "System.Int32",
        get_TotalCount: function ()
        {
            return this._TotalCount;
        },
        set_TotalCount: function (value)
        {
            this._TotalCount = value;
        },
        OnInit: function ()
        {
            this.InitComponent(this.get_ItemTemplate());
            if (this.get_ItemTemplate() == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Missing item template.", "ItemTemplate"), new Error());
            this.InitComponent(this.get_Source());
            if (this.get_Source() == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Missing data source.", "Source"), new Error());
            var itemTemplates = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var models = this.get_Source().GetData(this.get_PageIndex(), this.get_PageSize());
            this.set_TotalCount(this.get_Source().GetTotalCount());
            this.get_DataContext().Push(this, "Template");
            var isEmpty = true;
            var $it6 = models.GetEnumerator();
            while ($it6.MoveNext())
            {
                var model = $it6.get_Current();
                isEmpty = false;
                this.get_DataContext().Push(model, null);
                itemTemplates.Add(this.InitTemplate(this.get_ItemTemplate()));
                this.get_DataContext().Pop(null);
            }
            if (isEmpty && this.get_EmptyTemplate() != null)
            {
                this.set_Template(this.get_EmptyTemplate());
            }
            else
            {
                var templateContent = (function ()
                {
                    var $v1 = new Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor(this.get_ComponentManager());
                    $v1.set_Name("Content");
                    $v1.set_Content(itemTemplates);
                    return $v1;
                }).call(this);
                this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor, templateContent, null);
                this.InitComponent(templateContent);
                this.get_Content().Add(templateContent);
            }
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop("Template");
        },
        Render: function (writer)
        {
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.Render.call(this, writer);
            if (this.get_PageSize() != null)
            {
                writer.Tag("ul").Attribute("class", "pagination pagination-sm");
                for (var i = 0; i < Cast(System.Math.Ceiling$$Decimal(this.get_TotalCount() / this.get_PageSize().get_Value()), System.Int32.ctor); i++)
                {
                    writer.Tag("li").Attribute("class", ((this.get_PageIndex() != null ? this.get_PageIndex() : 0) == i) ? "active" : "").Tag("a").Attribute("href", (i != 0) ? ("?PageIndex=" + i) : "?").Content$$Object(i + 1).CloseFullTag().CloseFullTag();
                }
                writer.CloseFullTag();
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ListViewControl);
var Neptuo$TemplateEngine$Web$Controls$NavigationControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.NavigationControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, navigator, navigations, globalNavigations)
        {
            this._Navigations = null;
            this._GlobalNavigations = null;
            this._Navigator = null;
            this._Items = null;
            Neptuo.TemplateEngine.Web.Controls.ControlBase.ctor.call(this, componentManager);
            this.set_Navigator(navigator);
            this.set_Navigations(navigations);
            this.set_GlobalNavigations(globalNavigations);
        },
        Navigations$$: "Neptuo.TemplateEngine.Web.NavigationCollection",
        get_Navigations: function ()
        {
            return this._Navigations;
        },
        set_Navigations: function (value)
        {
            this._Navigations = value;
        },
        GlobalNavigations$$: "Neptuo.TemplateEngine.Web.GlobalNavigationCollection",
        get_GlobalNavigations: function ()
        {
            return this._GlobalNavigations;
        },
        set_GlobalNavigations: function (value)
        {
            this._GlobalNavigations = value;
        },
        Navigator$$: "Neptuo.TemplateEngine.Navigation.INavigator",
        get_Navigator: function ()
        {
            return this._Navigator;
        },
        set_Navigator: function (value)
        {
            this._Navigator = value;
        },
        Items$$: "System.Collections.Generic.ICollection`1[[Neptuo.TemplateEngine.Web.Controls.NavigationItem]]",
        get_Items: function ()
        {
            return this._Items;
        },
        set_Items: function (value)
        {
            this._Items = value;
        },
        OnInit: function ()
        {
            this.InitComponents$1(Neptuo.TemplateEngine.Web.Controls.NavigationItem.ctor, this.get_Items());
            var $it7 = this.get_Navigations().GetEnumerator();
            while ($it7.MoveNext())
            {
                var name = $it7.get_Current();
                if (this.get_Items() != null)
                {
                    var $it8 = this.get_Items().GetEnumerator();
                    while ($it8.MoveNext())
                    {
                        var item = $it8.get_Current();
                        if (item.get_Name() == name)
                        {
                            this.get_Navigator().Open(item.get_To());
                            return;
                        }
                    }
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Navigation.INavigator", "Neptuo.TemplateEngine.Web.NavigationCollection", "Neptuo.TemplateEngine.Web.GlobalNavigationCollection"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$NavigationControl);
var Neptuo$TemplateEngine$Web$Controls$NavigationItem =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.NavigationItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    customAttributes: [ {targetType: "property", targetMemberName: "Name", typeName: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute", ctorName: "ctor", positionalArguments: ["Navigation result name"]}, {targetType: "property", targetMemberName: "To", typeName: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute", ctorName: "ctor", positionalArguments: ["Form uri to navigate to."]}],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Name = null;
            this._To = null;
            System.Object.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        To$$: "Neptuo.TemplateEngine.Navigation.FormUri",
        get_To: function ()
        {
            return this._To;
        },
        set_To: function (value)
        {
            this._To = value;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$NavigationItem);
var Neptuo$TemplateEngine$Web$Controls$OptionControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.OptionControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    customAttributes: [ {targetType: "property", targetMemberName: "Text", typeName: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute", ctorName: "ctor", positionalArguments: ["Replace for Content property for setting via attribute."]}],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._SelectedValue = null;
            this._Value = null;
            this._Text = null;
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "option", false);
        },
        SelectedValue$$: "System.Object",
        get_SelectedValue: function ()
        {
            return this._SelectedValue;
        },
        set_SelectedValue: function (value)
        {
            this._SelectedValue = value;
        },
        Value$$: "System.Object",
        get_Value: function ()
        {
            return this._Value;
        },
        set_Value: function (value)
        {
            this._Value = value;
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        OnInit: function ()
        {
            if (!System.String.IsNullOrEmpty(this.get_Text()))
                this.set_Content((function ()
                {
                    var $v2 = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
                    $v2.Add(this.get_Text());
                    return $v2;
                }).call(this));
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.commonPrototype.OnInit.call(this);
        },
        RenderAttributes: function (writer)
        {
            if (this.get_Value() != null)
            {
                if (this.get_SelectedValue() != null && this.get_SelectedValue().ToString() == this.get_Value().ToString())
                    this.get_Attributes().set_Item$$TKey("selected", "selected");
                this.get_Attributes().set_Item$$TKey("value", this.get_Value().ToString());
            }
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.RenderAttributes.call(this, writer);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$OptionControl);
var Neptuo$TemplateEngine$Web$Controls$SelectControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.SelectControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ListViewControl",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.IHtmlAttributeCollection", "Neptuo.Templates.IAttributeCollection"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, storage, dataContext)
        {
            this._Value = null;
            this._IsAddEmpty = false;
            this._Attributes = null;
            Neptuo.TemplateEngine.Web.Controls.ListViewControl.ctor.call(this, componentManager, storage, dataContext);
            this.set_Attributes(new Neptuo.Templates.HtmlAttributeCollection.ctor());
        },
        Value$$: "System.Object",
        get_Value: function ()
        {
            return this._Value;
        },
        set_Value: function (value)
        {
            this._Value = value;
        },
        IsAddEmpty$$: "System.Boolean",
        get_IsAddEmpty: function ()
        {
            return this._IsAddEmpty;
        },
        set_IsAddEmpty: function (value)
        {
            this._IsAddEmpty = value;
        },
        Attributes$$: "Neptuo.Templates.HtmlAttributeCollection",
        get_Attributes: function ()
        {
            return this._Attributes;
        },
        set_Attributes: function (value)
        {
            this._Attributes = value;
        },
        SetAttribute: function (name, value)
        {
            this.get_Attributes().set_Item$$TKey(name, value);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$SelectControl);
var Neptuo$TemplateEngine$Web$Controls$ContentTemplate =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ContentTemplate",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITemplate"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._ComponentManager = null;
            this._BindMethod = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function ()
        {
            return this._ComponentManager;
        },
        set_ComponentManager: function (value)
        {
            this._ComponentManager = value;
        },
        BindMethod$$: "System.Action`1[[Neptuo.TemplateEngine.Web.Controls.ContentTemplateContent]]",
        get_BindMethod: function ()
        {
            return this._BindMethod;
        },
        set_BindMethod: function (value)
        {
            this._BindMethod = value;
        },
        CreateInstance: function ()
        {
            var templateContent = new Neptuo.TemplateEngine.Web.Controls.ContentTemplateContent.ctor(this.get_ComponentManager());
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.ContentTemplateContent.ctor, templateContent, this.get_BindMethod());
            return templateContent;
        },
        Dispose: function ()
        {
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ContentTemplate);
var Neptuo$TemplateEngine$Web$Controls$ContentTemplateContent =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ContentTemplateContent",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITemplateContent"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._ComponentManager = null;
            this._Content = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function ()
        {
            return this._ComponentManager;
        },
        set_ComponentManager: function (value)
        {
            this._ComponentManager = value;
        },
        Content$$: "System.Collections.Generic.ICollection`1[[System.Object]]",
        get_Content: function ()
        {
            return this._Content;
        },
        set_Content: function (value)
        {
            this._Content = value;
        },
        OnInit: function ()
        {
            if (this.get_Content() != null)
            {
                var $it9 = this.get_Content().GetEnumerator();
                while ($it9.MoveNext())
                {
                    var item = $it9.get_Current();
                    this.get_ComponentManager().Init(item);
                }
            }
        },
        Render: function (writer)
        {
            if (this.get_Content() != null)
            {
                var $it10 = this.get_Content().GetEnumerator();
                while ($it10.MoveNext())
                {
                    var item = $it10.get_Current();
                    this.get_ComponentManager().Render(item, writer);
                }
            }
        },
        Dispose: function ()
        {
            if (this.get_Content() != null)
            {
                var $it11 = this.get_Content().GetEnumerator();
                while ($it11.MoveNext())
                {
                    var item = $it11.get_Current();
                    this.get_ComponentManager().Dispose(item);
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ContentTemplateContent);
var Neptuo$TemplateEngine$Web$Controls$ControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this.defaultPropertyName = null;
            this._ComponentManager = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function ()
        {
            return this._ComponentManager;
        },
        set_ComponentManager: function (value)
        {
            this._ComponentManager = value;
        },
        DefaultPropertyName$$: "System.String",
        get_DefaultPropertyName: function ()
        {
            if (this.defaultPropertyName == null)
            {
                var attr = Neptuo.Reflection.ReflectionHelper.GetAttribute$1(System.ComponentModel.DefaultPropertyAttribute.ctor, this.GetType());
                if (attr != null)
                    this.defaultPropertyName = attr.get_Name();
            }
            return this.defaultPropertyName;
        },
        set_DefaultPropertyName: function (value)
        {
            this.defaultPropertyName = value;
        },
        OnInit: function ()
        {
        },
        Render: function (writer)
        {
        },
        InitComponent: function (component)
        {
            this.get_ComponentManager().Init(component);
        },
        RenderComponent: function (component, writer)
        {
            this.get_ComponentManager().Render(component, writer);
        },
        InitComponents$1: function (T, compoments)
        {
            if (compoments != null)
            {
                var $it12 = compoments.GetEnumerator();
                while ($it12.MoveNext())
                {
                    var component = $it12.get_Current();
                    this.InitComponent(component);
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ControlBase);
var Neptuo$TemplateEngine$Web$Controls$ButtonControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ButtonControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Name = null;
            this._Text = null;
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "button", false);
            this.get_Attributes().set_Item$$TKey("class", "btn");
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        OnInit: function ()
        {
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.commonPrototype.OnInit.call(this);
            if (!System.String.IsNullOrEmpty(this.get_Name()))
                this.get_Attributes().set_Item$$TKey("name", this.get_Name());
            if (this.get_Content() == null)
            {
                this.set_Content(new System.Collections.Generic.List$1.ctor(System.Object.ctor));
                this.get_Content().Add(this.get_Text());
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ButtonControl);
var Neptuo$TemplateEngine$Web$Controls$CheckBoxControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.CheckBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.FormInputControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._LabelText = null;
            this._IsChecked = false;
            Neptuo.TemplateEngine.Web.Controls.FormInputControlBase.ctor.call(this, componentManager);
            this.set_Type("checkbox");
        },
        LabelText$$: "System.String",
        get_LabelText: function ()
        {
            return this._LabelText;
        },
        set_LabelText: function (value)
        {
            this._LabelText = value;
        },
        IsChecked$$: "System.Boolean",
        get_IsChecked: function ()
        {
            return this._IsChecked;
        },
        set_IsChecked: function (value)
        {
            this._IsChecked = value;
        },
        Render: function (writer)
        {
            if (this.get_IsChecked())
                this.get_Attributes().set_Item$$TKey("checked", "checked");
            writer.Tag("label").Attribute("class", "checkbox");
            Neptuo.TemplateEngine.Web.Controls.FormInputControlBase.commonPrototype.Render.call(this, writer);
            writer.Content$$String(this.get_LabelText()).CloseFullTag();
        },
        HandleValue: function (value)
        {
            this.set_IsChecked(value == "on");
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$CheckBoxControl);
var Neptuo$TemplateEngine$Web$Controls$DefaultTemplateAttribute =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.DefaultTemplateAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (path)
        {
            this._Path = null;
            System.Attribute.ctor.call(this);
            this.set_Path(path);
        },
        Path$$: "System.String",
        get_Path: function ()
        {
            return this._Path;
        },
        set_Path: function (value)
        {
            this._Path = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DefaultTemplateAttribute);
var Neptuo$TemplateEngine$Web$Controls$DesignData$SupportUiEventAttribute =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.DesignData.SupportUiEventAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (eventName, handler)
        {
            this._Event = null;
            this._Handler = null;
            System.Attribute.ctor.call(this);
            this.set_Event(eventName);
            this.set_Handler(handler);
        },
        Event$$: "System.String",
        get_Event: function ()
        {
            return this._Event;
        },
        set_Event: function (value)
        {
            this._Event = value;
        },
        Handler$$: "System.Type",
        get_Handler: function ()
        {
            return this._Handler;
        },
        set_Handler: function (value)
        {
            this._Handler = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String", "System.Type"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DesignData$SupportUiEventAttribute);
var Neptuo$TemplateEngine$Web$Controls$DoctypeControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.DoctypeControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Type = Neptuo.TemplateEngine.Web.Controls.DoctypeType.Html5;
            System.Object.ctor.call(this);
        },
        Type$$: "Neptuo.TemplateEngine.Web.Controls.DoctypeType",
        get_Type: function ()
        {
            return this._Type;
        },
        set_Type: function (value)
        {
            this._Type = value;
        },
        OnInit: function ()
        {
        },
        Render: function (writer)
        {
            switch (this.get_Type())
            {
                case Neptuo.TemplateEngine.Web.Controls.DoctypeType.Xhtml:
                    writer.Content$$String("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
                    break;
                case Neptuo.TemplateEngine.Web.Controls.DoctypeType.Html5:
                default :
                    writer.Content$$String("<!DOCTYPE html>");
                    break;
            }
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DoctypeControl);
var Neptuo$TemplateEngine$Web$Controls$DoctypeType =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.DoctypeType",
    staticDefinition: {Html5: 0, Xhtml: 1},
    Kind: "Enum",
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DoctypeType);
var Neptuo$TemplateEngine$Web$Controls$FileTemplate =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.FileTemplate",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ViewTemplateBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (dependencyProvider, componentManager, viewService)
        {
            this._Path = null;
            Neptuo.TemplateEngine.Web.Controls.ViewTemplateBase.ctor.call(this, dependencyProvider, componentManager, viewService);
        },
        Path$$: "System.String",
        get_Path: function ()
        {
            return this._Path;
        },
        set_Path: function (value)
        {
            this._Path = value;
        },
        CreateView: function ()
        {
            return Cast(this.get_ViewService().Process(this.get_Path(), new Neptuo.Templates.Compilation.ViewServiceContext.ctor(this.get_DependencyProvider())), Neptuo.Templates.BaseGeneratedView.ctor);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IDependencyProvider", "Neptuo.Templates.IComponentManager", "Neptuo.Templates.Compilation.IViewService"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$FileTemplate);
var Neptuo$TemplateEngine$Web$Controls$FormControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.FormControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.IFormControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Name = null;
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.ctor.call(this, componentManager, "input", true);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        OnInit: function ()
        {
            Neptuo.TemplateEngine.Web.Controls.ControlBase.commonPrototype.OnInit.call(this);
            if (this.get_ID() == null)
                this.set_ID(this.get_Name());
        },
        Render: function (writer)
        {
            this.get_Attributes().set_Item$$TKey("name", this.get_Name());
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$FormControlBase);
var Neptuo$TemplateEngine$Web$Controls$FormInputControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.FormInputControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.FormControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Type = null;
            Neptuo.TemplateEngine.Web.Controls.FormControlBase.ctor.call(this, componentManager);
        },
        Type$$: "System.String",
        get_Type: function ()
        {
            return this._Type;
        },
        set_Type: function (value)
        {
            this._Type = value;
        },
        Render: function (writer)
        {
            this.get_Attributes().set_Item$$TKey("type", this.get_Type());
            Neptuo.TemplateEngine.Web.Controls.FormControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$FormInputControlBase);
var Neptuo$TemplateEngine$Web$Controls$FormItemControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.FormItemControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._LabelText = null;
            this._HelpText = null;
            Neptuo.TemplateEngine.Web.Controls.ContentControlBase.ctor.call(this, componentManager);
        },
        LabelText$$: "System.String",
        get_LabelText: function ()
        {
            return this._LabelText;
        },
        set_LabelText: function (value)
        {
            this._LabelText = value;
        },
        HelpText$$: "System.String",
        get_HelpText: function ()
        {
            return this._HelpText;
        },
        set_HelpText: function (value)
        {
            this._HelpText = value;
        },
        Render: function (writer)
        {
            writer.Tag("div").Attribute("class", "form-group");
            if (!System.String.IsNullOrEmpty(this.get_LabelText()))
            {
                writer.Tag("label").Attribute("for", this.GetForAttribute()).Content$$String(this.get_LabelText()).CloseFullTag();
            }
            this.RenderBody(writer);
            if (!System.String.IsNullOrEmpty(this.get_HelpText()))
            {
                writer.Tag("p").Attribute("class", "help-block").Content$$String(this.get_HelpText()).CloseFullTag();
            }
            writer.CloseFullTag();
        },
        GetForAttribute: function ()
        {
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Object.ctor, this.get_Content()))
            {
                var $it13 = this.get_Content().GetEnumerator();
                while ($it13.MoveNext())
                {
                    var control = $it13.get_Current();
                    var htmlControl = As(control, Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.ctor);
                    if (htmlControl != null)
                    {
                        if (!System.String.IsNullOrEmpty(htmlControl.get_ID()))
                            return htmlControl.get_ID();
                        var id = System.Guid.NewGuid().ToString();
                        htmlControl.set_ID(id);
                        return id;
                    }
                }
            }
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$FormItemControl);
var Neptuo$TemplateEngine$Web$Controls$GenericContentControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.GenericContentControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "div", false);
        },
        TagName$$: "System.String",
        get_TagName: function ()
        {
            return Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.get_TagName.call(this);
        },
        set_TagName: function (value)
        {
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.set_TagName.call(this, value);
        },
        Render: function (writer)
        {
            if (!System.String.IsNullOrEmpty(this.get_TagName()))
                Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$GenericContentControl);
var Neptuo$TemplateEngine$Web$Controls$HiddenBoxControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.HiddenBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.FormInputControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITextControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Text = null;
            Neptuo.TemplateEngine.Web.Controls.FormInputControlBase.ctor.call(this, componentManager);
            this.set_Type("hidden");
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        Render: function (writer)
        {
            this.get_Attributes().set_Item$$TKey("value", this.get_Text());
            Neptuo.TemplateEngine.Web.Controls.FormInputControlBase.commonPrototype.Render.call(this, writer);
        },
        HandleValue: function (value)
        {
            this.set_Text(value);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$HiddenBoxControl);
var Neptuo$TemplateEngine$Web$Controls$IFormControl = {fullname: "Neptuo.TemplateEngine.Web.Controls.IFormControl", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$IFormControl);
var Neptuo$TemplateEngine$Web$Controls$ITemplate = {fullname: "Neptuo.TemplateEngine.Web.Controls.ITemplate", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", interfaceNames: ["System.IDisposable"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ITemplate);
var Neptuo$TemplateEngine$Web$Controls$ITemplateContent = {fullname: "Neptuo.TemplateEngine.Web.Controls.ITemplateContent", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", interfaceNames: ["Neptuo.Templates.Controls.IControl", "System.IDisposable"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ITemplateContent);
var Neptuo$TemplateEngine$Web$Controls$ITextControl = {fullname: "Neptuo.TemplateEngine.Web.Controls.ITextControl", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ITextControl);
var Neptuo$TemplateEngine$Web$Controls$IValueControl = {fullname: "Neptuo.TemplateEngine.Web.Controls.IValueControl", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$IValueControl);
var Neptuo$TemplateEngine$Web$Controls$LinkControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.LinkControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    customAttributes: [ {targetType: "property", targetMemberName: "Text", typeName: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute", ctorName: "ctor", positionalArguments: ["Replace for Content property for setting via attribute."]}, {targetType: "property", targetMemberName: "CopyParameters", typeName: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute", ctorName: "ctor", positionalArguments: ["Can contain \'All\', \'Query\', \'Form\' or comma separated list of parameter names."]}, {targetType: "property", targetMemberName: "AllowActive", typeName: "Neptuo.TemplateEngine.Web.Controls.DesignData.HintAttribute", ctorName: "ctor", positionalArguments: ["Setting to false, disable adding \'active\' css class when matching url with current."]}],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, urlProvider, httpRequest)
        {
            this.urlProvider = null;
            this.httpRequest = null;
            this._Href = null;
            this._Text = null;
            this._CopyParameters = null;
            this._Parameters = null;
            this._AllowActive = false;
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "a", false);
            this.urlProvider = urlProvider;
            this.httpRequest = httpRequest;
        },
        Href$$: "System.String",
        get_Href: function ()
        {
            return this._Href;
        },
        set_Href: function (value)
        {
            this._Href = value;
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        CopyParameters$$: "System.String",
        get_CopyParameters: function ()
        {
            return this._CopyParameters;
        },
        set_CopyParameters: function (value)
        {
            this._CopyParameters = value;
        },
        Parameters$$: "System.Collections.Generic.ICollection`1[[Neptuo.TemplateEngine.Web.Controls.ParameterControl]]",
        get_Parameters: function ()
        {
            return this._Parameters;
        },
        set_Parameters: function (value)
        {
            this._Parameters = value;
        },
        AllowActive$$: "System.Boolean",
        get_AllowActive: function ()
        {
            return this._AllowActive;
        },
        set_AllowActive: function (value)
        {
            this._AllowActive = value;
        },
        OnInit: function ()
        {
            Neptuo.TemplateEngine.Web.Controls.HtmlContentControlBase.commonPrototype.OnInit.call(this);
            if (this.get_Href() == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("Href"), new Error());
            if (this.get_AllowActive() && this.httpRequest.get_AppRelativeCurrentExecutionFilePath().EndsWith$$String(this.get_Href()))
                this.get_Attributes().set_Item$$TKey("class", "active");
            if (!System.String.IsNullOrEmpty(this.get_Text()))
                this.set_Content((function ()
                {
                    var $v3 = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
                    $v3.Add(this.get_Text());
                    return $v3;
                }).call(this));
            this.InitComponents$1(Neptuo.TemplateEngine.Web.Controls.ParameterControl.ctor, this.get_Parameters());
        },
        RenderAttributes: function (writer)
        {
            var parameters = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
            if (!System.String.IsNullOrEmpty(this.get_CopyParameters()))
            {
                var copy = this.get_CopyParameters().ToLowerInvariant();
                if (copy == "all")
                    this.CopyParameterCollection(parameters, this.httpRequest.get_QueryString(), this.httpRequest.get_Form());
                else if (copy == "query")
                    this.CopyParameterCollection(parameters, this.httpRequest.get_QueryString());
                else if (copy == "form")
                    this.CopyParameterCollection(parameters, this.httpRequest.get_Form());
                else
                    this.CopySelectedParameters(parameters, this.get_CopyParameters().Split$$Char$Array$$StringSplitOptions([","], 1));
            }
            var queryBuilder = new System.Text.StringBuilder.ctor();
            if (this.get_Parameters() != null)
            {
                var $it14 = this.get_Parameters().GetEnumerator();
                while ($it14.MoveNext())
                {
                    var parameter = $it14.get_Current();
                    parameters.set_Item$$TKey(parameter.get_Name(), parameter.get_Value());
                }
            }
            var $it15 = parameters.GetEnumerator();
            while ($it15.MoveNext())
            {
                var parameter = $it15.get_Current();
                this.AppendQuery(queryBuilder, parameter.get_Key(), parameter.get_Value());
            }
            this.get_Attributes().set_Item$$TKey("href", System.String.Format$$String$$Object$$Object("{0}{1}", this.urlProvider.ResolveUrl(this.get_Href()), queryBuilder.ToString()));
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.commonPrototype.RenderAttributes.call(this, writer);
        },
        AppendQuery: function (builder, key, value)
        {
            builder.AppendFormat$$String$$Object$$Object$$Object("{2}{0}={1}", key, value, builder.get_Length() == 0 ? "?" : "&");
        },
        CopyParameterCollection: function (parameters, collections)
        {
            var $it16 = collections.GetEnumerator();
            while ($it16.MoveNext())
            {
                var collection = $it16.get_Current();
                var $it17 = collection.get_AllKeys().GetEnumerator();
                while ($it17.MoveNext())
                {
                    var parameter = $it17.get_Current();
                    parameters.set_Item$$TKey(parameter, collection.Get$$String(parameter));
                }
            }
        },
        CopySelectedParameters: function (parameters, selectedParameters)
        {
            var currentNames = new System.Collections.Generic.HashSet$1.ctor$$IEnumerable$1(System.String.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.String.ctor, System.String.ctor, this.httpRequest.get_Params().get_AllKeys(), $CreateAnonymousDelegate(this, function (p)
            {
                return p.ToLowerInvariant();
            })));
            var $it18 = selectedParameters.GetEnumerator();
            while ($it18.MoveNext())
            {
                var paramName = $it18.get_Current();
                if (currentNames.Contains(paramName.ToLowerInvariant()))
                    parameters.Add(paramName, this.httpRequest.get_Params().get_Item$$String(paramName));
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.Templates.IVirtualUrlProvider", "System.Web.HttpRequestBase"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$LinkControl);
var Neptuo$TemplateEngine$Web$Controls$MessagePanelControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.MessagePanelControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.HtmlControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, messageStorage)
        {
            this._MessageStorage = null;
            this._Group = null;
            this._Key = null;
            Neptuo.TemplateEngine.Web.Controls.HtmlControlBase.ctor.call(this, componentManager, "ul", false);
            this.set_MessageStorage(messageStorage);
        },
        MessageStorage$$: "Neptuo.TemplateEngine.Web.MessageStorage",
        get_MessageStorage: function ()
        {
            return this._MessageStorage;
        },
        set_MessageStorage: function (value)
        {
            this._MessageStorage = value;
        },
        Group$$: "System.String",
        get_Group: function ()
        {
            return this._Group;
        },
        set_Group: function (value)
        {
            this._Group = value;
        },
        Key$$: "System.String",
        get_Key: function ()
        {
            return this._Key;
        },
        set_Key: function (value)
        {
            this._Key = value;
        },
        Render: function (writer)
        {
            var messages = System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(Neptuo.TemplateEngine.Web.Message.ctor, this.get_MessageStorage().GetList(this.get_Group()), $CreateAnonymousDelegate(this, function (m)
            {
                return this.get_Key() == null || m.get_Key() == this.get_Key();
            }));
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(Neptuo.TemplateEngine.Web.Message.ctor, messages))
            {
                writer.Tag(this.get_TagName()).Attribute("class", "message-list");
                this.RenderAttributes(writer);
                var $it19 = messages.GetEnumerator();
                while ($it19.MoveNext())
                {
                    var message = $it19.get_Current();
                    var cssClass = null;
                    switch (message.get_Type())
                    {
                        case Neptuo.TemplateEngine.Web.MessageType.Error:
                            cssClass = "message-error";
                            break;
                        case Neptuo.TemplateEngine.Web.MessageType.Info:
                            cssClass = "message-info";
                            break;
                        case Neptuo.TemplateEngine.Web.MessageType.Warn:
                            cssClass = "message-warn";
                            break;
                    }
                    writer.Tag("li").Attribute("class", cssClass).Content$$String(message.get_Text()).CloseFullTag();
                }
                writer.CloseFullTag();
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.MessageStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$MessagePanelControl);
var Neptuo$TemplateEngine$Web$Controls$ParameterControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ParameterControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Controls.IControl", "Neptuo.TemplateEngine.Web.Controls.IValueControl"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Name = null;
            this._Value = null;
            System.Object.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        Value$$: "System.Object",
        get_Value: function ()
        {
            return this._Value;
        },
        set_Value: function (value)
        {
            this._Value = value;
        },
        OnInit: function ()
        {
        },
        Render: function (writer)
        {
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ParameterControl);
var Neptuo$TemplateEngine$Web$Controls$PresentationListControlBase$1 =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.PresentationListControlBase$1",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (T, componentManager, configuration)
        {
            this.T = T;
            this.configuration = null;
            this._ItemTemplate = null;
            this._DataContext = null;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, componentManager, configuration.get_TemplateStorage());
            this.configuration = configuration;
            this.set_DataContext(configuration.get_DataContext());
        },
        ItemTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_ItemTemplate: function ()
        {
            return this._ItemTemplate;
        },
        set_ItemTemplate: function (value)
        {
            this._ItemTemplate = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        },
        OnInit: function ()
        {
            this.InitComponent(this.get_ItemTemplate());
            var itemTemplates = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var models = this.LoadData();
            var $it20 = models.GetEnumerator();
            while ($it20.MoveNext())
            {
                var model = $it20.get_Current();
                var provider = this.configuration.get_ValueProviderFactory().Create(model);
                this.get_DataContext().Push(provider, null);
                var control = new Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor(this.get_ComponentManager(), this.configuration.get_TemplateStorage());
                control.set_Template(this.get_ItemTemplate());
                this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor, control, null);
                this.InitComponent(control);
                itemTemplates.Add(control);
                this.get_DataContext().Pop(null);
            }
            var templateContent = (function ()
            {
                var $v4 = new Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor(this.get_ComponentManager());
                $v4.set_Name("Content");
                $v4.set_Content(itemTemplates);
                return $v4;
            }).call(this);
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor, templateContent, null);
            this.InitComponent(templateContent);
            this.get_Content().Add(templateContent);
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.PresentationConfiguration"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$PresentationListControlBase$1);
var Neptuo$TemplateEngine$Web$DataContextStorage =
{
    fullname: "Neptuo.TemplateEngine.Web.DataContextStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.StackStorage$1.ctor);
            System.Object.ctor.call(this);
        },
        Push: function (value, name)
        {
            if (name == null)
                name = System.String.Empty;
            var stack;
            if (!(function ()
            {
                var $1 = {Value: stack};
                var $res = this.storage.TryGetValue(name, $1);
                stack = $1.Value;
                return $res;
            }).call(this))
            {
                stack = new Neptuo.TemplateEngine.StackStorage$1.ctor(System.Object.ctor);
                this.storage.set_Item$$TKey(name, stack);
            }
            stack.Push(value);
        },
        Pop: function (name)
        {
            if (name == null)
                name = System.String.Empty;
            var stack;
            if ((function ()
            {
                var $1 = {Value: stack};
                var $res = this.storage.TryGetValue(name, $1);
                stack = $1.Value;
                return $res;
            }).call(this))
                return stack.Pop();
            return null;
        },
        Peek: function (name)
        {
            if (name == null)
                name = System.String.Empty;
            var stack;
            if ((function ()
            {
                var $1 = {Value: stack};
                var $res = this.storage.TryGetValue(name, $1);
                stack = $1.Value;
                return $res;
            }).call(this))
                return stack.Peek();
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$DataContextStorage);
var Neptuo$TemplateEngine$Web$DataSources$ListDataSourceBase$1 =
{
    fullname: "Neptuo.TemplateEngine.Web.DataSources.ListDataSourceBase$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IListDataSource"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, providerFactory)
        {
            this.T = T;
            this._ProviderFactory = null;
            System.Object.ctor.call(this);
            if (providerFactory == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("providerFactory"), new Error());
            this.set_ProviderFactory(providerFactory);
        },
        ProviderFactory$$: "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory",
        get_ProviderFactory: function ()
        {
            return this._ProviderFactory;
        },
        set_ProviderFactory: function (value)
        {
            this._ProviderFactory = value;
        },
        GetData$$Nullable$1$Int32$$Nullable$1$Int32: function (pageIndex, pageSize)
        {
            var $yield = [];
            var data = this.GetData();
            data = this.ApplyFilter(data);
            if (pageSize != null)
                data = System.Linq.Queryable.Take$1(this.T, System.Linq.Queryable.Skip$1(this.T, data, (pageIndex != null ? pageIndex : 0) * pageSize.get_Value()), pageSize.get_Value());
            var $it21 = data.GetEnumerator();
            while ($it21.MoveNext())
            {
                var item = $it21.get_Current();
                $yield.push(this.get_ProviderFactory().Create(item));
            }
            return $yield;
        },
        GetTotalCount: function ()
        {
            var data = this.GetData();
            data = this.ApplyFilter(data);
            return System.Linq.Queryable.Count$1$$IQueryable$1(this.T, data);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$DataSources$ListDataSourceBase$1);
var Neptuo$TemplateEngine$Web$Extensions$BindingExtension =
{
    fullname: "Neptuo.TemplateEngine.Web.Extensions.BindingExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition:
    {
        ctor: function (dataContext, bindingManager, converterService)
        {
            this._DataContext = null;
            this._ConverterService = null;
            this._BindingManager = null;
            this._Expression = null;
            this._ConverterKey = null;
            System.Object.ctor.call(this);
            this.set_DataContext(dataContext);
            this.set_BindingManager(bindingManager);
            this.set_ConverterService(converterService);
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        },
        ConverterService$$: "Neptuo.TemplateEngine.Web.IValueConverterService",
        get_ConverterService: function ()
        {
            return this._ConverterService;
        },
        set_ConverterService: function (value)
        {
            this._ConverterService = value;
        },
        BindingManager$$: "Neptuo.TemplateEngine.Web.IBindingManager",
        get_BindingManager: function ()
        {
            return this._BindingManager;
        },
        set_BindingManager: function (value)
        {
            this._BindingManager = value;
        },
        Expression$$: "System.String",
        get_Expression: function ()
        {
            return this._Expression;
        },
        set_Expression: function (value)
        {
            this._Expression = value;
        },
        ConverterKey$$: "System.String",
        get_ConverterKey: function ()
        {
            return this._ConverterKey;
        },
        set_ConverterKey: function (value)
        {
            this._ConverterKey = value;
        },
        ProvideValue: function (context)
        {
            var data = this.GetData();
            if (!System.String.IsNullOrEmpty(this.get_ConverterKey()))
                data = this.get_ConverterService().GetConverter(this.get_ConverterKey()).ConvertTo(data);
            return data;
        },
        GetData: function ()
        {
            var source = this.get_DataContext().Peek(null);
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = this.get_BindingManager().TryGetValue(this.get_Expression(), source, $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value;
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.DataContextStorage", "Neptuo.TemplateEngine.Web.IBindingManager", "Neptuo.TemplateEngine.Web.IValueConverterService"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Extensions$BindingExtension);
var Neptuo$TemplateEngine$Web$Extensions$CurrentUrlExtension =
{
    fullname: "Neptuo.TemplateEngine.Web.Extensions.CurrentUrlExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition:
    {
        ctor: function (provider)
        {
            this.provider = null;
            System.Object.ctor.call(this);
            this.provider = provider;
        },
        ProvideValue: function (context)
        {
            return this.provider.GetCurrentUrl();
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.ICurrentUrlProvider"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Extensions$CurrentUrlExtension);
var Neptuo$TemplateEngine$Web$Extensions$RequestExtension =
{
    fullname: "Neptuo.TemplateEngine.Web.Extensions.RequestExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition:
    {
        ctor: function (parameterProvider)
        {
            this.parameterProvider = null;
            this._Key = null;
            this._Default = null;
            System.Object.ctor.call(this);
            this.parameterProvider = parameterProvider;
        },
        Key$$: "System.String",
        get_Key: function ()
        {
            return this._Key;
        },
        set_Key: function (value)
        {
            this._Key = value;
        },
        Default$$: "System.Object",
        get_Default: function ()
        {
            return this._Default;
        },
        set_Default: function (value)
        {
            this._Default = value;
        },
        ProvideValue: function (context)
        {
            if (this.get_Key() == null)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("Key", "Missing key."), new Error());
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = this.parameterProvider.TryGet(this.get_Key(), $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value;
            return this.get_Default();
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.IParameterProvider"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Extensions$RequestExtension);
var Neptuo$TemplateEngine$Web$Extensions$SwitchExtension =
{
    fullname: "Neptuo.TemplateEngine.Web.Extensions.SwitchExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition:
    {
        ctor: function (converterService)
        {
            this._ConverterService = null;
            this._Expression = null;
            this._ConverterKey = null;
            this._TrueValue = null;
            this._FalseValue = null;
            System.Object.ctor.call(this);
            this.set_ConverterService(converterService);
        },
        ConverterService$$: "Neptuo.TemplateEngine.Web.IValueConverterService",
        get_ConverterService: function ()
        {
            return this._ConverterService;
        },
        set_ConverterService: function (value)
        {
            this._ConverterService = value;
        },
        Expression$$: "System.Object",
        get_Expression: function ()
        {
            return this._Expression;
        },
        set_Expression: function (value)
        {
            this._Expression = value;
        },
        ConverterKey$$: "System.String",
        get_ConverterKey: function ()
        {
            return this._ConverterKey;
        },
        set_ConverterKey: function (value)
        {
            this._ConverterKey = value;
        },
        TrueValue$$: "System.Object",
        get_TrueValue: function ()
        {
            return this._TrueValue;
        },
        set_TrueValue: function (value)
        {
            this._TrueValue = value;
        },
        FalseValue$$: "System.Object",
        get_FalseValue: function ()
        {
            return this._FalseValue;
        },
        set_FalseValue: function (value)
        {
            this._FalseValue = value;
        },
        ProvideValue: function (context)
        {
            if (!System.String.IsNullOrEmpty(this.get_ConverterKey()))
                this.set_Expression(this.get_ConverterService().GetConverter(this.get_ConverterKey()).ConvertTo(this.get_Expression()));
            var value = As(this.get_Expression(), System.Nullable$1.ctor);
            if (value == null)
                return (this.get_TrueValue() != null ? this.get_TrueValue() : this.get_FalseValue());
            if (value.get_Value())
                return this.get_TrueValue();
            return this.get_FalseValue();
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.IValueConverterService"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Extensions$SwitchExtension);
var Neptuo$TemplateEngine$Web$Extensions$TemplateBindingExtension =
{
    fullname: "Neptuo.TemplateEngine.Web.Extensions.TemplateBindingExtension",
    baseTypeName: "Neptuo.TemplateEngine.Web.Extensions.BindingExtension",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (dataContext, bindingManager, converterService)
        {
            Neptuo.TemplateEngine.Web.Extensions.BindingExtension.ctor.call(this, dataContext, bindingManager, converterService);
        },
        GetData: function ()
        {
            var source = this.get_DataContext().Peek("Template");
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = this.get_BindingManager().TryGetValue(this.get_Expression(), source, $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value;
            var attributeSource = As(source, Neptuo.TemplateEngine.Web.Controls.IHtmlAttributeCollection.ctor);
            if (attributeSource != null)
            {
                var attributeValue;
                if ((function ()
                {
                    var $1 = {Value: attributeValue};
                    var $res = attributeSource.get_Attributes().TryGetValue(this.get_Expression().ToLowerInvariant(), $1);
                    attributeValue = $1.Value;
                    return $res;
                }).call(this))
                    return attributeValue;
            }
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.DataContextStorage", "Neptuo.TemplateEngine.Web.IBindingManager", "Neptuo.TemplateEngine.Web.IValueConverterService"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Extensions$TemplateBindingExtension);
var Neptuo$TemplateEngine$Web$GlobalNavigationCollection =
{
    fullname: "Neptuo.TemplateEngine.Web.GlobalNavigationCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.Navigation.FormUri.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (name, to)
        {
            if (name == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("name"), new Error());
            if (to == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("to"), new Error());
            this.storage.set_Item$$TKey(name, to);
            return this;
        },
        TryGetValue: function (name, to)
        {
            if (name == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("name"), new Error());
            return this.storage.TryGetValue(name, to);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$GlobalNavigationCollection);
var Neptuo$TemplateEngine$Web$ICurrentUrlProvider = {fullname: "Neptuo.TemplateEngine.Web.ICurrentUrlProvider", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$ICurrentUrlProvider);
var Neptuo$TemplateEngine$Web$IListDataSource = {fullname: "Neptuo.TemplateEngine.Web.IListDataSource", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$IListDataSource);
var Neptuo$TemplateEngine$Web$IDataSource = {fullname: "Neptuo.TemplateEngine.Web.IDataSource", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$IDataSource);
var Neptuo$TemplateEngine$Web$IParameterProvider = {fullname: "Neptuo.TemplateEngine.Web.IParameterProvider", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$IParameterProvider);
var Neptuo$TemplateEngine$Web$IValueConverter = {fullname: "Neptuo.TemplateEngine.Web.IValueConverter", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$IValueConverter);
var Neptuo$TemplateEngine$Web$IValueConverterService = {fullname: "Neptuo.TemplateEngine.Web.IValueConverterService", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$IValueConverterService);
var Neptuo$TemplateEngine$Web$Converters$NullToBoolValueConverter =
{
    fullname: "Neptuo.TemplateEngine.Web.Converters.NullToBoolValueConverter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IValueConverter"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        ConvertTo: function (value)
        {
            return value != null;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Converters$NullToBoolValueConverter);
var Neptuo$TemplateEngine$Web$Observers$VisibleObserver =
{
    fullname: "Neptuo.TemplateEngine.Web.Observers.VisibleObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._IsVisible = false;
            System.Object.ctor.call(this);
        },
        IsVisible$$: "System.Boolean",
        get_IsVisible: function ()
        {
            return this._IsVisible;
        },
        set_IsVisible: function (value)
        {
            this._IsVisible = value;
        },
        OnInit: function (e)
        {
            if (!this.get_IsVisible())
                e.set_Cancel(true);
        },
        Render: function (e, writer)
        {
            if (!this.get_IsVisible())
                e.set_Cancel(true);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Observers$VisibleObserver);
var Neptuo$TemplateEngine$Web$ValueConverterService =
{
    fullname: "Neptuo.TemplateEngine.Web.ValueConverterService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IValueConverterService"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.Web.IValueConverter.ctor);
            System.Object.ctor.call(this);
        },
        GetConverter: function (key)
        {
            if (System.String.IsNullOrEmpty(key))
                throw $CreateException(new System.ArgumentNullException.ctor$$String$$String("key", "Key can\'t be null or empty!"), new Error());
            if (!this.storage.ContainsKey(key))
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$Object$$String("key", "There is no converter associated with key {0}!", key), new Error());
            return this.storage.get_Item$$TKey(key);
        },
        SetConverter: function (key, converter)
        {
            this.storage.set_Item$$TKey(key, converter);
            return this;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$ValueConverterService);
var Neptuo$TemplateEngine$Web$IBindingManager = {fullname: "Neptuo.TemplateEngine.Web.IBindingManager", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$IBindingManager);
var Neptuo$TemplateEngine$Web$Message =
{
    fullname: "Neptuo.TemplateEngine.Web.Message",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (key, text, type)
        {
            this._Key = null;
            this._Type = Neptuo.TemplateEngine.Web.MessageType.Error;
            this._Text = null;
            System.Object.ctor.call(this);
            if (text == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("text"), new Error());
            this.set_Key(key);
            this.set_Text(text);
            this.set_Type(type);
        },
        Key$$: "System.String",
        get_Key: function ()
        {
            return this._Key;
        },
        set_Key: function (value)
        {
            this._Key = value;
        },
        Type$$: "Neptuo.TemplateEngine.Web.MessageType",
        get_Type: function ()
        {
            return this._Type;
        },
        set_Type: function (value)
        {
            this._Type = value;
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String", "System.String", "Neptuo.TemplateEngine.Web.MessageType"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Message);
var Neptuo$TemplateEngine$Web$MessageType =
{
    fullname: "Neptuo.TemplateEngine.Web.MessageType",
    staticDefinition: {Error: 0, Info: 1, Warn: 2},
    Kind: "Enum",
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$MessageType);
var Neptuo$TemplateEngine$Web$Controls$PasswordBoxControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.PasswordBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TextBoxControl",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            Neptuo.TemplateEngine.Web.Controls.TextBoxControl.ctor.call(this, componentManager);
            this.set_Type("password");
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$PasswordBoxControl);
var Neptuo$TemplateEngine$Web$Controls$StringTemplate =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.StringTemplate",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ViewTemplateBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (dependencyProvider, componentManager, viewService)
        {
            this._TemplateContent = null;
            Neptuo.TemplateEngine.Web.Controls.ViewTemplateBase.ctor.call(this, dependencyProvider, componentManager, viewService);
        },
        TemplateContent$$: "System.String",
        get_TemplateContent: function ()
        {
            return this._TemplateContent;
        },
        set_TemplateContent: function (value)
        {
            this._TemplateContent = value;
        },
        CreateView: function ()
        {
            return Cast(this.get_ViewService().ProcessContent(this.get_TemplateContent(), new Neptuo.Templates.Compilation.ViewServiceContext.ctor(this.get_DependencyProvider())), Neptuo.Templates.BaseGeneratedView.ctor);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IDependencyProvider", "Neptuo.Templates.IComponentManager", "Neptuo.Templates.Compilation.IViewService"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$StringTemplate);
var Neptuo$TemplateEngine$Web$Controls$TemplateContentControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.TemplateContentControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Name = null;
            Neptuo.TemplateEngine.Web.Controls.ContentControlBase.ctor.call(this, componentManager);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$TemplateContentControl);
var Neptuo$TemplateEngine$Web$Controls$TemplateControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, contents)
        {
            this._Content = null;
            this._Template = null;
            this._Contents = null;
            this._TemplateContent = null;
            this._Storage = null;
            Neptuo.TemplateEngine.Web.Controls.ControlBase.ctor.call(this, componentManager);
            this.set_Contents(contents);
            this.set_Storage(contents.CreateStorage());
        },
        Content$$: "System.Collections.Generic.ICollection`1[[Neptuo.TemplateEngine.Web.Controls.TemplateContentControl]]",
        get_Content: function ()
        {
            return this._Content;
        },
        set_Content: function (value)
        {
            this._Content = value;
        },
        Template$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_Template: function ()
        {
            return this._Template;
        },
        set_Template: function (value)
        {
            this._Template = value;
        },
        Contents$$: "Neptuo.TemplateEngine.Web.TemplateContentStorageStack",
        get_Contents: function ()
        {
            return this._Contents;
        },
        set_Contents: function (value)
        {
            this._Contents = value;
        },
        TemplateContent$$: "Neptuo.TemplateEngine.Web.Controls.ITemplateContent",
        get_TemplateContent: function ()
        {
            return this._TemplateContent;
        },
        set_TemplateContent: function (value)
        {
            this._TemplateContent = value;
        },
        Storage$$: "Neptuo.TemplateEngine.Web.TemplateContentStorage",
        get_Storage: function ()
        {
            return this._Storage;
        },
        set_Storage: function (value)
        {
            this._Storage = value;
        },
        OnInit: function ()
        {
            this.InitComponents$1(Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor, this.get_Content());
            if (this.get_Content() != null)
                this.get_Storage().AddRange(this.get_Content());
            this.get_Contents().Push(this.get_Storage());
            Neptuo.TemplateEngine.Web.Controls.ControlBase.commonPrototype.OnInit.call(this);
            this.InitComponent(this.get_Template());
            this.set_TemplateContent(this.get_Template().CreateInstance());
            this.InitComponent(this.get_TemplateContent());
            this.get_Contents().Pop();
        },
        Render: function (writer)
        {
            this.get_Contents().Push(this.get_Storage());
            this.RenderComponent(this.get_TemplateContent(), writer);
            this.get_Contents().Pop();
        },
        InitTemplate: function (template)
        {
            var control = new Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor(this.get_ComponentManager(), this.get_Contents());
            control.set_Template(template);
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor, control, null);
            this.InitComponent(control);
            return control;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$TemplateControl);
var Neptuo$TemplateEngine$Web$Controls$TemplatePlaceholder =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.TemplatePlaceholder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (contents)
        {
            this._Contents = null;
            this._Name = null;
            System.Object.ctor.call(this);
            this.set_Contents(contents);
        },
        Contents$$: "Neptuo.TemplateEngine.Web.TemplateContentStorageStack",
        get_Contents: function ()
        {
            return this._Contents;
        },
        set_Contents: function (value)
        {
            this._Contents = value;
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        OnInit: function ()
        {
            if (this.get_Name() == null)
                this.set_Name(System.String.Empty);
        },
        Render: function (writer)
        {
            var storage = this.get_Contents().Peek();
            if (storage.ContainsKey(this.get_Name()))
                storage.Get(this.get_Name()).Render(writer);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.TemplateContentStorageStack"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$TemplatePlaceholder);
var Neptuo$TemplateEngine$Web$Controls$TextBoxControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.TextBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.FormInputControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITextControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Text = null;
            this._IsAutoFocus = false;
            Neptuo.TemplateEngine.Web.Controls.FormInputControlBase.ctor.call(this, componentManager);
            this.set_Type("text");
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        IsAutoFocus$$: "System.Boolean",
        get_IsAutoFocus: function ()
        {
            return this._IsAutoFocus;
        },
        set_IsAutoFocus: function (value)
        {
            this._IsAutoFocus = value;
        },
        Render: function (writer)
        {
            this.get_Attributes().set_Item$$TKey("value", this.get_Text());
            if (this.get_IsAutoFocus())
                this.get_Attributes().set_Item$$TKey("autofocus", "autofocus");
            Neptuo.TemplateEngine.Web.Controls.FormInputControlBase.commonPrototype.Render.call(this, writer);
        },
        HandleValue: function (value)
        {
            this.set_Text(value);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$TextBoxControl);
var Neptuo$TemplateEngine$Web$Controls$ViewTemplateBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ViewTemplateBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITemplate"],
    Kind: "Class",
    definition:
    {
        ctor: function (dependencyProvider, componentManager, viewService)
        {
            this._DependencyProvider = null;
            this._ComponentManager = null;
            this._ViewService = null;
            System.Object.ctor.call(this);
            this.set_DependencyProvider(dependencyProvider);
            this.set_ComponentManager(componentManager);
            this.set_ViewService(viewService);
        },
        DependencyProvider$$: "Neptuo.IDependencyProvider",
        get_DependencyProvider: function ()
        {
            return this._DependencyProvider;
        },
        set_DependencyProvider: function (value)
        {
            this._DependencyProvider = value;
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function ()
        {
            return this._ComponentManager;
        },
        set_ComponentManager: function (value)
        {
            this._ComponentManager = value;
        },
        ViewService$$: "Neptuo.Templates.Compilation.IViewService",
        get_ViewService: function ()
        {
            return this._ViewService;
        },
        set_ViewService: function (value)
        {
            this._ViewService = value;
        },
        CreateInstance: function ()
        {
            var view = this.CreateView();
            view.Setup(new Neptuo.Templates.BaseViewPage.ctor(this.get_ComponentManager()), this.get_ComponentManager(), this.get_DependencyProvider());
            view.CreateControls();
            var templateContent = new Neptuo.TemplateEngine.Web.Controls.ViewTemplateContent.ctor(view);
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.ViewTemplateContent.ctor, templateContent, null);
            return templateContent;
        },
        Dispose: function ()
        {
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IDependencyProvider", "Neptuo.Templates.IComponentManager", "Neptuo.Templates.Compilation.IViewService"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ViewTemplateBase);
var Neptuo$TemplateEngine$Web$Controls$ViewTemplateContent =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ViewTemplateContent",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITemplateContent"],
    Kind: "Class",
    definition:
    {
        ctor: function (view)
        {
            this._View = null;
            System.Object.ctor.call(this);
            this.set_View(view);
        },
        View$$: "Neptuo.Templates.BaseGeneratedView",
        get_View: function ()
        {
            return this._View;
        },
        set_View: function (value)
        {
            this._View = value;
        },
        OnInit: function ()
        {
            this.get_View().Init();
        },
        Render: function (writer)
        {
            this.get_View().Render(writer);
        },
        Dispose: function ()
        {
            this.get_View().Dispose();
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.BaseGeneratedView"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ViewTemplateContent);
var Neptuo$TemplateEngine$Web$GeneratedViewBase =
{
    fullname: "Neptuo.TemplateEngine.Web.GeneratedViewBase",
    baseTypeName: "Neptuo.Templates.BaseGeneratedView",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.urlProvider = null;
            this.httpContext = null;
            this.bindingConverters = null;
            Neptuo.Templates.BaseGeneratedView.ctor.call(this);
        },
        ResolveUrl: function (relativeUrl)
        {
            if (this.urlProvider == null)
                this.urlProvider = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Templates.IVirtualUrlProvider.ctor, this.dependencyProvider);
            return this.urlProvider.ResolveUrl(relativeUrl);
        },
        ValueFromRequest$1: function (T, key)
        {
            if (this.httpContext == null)
                this.httpContext = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(System.Web.HttpContextBase.ctor, this.dependencyProvider);
            if (!System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, this.httpContext.get_Request().get_Params().get_AllKeys(), key))
                return Default(T);
            var value = this.httpContext.get_Request().get_Params().get_Item$$String(key);
            var targetType = Typeof(T);
            var typeConverter = System.ComponentModel.TypeDescriptor.GetConverter$$Type(targetType);
            if (!typeConverter.CanConvertFrom$$Type(value.GetType()))
                return Default(T);
            return Cast(typeConverter.ConvertFrom$$Object(value), T);
        },
        CastValueTo$1: function (T, value)
        {
            if (value == null)
                return null;
            var sourceType = value.GetType();
            var targetType = Typeof(T);
            if (System.Type.op_Equality$$Type$$Type(sourceType, targetType))
                return Cast(value, T);
            if (System.Type.op_Equality$$Type$$Type(sourceType, Typeof(System.String.ctor)))
            {
                if (this.bindingConverters == null)
                    this.bindingConverters = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.PresentationModels.IBindingConverterCollection.ctor, this.dependencyProvider);
                var field = new Neptuo.PresentationModels.FieldDefinition.ctor(System.String.Empty, new Neptuo.PresentationModels.TypeFieldType.ctor(targetType), new Neptuo.PresentationModels.MetadataCollection.ctor());
                var targetValue;
                if ((function ()
                {
                    var $1 = {Value: targetValue};
                    var $res = this.bindingConverters.TryConvert(value.ToString(), field, $1);
                    targetValue = $1.Value;
                    return $res;
                }).call(this))
                    return Cast(targetValue, T);
            }
            return Neptuo.Templates.BaseGeneratedView.commonPrototype.CastValueTo$1.call(T, this, value);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$GeneratedViewBase);
var Neptuo$TemplateEngine$Web$Controls$LiteralControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.LiteralControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITextControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Text = null;
            this._FormatString = null;
            Neptuo.TemplateEngine.Web.Controls.ControlBase.ctor.call(this, componentManager);
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        FormatString$$: "System.String",
        get_FormatString: function ()
        {
            return this._FormatString;
        },
        set_FormatString: function (value)
        {
            this._FormatString = value;
        },
        Render: function (writer)
        {
            if (!System.String.IsNullOrEmpty(this.get_FormatString()))
                writer.Content$$String(System.String.Format$$String$$Object(this.get_FormatString(), this.get_Text()));
            else
                writer.Content$$String(this.get_Text());
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$LiteralControl);
var Neptuo$TemplateEngine$Web$Controls$PresentationControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.PresentationControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, configuration)
        {
            this._DataContext = null;
            this._ModelGetter = null;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, componentManager, configuration.get_TemplateStorage());
            this.set_DataContext(configuration.get_DataContext());
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        },
        ModelGetter$$: "Neptuo.PresentationModels.IModelValueGetter",
        get_ModelGetter: function ()
        {
            return this._ModelGetter;
        },
        set_ModelGetter: function (value)
        {
            this._ModelGetter = value;
        },
        OnInit: function ()
        {
            this.InitComponent(this.get_Template());
            this.set_TemplateContent(this.get_Template().CreateInstance());
            this.set_ModelGetter(this.CreateModel());
            this.get_DataContext().Push(this.get_ModelGetter(), null);
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop(null);
        },
        Render: function (writer)
        {
            this.get_DataContext().Push(this.get_ModelGetter(), null);
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.Render.call(this, writer);
            this.get_DataContext().Pop(null);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.PresentationConfiguration"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$PresentationControlBase);
var Neptuo$TemplateEngine$Web$LocalizationHelper =
{
    fullname: "Neptuo.TemplateEngine.Web.LocalizationHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Translate: function (text)
        {
            return text;
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$LocalizationHelper);
var Neptuo$TemplateEngine$Web$MessageStorage =
{
    fullname: "Neptuo.TemplateEngine.Web.MessageStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (group, key, text, type)
        {
            if (group == null)
                group = System.String.Empty;
            var list;
            if (!(function ()
            {
                var $1 = {Value: list};
                var $res = this.storage.TryGetValue(group, $1);
                list = $1.Value;
                return $res;
            }).call(this))
            {
                list = new System.Collections.Generic.List$1.ctor(Neptuo.TemplateEngine.Web.Message.ctor);
                this.storage.Add(group, list);
            }
            list.Add(new Neptuo.TemplateEngine.Web.Message.ctor(key, text, type));
        },
        GetList: function (key)
        {
            if (key == null)
                key = System.String.Empty;
            var list;
            if (!(function ()
            {
                var $1 = {Value: list};
                var $res = this.storage.TryGetValue(key, $1);
                list = $1.Value;
                return $res;
            }).call(this))
                return new System.Collections.Generic.List$1.ctor(Neptuo.TemplateEngine.Web.Message.ctor);
            return list;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$MessageStorage);
var Neptuo$TemplateEngine$Web$Observers$EventObserver =
{
    fullname: "Neptuo.TemplateEngine.Web.Observers.EventObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Event = null;
            System.Object.ctor.call(this);
        },
        Event$$: "System.String",
        get_Event: function ()
        {
            return this._Event;
        },
        set_Event: function (value)
        {
            this._Event = value;
        },
        OnInit: function (e)
        {
            var button = As(e.get_Target(), Neptuo.TemplateEngine.Web.Controls.ButtonControl.ctor);
            if (button == null)
                throw $CreateException(new System.InvalidOperationException.ctor$$String("EventObserver must used on ButtonControl."), new Error());
            if (System.String.IsNullOrEmpty(button.get_Name()))
                button.set_Name(this.get_Event());
        },
        Render: function (e, writer)
        {
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Observers$EventObserver);
var Neptuo$TemplateEngine$Web$Observers$HtmlObserver =
{
    fullname: "Neptuo.TemplateEngine.Web.Observers.HtmlObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._ID = null;
            this._Name = null;
            this._Class = null;
            this._Style = null;
            System.Object.ctor.call(this);
        },
        ID$$: "System.String",
        get_ID: function ()
        {
            return this._ID;
        },
        set_ID: function (value)
        {
            this._ID = value;
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        Class$$: "System.String",
        get_Class: function ()
        {
            return this._Class;
        },
        set_Class: function (value)
        {
            this._Class = value;
        },
        Style$$: "System.String",
        get_Style: function ()
        {
            return this._Style;
        },
        set_Style: function (value)
        {
            this._Style = value;
        },
        OnInit: function (e)
        {
            var htmlControl = As(e.get_Target(), Neptuo.Templates.IAttributeCollection.ctor);
            if (htmlControl == null)
                return;
            if (!System.String.IsNullOrEmpty(this.get_ID()))
                htmlControl.SetAttribute("id", this.get_ID());
            if (!System.String.IsNullOrEmpty(this.get_Name()))
                htmlControl.SetAttribute("name", this.get_Name());
            if (!System.String.IsNullOrEmpty(this.get_Class()))
                htmlControl.SetAttribute("class", this.get_Class());
            if (!System.String.IsNullOrEmpty(this.get_Style()))
                htmlControl.SetAttribute("style", this.get_Style());
        },
        Render: function (e, writer)
        {
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Observers$HtmlObserver);
var Neptuo$TemplateEngine$Web$Observers$IsPlaceholderObserver =
{
    fullname: "Neptuo.TemplateEngine.Web.Observers.IsPlaceholderObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition:
    {
        ctor: function (templateStorage)
        {
            this._IsPlaceholder = null;
            this._TemplateStorage = null;
            System.Object.ctor.call(this);
            this.set_TemplateStorage(templateStorage);
        },
        IsPlaceholder$$: "System.String",
        get_IsPlaceholder: function ()
        {
            return this._IsPlaceholder;
        },
        set_IsPlaceholder: function (value)
        {
            this._IsPlaceholder = value;
        },
        TemplateStorage$$: "Neptuo.TemplateEngine.Web.TemplateContentStorageStack",
        get_TemplateStorage: function ()
        {
            return this._TemplateStorage;
        },
        set_TemplateStorage: function (value)
        {
            this._TemplateStorage = value;
        },
        OnInit: function (e)
        {
            if (!this.get_TemplateStorage().Peek().ContainsKey(this.get_IsPlaceholder()))
                e.set_Cancel(true);
        },
        Render: function (e, writer)
        {
            if (!this.get_TemplateStorage().Peek().ContainsKey(this.get_IsPlaceholder()))
                e.set_Cancel(true);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.TemplateContentStorageStack"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Observers$IsPlaceholderObserver);
var Neptuo$TemplateEngine$Web$PresentationConfiguration =
{
    fullname: "Neptuo.TemplateEngine.Web.PresentationConfiguration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (templateStorage, valueProviderFactory, dataContext)
        {
            this._TemplateStorage = null;
            this._ValueProviderFactory = null;
            this._DataContext = null;
            System.Object.ctor.call(this);
            if (templateStorage == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("templateStorage"), new Error());
            if (valueProviderFactory == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("valueProviderFactory"), new Error());
            if (dataContext == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("dataContext"), new Error());
            this.set_TemplateStorage(templateStorage);
            this.set_ValueProviderFactory(valueProviderFactory);
            this.set_DataContext(dataContext);
        },
        TemplateStorage$$: "Neptuo.TemplateEngine.Web.TemplateContentStorageStack",
        get_TemplateStorage: function ()
        {
            return this._TemplateStorage;
        },
        set_TemplateStorage: function (value)
        {
            this._TemplateStorage = value;
        },
        ValueProviderFactory$$: "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory",
        get_ValueProviderFactory: function ()
        {
            return this._ValueProviderFactory;
        },
        set_ValueProviderFactory: function (value)
        {
            this._ValueProviderFactory = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory", "Neptuo.TemplateEngine.Web.DataContextStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PresentationConfiguration);
var Neptuo$TemplateEngine$Web$PresentationConfiguration$1 =
{
    fullname: "Neptuo.TemplateEngine.Web.PresentationConfiguration$1",
    baseTypeName: "Neptuo.TemplateEngine.Web.PresentationConfiguration",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (T, templateStorage, valueProviderFactory, dataContext)
        {
            this.T = T;
            Neptuo.TemplateEngine.Web.PresentationConfiguration.ctor.call(this, templateStorage, valueProviderFactory, dataContext);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory", "Neptuo.TemplateEngine.Web.DataContextStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PresentationConfiguration$1);
var Neptuo$TemplateEngine$Web$PropertySetAttribute =
{
    fullname: "Neptuo.TemplateEngine.Web.PropertySetAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (allowFromRequest, requestKey)
        {
            this._AllowFromRequest = false;
            this._RequestKey = null;
            System.Attribute.ctor.call(this);
            this.set_AllowFromRequest(allowFromRequest);
            this.set_RequestKey(requestKey);
        },
        AllowFromRequest$$: "System.Boolean",
        get_AllowFromRequest: function ()
        {
            return this._AllowFromRequest;
        },
        set_AllowFromRequest: function (value)
        {
            this._AllowFromRequest = value;
        },
        RequestKey$$: "System.String",
        get_RequestKey: function ()
        {
            return this._RequestKey;
        },
        set_RequestKey: function (value)
        {
            this._RequestKey = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Boolean", "System.String"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PropertySetAttribute);
var Neptuo$TemplateEngine$Web$TemplateContentStorage =
{
    fullname: "Neptuo.TemplateEngine.Web.TemplateContentStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    Kind: "Class",
    definition:
    {
        ctor: function (parent)
        {
            this.parent = null;
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor);
            System.Object.ctor.call(this);
            this.parent = parent;
        },
        Add: function (key, content)
        {
            this.storage.set_Item$$TKey(key, content);
        },
        AddRange: function (contents)
        {
            if (contents == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("contents"), new Error());
            var $it22 = contents.GetEnumerator();
            while ($it22.MoveNext())
            {
                var content = $it22.get_Current();
                this.Add(content.get_Name(), content);
            }
        },
        ContainsKey: function (key)
        {
            if (this.storage.ContainsKey(key))
                return true;
            if (this.parent == null)
                return false;
            return this.parent.ContainsKey(key);
        },
        Get: function (key)
        {
            if (this.storage.ContainsKey(key))
                return this.storage.get_Item$$TKey(key);
            if (this.parent == null)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("key", System.String.Format$$String$$Object("Missing key \'{0}\'.", key)), new Error());
            return this.parent.Get(key);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.TemplateEngine.Web.TemplateContentStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$TemplateContentStorage);
var Neptuo$TemplateEngine$Web$TemplateContentStorageStack =
{
    fullname: "Neptuo.TemplateEngine.Web.TemplateContentStorageStack",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web",
    interfaceNames: ["Neptuo.TemplateEngine.IStackStorage$1"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.innerStorage = new System.Collections.Generic.Stack$1.ctor(Neptuo.TemplateEngine.Web.TemplateContentStorage.ctor);
            System.Object.ctor.call(this);
        },
        CreateStorage: function ()
        {
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(Neptuo.TemplateEngine.Web.TemplateContentStorage.ctor, this.innerStorage))
                return new Neptuo.TemplateEngine.Web.TemplateContentStorage.ctor(this.innerStorage.Peek());
            return new Neptuo.TemplateEngine.Web.TemplateContentStorage.ctor(null);
        },
        Push: function (storage)
        {
            this.innerStorage.Push(storage);
        },
        Pop: function ()
        {
            return this.innerStorage.Pop();
        },
        Peek: function ()
        {
            return this.innerStorage.Peek();
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$TemplateContentStorageStack);
