/* Generated by SharpKit 5 v5.3.6 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$TemplateEngine$IStackStorage$1 = {
    fullname: "Neptuo.TemplateEngine.IStackStorage$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$IStackStorage$1);
var Neptuo$TemplateEngine$Templates$Controls$BundleControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.BundleControlBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (urlProvider){
            this.urlProvider = null;
            this._IsStyle = false;
            this._Path = null;
            System.Object.ctor.call(this);
            this.urlProvider = urlProvider;
        },
        IsStyle$$: "System.Boolean",
        get_IsStyle: function (){
            return this._IsStyle;
        },
        set_IsStyle: function (value){
            this._IsStyle = value;
        },
        Path$$: "System.String",
        get_Path: function (){
            return this._Path;
        },
        set_Path: function (value){
            this._Path = value;
        },
        OnInit: function (){
            Neptuo.Guard.NotNull$$Object$$String(this.get_Path(), "Path");
        },
        Render: function (writer){
            if (this.get_IsStyle())
                this.RenderStyle(writer);
            else
                this.RenderScript(writer);
        },
        RenderScript: function (writer){
            Neptuo.TemplateEngine.Templates.HtmlWriterExtensions.Script(writer, this.urlProvider.ResolveUrl(this.get_Path()));
        },
        RenderStyle: function (writer){
            Neptuo.TemplateEngine.Templates.HtmlWriterExtensions.Style(writer, this.urlProvider.ResolveUrl(this.get_Path()));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IVirtualUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$BundleControlBase);
var Neptuo$TemplateEngine$Templates$Controls$GetFormControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.GetFormControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, urlProvider){
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "form", false);
            this.get_Attributes().set_Item$$TKey("method", "get");
            this.get_Attributes().set_Item$$TKey("action", urlProvider.GetCurrentUrl());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.ICurrentUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$GetFormControl);
var Neptuo$TemplateEngine$Templates$Controls$PostFormControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.PostFormControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, urlProvider){
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "form", false);
            this.get_Attributes().set_Item$$TKey("method", "post");
            this.get_Attributes().set_Item$$TKey("action", urlProvider.GetCurrentUrl());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.ICurrentUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$PostFormControl);
var Neptuo$TemplateEngine$Templates$Controls$IPaginationControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.IPaginationControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$IPaginationControl);
var Neptuo$TemplateEngine$Templates$Controls$PaginationControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.PaginationControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.IPaginationControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager, urlProvider, storage){
            this.urlProvider = null;
            this._ItemTemplate = null;
            this._PageSize = 0;
            this._PageIndex = 0;
            this._TotalCount = 0;
            Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor.call(this, componentManager, storage);
            Neptuo.Guard.NotNull$$Object$$String(urlProvider, "urlProvider");
            this.urlProvider = urlProvider;
        },
        ItemTemplate$$: "Neptuo.TemplateEngine.Templates.Controls.ITemplate",
        get_ItemTemplate: function (){
            return this._ItemTemplate;
        },
        set_ItemTemplate: function (value){
            this._ItemTemplate = value;
        },
        PageSize$$: "System.Int32",
        get_PageSize: function (){
            return this._PageSize;
        },
        set_PageSize: function (value){
            this._PageSize = value;
        },
        PageIndex$$: "System.Int32",
        get_PageIndex: function (){
            return this._PageIndex;
        },
        set_PageIndex: function (value){
            this._PageIndex = value;
        },
        TotalCount$$: "System.Int32",
        get_TotalCount: function (){
            return this._TotalCount;
        },
        set_TotalCount: function (value){
            this._TotalCount = value;
        },
        OnInit: function (){
        },
        Render: function (writer){
            writer.Tag("ul").Attribute("class", "pagination pagination-sm");
            for (var i = 0; i < Cast(System.Math.Ceiling$$Decimal(this.get_TotalCount() / this.get_PageSize()), System.Int32.ctor); i++){
                writer.Tag("li").Attribute("class", (this.get_PageIndex() == i) ? "active" : "").Tag("a").Attribute("href", this.urlProvider.GetCurrentUrl() + ((i != 0) ? ("?PageIndex=" + i) : "")).Content$$Object(i + 1).CloseFullTag().CloseFullTag();
            }
            writer.CloseFullTag();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.ICurrentUrlProvider", "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$PaginationControl);
var Neptuo$TemplateEngine$Templates$Controls$SelectControlContext = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.SelectControlContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (requestContext, storage, dataContext, bindingManager){
            this._RequestContext = null;
            this._Storage = null;
            this._DataContext = null;
            this._BindingManager = null;
            System.Object.ctor.call(this);
            this.set_RequestContext(requestContext);
            this.set_Storage(storage);
            this.set_DataContext(dataContext);
            this.set_BindingManager(bindingManager);
        },
        RequestContext$$: "Neptuo.TemplateEngine.Templates.IRequestContext",
        get_RequestContext: function (){
            return this._RequestContext;
        },
        set_RequestContext: function (value){
            this._RequestContext = value;
        },
        Storage$$: "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Templates.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        },
        BindingManager$$: "Neptuo.TemplateEngine.Templates.IBindingManager",
        get_BindingManager: function (){
            return this._BindingManager;
        },
        set_BindingManager: function (value){
            this._BindingManager = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.IRequestContext", "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack", "Neptuo.TemplateEngine.Templates.DataContextStorage", "Neptuo.TemplateEngine.Templates.IBindingManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$SelectControlContext);
var Neptuo$TemplateEngine$Templates$Controls$SelectItem = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.SelectItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (model){
            this._Model = null;
            this._IsSelected = false;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(model, "model");
            this.set_Model(model);
        },
        Model$$: "System.Object",
        get_Model: function (){
            return this._Model;
        },
        set_Model: function (value){
            this._Model = value;
        },
        IsSelected$$: "System.Boolean",
        get_IsSelected: function (){
            return this._IsSelected;
        },
        set_IsSelected: function (value){
            this._IsSelected = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$SelectItem);
var Neptuo$TemplateEngine$Templates$Controls$ViewBundleControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ViewBundleControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (urlProvider){
            this.urlProvider = null;
            this._Path = null;
            System.Object.ctor.call(this);
            this.urlProvider = urlProvider;
        },
        Path$$: "System.String",
        get_Path: function (){
            return this._Path;
        },
        set_Path: function (value){
            this._Path = value;
        },
        OnInit: function (){
        },
        Render: function (writer){
            writer.Tag("script").Attribute("src", this.urlProvider.ResolveUrl(System.String.Format$$String$$Object("~/Views.ashx?Path={0}", this.get_Path()))).CloseFullTag();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IVirtualUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ViewBundleControl);
var Neptuo$TemplateEngine$Templates$DataSources$IListResult = {
    fullname: "Neptuo.TemplateEngine.Templates.DataSources.IListResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$DataSources$IListResult);
var Neptuo$TemplateEngine$Templates$DataSources$ListResult = {
    fullname: "Neptuo.TemplateEngine.Templates.DataSources.ListResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.DataSources.IListResult"],
    Kind: "Class",
    definition: {
        ctor: function (data, totalCount){
            this._Data = null;
            this._TotalCount = 0;
            System.Object.ctor.call(this);
            this.set_Data(data);
            this.set_TotalCount(totalCount);
        },
        Data$$: "System.Collections.IEnumerable",
        get_Data: function (){
            return this._Data;
        },
        set_Data: function (value){
            this._Data = value;
        },
        TotalCount$$: "System.Int32",
        get_TotalCount: function (){
            return this._TotalCount;
        },
        set_TotalCount: function (value){
            this._TotalCount = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.IEnumerable", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$DataSources$ListResult);
var Neptuo$TemplateEngine$Templates$HtmlWriterExtensions = {
    fullname: "Neptuo.TemplateEngine.Templates.HtmlWriterExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Script: function (writer, path){
            return writer.Tag("script").Attribute("src", path).CloseFullTag();
        },
        Style: function (writer, path){
            return writer.Tag("link").Attribute("href", path).Attribute("rel", "stylesheet").CloseTag();
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$HtmlWriterExtensions);
var Neptuo$TemplateEngine$StackStorage$1 = {
    fullname: "Neptuo.TemplateEngine.StackStorage$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.IStackStorage$1"],
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this._Stack = null;
            System.Object.ctor.call(this);
            this.set_Stack(new System.Collections.Generic.Stack$1.ctor(this.T));
        },
        Stack$$: "System.Collections.Generic.Stack`1[[`0]]",
        get_Stack: function (){
            return this._Stack;
        },
        set_Stack: function (value){
            this._Stack = value;
        },
        Push: function (storage){
            this.get_Stack().Push(storage);
        },
        Pop: function (){
            return this.get_Stack().Pop();
        },
        Peek: function (){
            return this.get_Stack().Peek();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$StackStorage$1);
var Neptuo$TemplateEngine$Templates$BindingManagerBase = {
    fullname: "Neptuo.TemplateEngine.Templates.BindingManagerBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.IBindingManager"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        TrySetValue: function (target, expression, value){
            var info = null;
            var type = target.GetType();
            var exprs = expression.Split$$Char$Array$$StringSplitOptions(["."], 1);
            for (var i = 0; i < exprs.get_Length(); i++){
                info = type.GetProperty$$String(exprs[i]);
                type = info.get_PropertyType();
                if (i < (exprs.get_Length() - 1))
                    target = info.GetValue$$Object$$Object$Array(target, null);
            }
            if (System.Reflection.PropertyInfo.op_Inequality$$PropertyInfo$$PropertyInfo(info, null))
                info.SetValue$$Object$$Object$$Object$Array(target, value, null);
            return System.Reflection.PropertyInfo.op_Inequality$$PropertyInfo$$PropertyInfo(info, null);
        },
        TryGetValue: function (expression, source, value){
            if (System.String.IsNullOrEmpty(expression)){
                value.Value = source;
                return true;
            }
            if (source == null){
                value.Value = null;
                return false;
            }
            var provider = As(source, Neptuo.PresentationModels.IModelValueProvider.ctor);
            if (provider != null)
                return provider.TryGetValue(expression, value);
            var info = null;
            var type = source.GetType();
            var exprs = expression.Split$$Char$Array$$StringSplitOptions(["."], 1);
            for (var i = 0; i < exprs.get_Length(); i++){
                info = type.GetProperty$$String(exprs[i]);
                if (System.Reflection.PropertyInfo.op_Equality$$PropertyInfo$$PropertyInfo(info, null)){
                    value.Value = null;
                    return false;
                }
                if (source != null){
                    source = info.GetValue$$Object$$Object$Array(source, null);
                    if (source != null)
                        type = source.GetType();
                    else
                        type = info.get_PropertyType();
                }
                provider = As(source, Neptuo.PresentationModels.IModelValueProvider.ctor);
                if (provider != null)
                    return provider.TryGetValue(System.String.Join$$String$$IEnumerable$1$String(".", System.Linq.Enumerable.Skip$1(System.String.ctor, exprs, i + 1)), value);
            }
            value.Value = source;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$BindingManagerBase);
var Neptuo$TemplateEngine$Templates$CompositeRequestContext = {
    fullname: "Neptuo.TemplateEngine.Templates.CompositeRequestContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.IRequestContext"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager, currentUrl, urlProvider, parameterFactory){
            this.currentUrl = null;
            this.urlProvider = null;
            this.parameterFactory = null;
            this._ComponentManager = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(componentManager, "componentManager");
            Neptuo.Guard.NotNull$$Object$$String(currentUrl, "currentUrl");
            Neptuo.Guard.NotNull$$Object$$String(urlProvider, "urlProvider");
            Neptuo.Guard.NotNull$$Object$$String(parameterFactory, "parameterFactory");
            this.set_ComponentManager(componentManager);
            this.currentUrl = currentUrl;
            this.urlProvider = urlProvider;
            this.parameterFactory = parameterFactory;
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function (){
            return this._ComponentManager;
        },
        set_ComponentManager: function (value){
            this._ComponentManager = value;
        },
        GetCurrentUrl: function (){
            return this.currentUrl.GetCurrentUrl();
        },
        ResolveUrl: function (path){
            return this.urlProvider.ResolveUrl(path);
        },
        Provider: function (providerType){
            return this.parameterFactory.Provider(providerType);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.ICurrentUrlProvider", "Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Providers.IParameterProviderFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$CompositeRequestContext);
var Neptuo$TemplateEngine$Templates$Controls$ContentControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ContentControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IContentControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Content = null;
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.ctor.call(this, componentManager);
        },
        Content$$: "System.Collections.Generic.ICollection`1[[System.Object]]",
        get_Content: function (){
            return this._Content;
        },
        set_Content: function (value){
            this._Content = value;
        },
        OnInit: function (){
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.commonPrototype.OnInit.call(this);
            if (this.get_Content() != null){
                var $it1 = this.get_Content().GetEnumerator();
                while ($it1.MoveNext()){
                    var item = $it1.get_Current();
                    this.get_ComponentManager().Init(item);
                }
            }
        },
        Render: function (writer){
            this.RenderBody(writer);
        },
        RenderBody: function (writer){
            if (this.get_Content() != null){
                var $it2 = this.get_Content().GetEnumerator();
                while ($it2.MoveNext()){
                    var item = $it2.get_Current();
                    this.get_ComponentManager().Render(item, writer);
                }
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ContentControlBase);
var Neptuo$TemplateEngine$Templates$Controls$ControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ControlBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this.defaultPropertyName = null;
            this._ComponentManager = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function (){
            return this._ComponentManager;
        },
        set_ComponentManager: function (value){
            this._ComponentManager = value;
        },
        DefaultPropertyName$$: "System.String",
        get_DefaultPropertyName: function (){
            if (this.defaultPropertyName == null){
                var attr = Neptuo.Reflection.ReflectionHelper.GetAttribute$1(System.ComponentModel.DefaultPropertyAttribute.ctor, this.GetType());
                if (attr != null)
                    this.defaultPropertyName = attr.get_Name();
            }
            return this.defaultPropertyName;
        },
        set_DefaultPropertyName: function (value){
            this.defaultPropertyName = value;
        },
        OnInit: function (){
        },
        Render: function (writer){
        },
        InitComponent: function (component){
            this.get_ComponentManager().Init(component);
        },
        RenderComponent: function (component, writer){
            this.get_ComponentManager().Render(component, writer);
        },
        InitComponents$1: function (T, compoments){
            if (compoments != null){
                var $it3 = compoments.GetEnumerator();
                while ($it3.MoveNext()){
                    var component = $it3.get_Current();
                    this.InitComponent(component);
                }
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ControlBase);
var Neptuo$TemplateEngine$Templates$Controls$CssClassCollection = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.CssClassCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.HashSet$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (className){
            this.storage.Add(className);
        },
        ContainsKey: function (className){
            return this.storage.Contains(className);
        },
        GetEnumerator: function (){
            return this.storage.GetEnumerator();
        },
        ToString: function (){
            var values = this.storage;
            return System.String.Join$$String$$IEnumerable$1$String(" ", values);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$CssClassCollection);
var Neptuo$TemplateEngine$Templates$Controls$DesignData$HintAttribute = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (text){
            this._Text = null;
            System.Attribute.ctor.call(this);
            this.set_Text(text);
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$DesignData$HintAttribute);
var Neptuo$TemplateEngine$Templates$Controls$DesignData$SupportUiEventAttribute = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.DesignData.SupportUiEventAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (eventName, handler){
            this._Event = null;
            this._Handler = null;
            System.Attribute.ctor.call(this);
            this.set_Event(eventName);
            this.set_Handler(handler);
        },
        Event$$: "System.String",
        get_Event: function (){
            return this._Event;
        },
        set_Event: function (value){
            this._Event = value;
        },
        Handler$$: "System.Type",
        get_Handler: function (){
            return this._Handler;
        },
        set_Handler: function (value){
            this._Handler = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$DesignData$SupportUiEventAttribute);
var Neptuo$TemplateEngine$Templates$Controls$DoctypeControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.DoctypeControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Type = Neptuo.TemplateEngine.Templates.Controls.DoctypeType.Html5;
            System.Object.ctor.call(this);
        },
        Type$$: "Neptuo.TemplateEngine.Templates.Controls.DoctypeType",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        OnInit: function (){
        },
        Render: function (writer){
            switch (this.get_Type()){
                case Neptuo.TemplateEngine.Templates.Controls.DoctypeType.Xhtml:
                    writer.Content$$String("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
                    break;
                case Neptuo.TemplateEngine.Templates.Controls.DoctypeType.Html5:
                default:
                    writer.Content$$String("<!DOCTYPE html>");
                    break;
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$DoctypeControl);
var Neptuo$TemplateEngine$Templates$Controls$DoctypeType = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.DoctypeType",
    staticDefinition: {
        Html5: 0,
        Xhtml: 1
    },
    Kind: "Enum",
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$DoctypeType);
var Neptuo$TemplateEngine$Templates$Controls$FormItemControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.FormItemControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._LabelText = null;
            this._HelpText = null;
            Neptuo.TemplateEngine.Templates.Controls.ContentControlBase.ctor.call(this, componentManager);
        },
        LabelText$$: "System.String",
        get_LabelText: function (){
            return this._LabelText;
        },
        set_LabelText: function (value){
            this._LabelText = value;
        },
        HelpText$$: "System.String",
        get_HelpText: function (){
            return this._HelpText;
        },
        set_HelpText: function (value){
            this._HelpText = value;
        },
        Render: function (writer){
            writer.Tag("div").Attribute("class", "form-group");
            if (!System.String.IsNullOrEmpty(this.get_LabelText())){
                writer.Tag("label").Attribute("for", this.GetForAttribute()).Content$$String(this.get_LabelText()).CloseFullTag();
            }
            this.RenderBody(writer);
            if (!System.String.IsNullOrEmpty(this.get_HelpText())){
                writer.Tag("p").Attribute("class", "help-block").Content$$String(this.get_HelpText()).CloseFullTag();
            }
            writer.CloseFullTag();
        },
        GetForAttribute: function (){
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Object.ctor, this.get_Content())){
                var $it4 = this.get_Content().GetEnumerator();
                while ($it4.MoveNext()){
                    var control = $it4.get_Current();
                    var htmlControl = As(control, Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.ctor);
                    if (htmlControl != null){
                        if (!System.String.IsNullOrEmpty(htmlControl.get_ID()))
                            return htmlControl.get_ID();
                        var id = System.Guid.NewGuid().ToString();
                        htmlControl.set_ID(id);
                        return id;
                    }
                }
            }
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$FormItemControl);
var Neptuo$TemplateEngine$Templates$Controls$ButtonControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ButtonControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Name = null;
            this._Text = null;
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "button", false);
            this.get_Attributes().set_Item$$TKey("class", "btn");
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        OnInit: function (){
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.commonPrototype.OnInit.call(this);
            if (!System.String.IsNullOrEmpty(this.get_Name()))
                this.get_Attributes().set_Item$$TKey("name", this.get_Name());
            if (this.get_Content() == null){
                this.set_Content(new System.Collections.Generic.List$1.ctor(System.Object.ctor));
                this.get_Content().Add(this.get_Text());
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ButtonControl);
var Neptuo$TemplateEngine$Templates$Controls$CheckBoxControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.CheckBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._LabelText = null;
            this._IsChecked = false;
            Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase.ctor.call(this, componentManager);
            this.set_Type("checkbox");
        },
        LabelText$$: "System.String",
        get_LabelText: function (){
            return this._LabelText;
        },
        set_LabelText: function (value){
            this._LabelText = value;
        },
        IsChecked$$: "System.Boolean",
        get_IsChecked: function (){
            return this._IsChecked;
        },
        set_IsChecked: function (value){
            this._IsChecked = value;
        },
        Render: function (writer){
            if (this.get_IsChecked())
                this.get_Attributes().set_Item$$TKey("checked", "checked");
            writer.Tag("label").Attribute("class", "checkbox");
            Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase.commonPrototype.Render.call(this, writer);
            writer.Content$$String(this.get_LabelText()).CloseFullTag();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$CheckBoxControl);
var Neptuo$TemplateEngine$Templates$Controls$FormControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.FormControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.IFormControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Name = null;
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.ctor.call(this, componentManager, "input", true);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        OnInit: function (){
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.commonPrototype.OnInit.call(this);
            if (this.get_ID() == null)
                this.set_ID(this.get_Name());
        },
        Render: function (writer){
            this.get_Attributes().set_Item$$TKey("name", this.get_Name());
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$FormControlBase);
var Neptuo$TemplateEngine$Templates$Controls$FormInputControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.FormControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Type = null;
            Neptuo.TemplateEngine.Templates.Controls.FormControlBase.ctor.call(this, componentManager);
        },
        Type$$: "System.String",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        Render: function (writer){
            this.get_Attributes().set_Item$$TKey("type", this.get_Type());
            Neptuo.TemplateEngine.Templates.Controls.FormControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$FormInputControlBase);
var Neptuo$TemplateEngine$Templates$Controls$HiddenBoxControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.HiddenBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITextControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Text = null;
            Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase.ctor.call(this, componentManager);
            this.set_Type("hidden");
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        Render: function (writer){
            this.get_Attributes().set_Item$$TKey("value", this.get_Text());
            Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$HiddenBoxControl);
var Neptuo$TemplateEngine$Templates$Controls$IFormControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.IFormControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$IFormControl);
var Neptuo$TemplateEngine$Templates$Controls$PasswordBoxControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.PasswordBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.TextBoxControl",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            Neptuo.TemplateEngine.Templates.Controls.TextBoxControl.ctor.call(this, componentManager);
            this.set_Type("password");
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$PasswordBoxControl);
var Neptuo$TemplateEngine$Templates$Controls$TextBoxControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.TextBoxControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITextControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Text = null;
            this._IsAutoFocus = false;
            Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase.ctor.call(this, componentManager);
            this.set_Type("text");
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        IsAutoFocus$$: "System.Boolean",
        get_IsAutoFocus: function (){
            return this._IsAutoFocus;
        },
        set_IsAutoFocus: function (value){
            this._IsAutoFocus = value;
        },
        Render: function (writer){
            this.get_Attributes().set_Item$$TKey("value", this.get_Text());
            if (this.get_IsAutoFocus())
                this.get_Attributes().set_Item$$TKey("autofocus", "autofocus");
            Neptuo.TemplateEngine.Templates.Controls.FormInputControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$TextBoxControl);
var Neptuo$TemplateEngine$Templates$Controls$GenericContentControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.GenericContentControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "div", false);
        },
        TagName$$: "System.String",
        get_TagName: function (){
            return Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.get_TagName.call(this);
        },
        set_TagName: function (value){
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.set_TagName.call(this, value);
        },
        Render: function (writer){
            if (!System.String.IsNullOrEmpty(this.get_TagName()))
                Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.Render.call(this, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$GenericContentControl);
var Neptuo$TemplateEngine$Templates$Controls$HtmlContentControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IContentControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager, tagName, isSelfClosing){
            this._Content = null;
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.ctor.call(this, componentManager, tagName, isSelfClosing);
        },
        IsSelfClosing$$: "System.Boolean",
        get_IsSelfClosing: function (){
            if (this.get_Content() != null && this.get_Content().get_Count() != 0)
                return false;
            return Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.get_IsSelfClosing.call(this);
        },
        Content$$: "System.Collections.Generic.ICollection`1[[System.Object]]",
        get_Content: function (){
            return this._Content;
        },
        set_Content: function (value){
            this._Content = value;
        },
        OnInit: function (){
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.commonPrototype.OnInit.call(this);
            if (this.get_Content() != null){
                var $it5 = this.get_Content().GetEnumerator();
                while ($it5.MoveNext()){
                    var item = $it5.get_Current();
                    this.get_ComponentManager().Init(item);
                }
            }
        },
        RenderBody: function (writer){
            if (this.get_Content() != null){
                var $it6 = this.get_Content().GetEnumerator();
                while ($it6.MoveNext()){
                    var item = $it6.get_Current();
                    this.get_ComponentManager().Render(item, writer);
                }
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "System.String", "System.Boolean"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$HtmlContentControlBase);
var Neptuo$TemplateEngine$Templates$Controls$HtmlControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.IAttributeCollection", "Neptuo.TemplateEngine.Templates.Controls.IHtmlAttributeCollection"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager, tagName, isSelfClosing){
            this._ID = null;
            this._CssStyle = null;
            this._CssClass = null;
            this._Attributes = null;
            this._TagName = null;
            this._IsSelfClosing = false;
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.ctor.call(this, componentManager);
            this.set_TagName(tagName);
            this.set_IsSelfClosing(isSelfClosing);
            this.set_Attributes(new Neptuo.Templates.HtmlAttributeCollection.ctor());
        },
        ID$$: "System.String",
        get_ID: function (){
            return this._ID;
        },
        set_ID: function (value){
            this._ID = value;
        },
        CssStyle$$: "System.String",
        get_CssStyle: function (){
            return this._CssStyle;
        },
        set_CssStyle: function (value){
            this._CssStyle = value;
        },
        CssClass$$: "Neptuo.TemplateEngine.Templates.Controls.CssClassCollection",
        get_CssClass: function (){
            return this._CssClass;
        },
        set_CssClass: function (value){
            this._CssClass = value;
        },
        Attributes$$: "Neptuo.Templates.HtmlAttributeCollection",
        get_Attributes: function (){
            return this._Attributes;
        },
        set_Attributes: function (value){
            this._Attributes = value;
        },
        TagName$$: "System.String",
        get_TagName: function (){
            return this._TagName;
        },
        set_TagName: function (value){
            this._TagName = value;
        },
        IsSelfClosing$$: "System.Boolean",
        get_IsSelfClosing: function (){
            return this._IsSelfClosing;
        },
        set_IsSelfClosing: function (value){
            this._IsSelfClosing = value;
        },
        Render: function (writer){
            if (!System.String.IsNullOrEmpty(this.get_TagName())){
                writer.Tag(this.get_TagName());
                this.RenderAttributes(writer);
                if (this.get_IsSelfClosing()){
                    writer.CloseTag();
                }
                else {
                    this.RenderBody(writer);
                    writer.CloseFullTag();
                }
            }
            else {
                this.RenderBody(writer);
            }
        },
        RenderBody: function (writer){
        },
        RenderAttributes: function (writer){
            if (!System.String.IsNullOrEmpty(this.get_ID()))
                this.get_Attributes().set_Item$$TKey("id", this.get_ID());
            if (this.get_CssClass() != null){
                if (!this.get_Attributes().ContainsKey("class"))
                    this.get_Attributes().set_Item$$TKey("class", System.String.Join$$String$$IEnumerable$1$String(" ", this.get_CssClass()));
                else
                    this.get_Attributes().set_Item$$TKey("class", System.String.Format$$String$$Object$$Object("{0} {1}", this.get_Attributes().get_Item$$TKey("class"), System.String.Join$$String$$IEnumerable$1$String(" ", this.get_CssClass())));
            }
            var $it7 = this.get_Attributes().GetEnumerator();
            while ($it7.MoveNext()){
                var attribute = $it7.get_Current();
                writer.Attribute(attribute.get_Key(), attribute.get_Value());
            }
        },
        SetAttribute: function (name, value){
            this.get_Attributes().set_Item$$TKey(name, value);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "System.String", "System.Boolean"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$HtmlControlBase);
var Neptuo$TemplateEngine$Templates$Controls$IHtmlAttributeCollection = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.IHtmlAttributeCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$IHtmlAttributeCollection);
var Neptuo$TemplateEngine$Templates$Controls$ITextControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ITextControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ITextControl);
var Neptuo$TemplateEngine$Templates$Controls$IValueControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.IValueControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$IValueControl);
var Neptuo$TemplateEngine$Templates$Controls$LinkControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.LinkControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    customAttributes: [{
        targetType: "property",
        targetMemberName: "Text",
        typeName: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
        ctorName: "ctor",
        positionalArguments: ["Replace for Content property for setting via attribute."]
    }, {
        targetType: "property",
        targetMemberName: "CopyParameters",
        typeName: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
        ctorName: "ctor",
        positionalArguments: ["Can contain \'All\', \'Query\', \'Form\' or comma separated list of parameter names."]
    }, {
        targetType: "property",
        targetMemberName: "AllowActive",
        typeName: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
        ctorName: "ctor",
        positionalArguments: ["Setting to false, disable adding \'active\' css class when matching url with current."]
    }
    ],
    Kind: "Class",
    definition: {
        ctor: function (componentManager, urlProvider, currentUrl, parameterFactory){
            this.urlProvider = null;
            this.currentUrl = null;
            this.parameterFactory = null;
            this._Href = null;
            this._Text = null;
            this._CopyParameters = null;
            this._Parameters = null;
            this._AllowActive = false;
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "a", false);
            this.urlProvider = urlProvider;
            this.currentUrl = currentUrl;
            this.parameterFactory = parameterFactory;
        },
        Href$$: "System.String",
        get_Href: function (){
            return this._Href;
        },
        set_Href: function (value){
            this._Href = value;
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        CopyParameters$$: "System.String",
        get_CopyParameters: function (){
            return this._CopyParameters;
        },
        set_CopyParameters: function (value){
            this._CopyParameters = value;
        },
        Parameters$$: "System.Collections.Generic.ICollection`1[[Neptuo.TemplateEngine.Templates.Controls.ParameterControl]]",
        get_Parameters: function (){
            return this._Parameters;
        },
        set_Parameters: function (value){
            this._Parameters = value;
        },
        AllowActive$$: "System.Boolean",
        get_AllowActive: function (){
            return this._AllowActive;
        },
        set_AllowActive: function (value){
            this._AllowActive = value;
        },
        OnInit: function (){
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.commonPrototype.OnInit.call(this);
            if (this.get_Href() == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("Href"), new Error());
            if (this.get_AllowActive() && this.currentUrl.GetCurrentUrl().EndsWith$$String(this.get_Href()))
                this.get_Attributes().set_Item$$TKey("class", "active");
            if (!System.String.IsNullOrEmpty(this.get_Text()))
                this.set_Content((function (){
                    var $v1 = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
                    $v1.Add(this.get_Text());
                    return $v1;
                }).call(this));
            this.InitComponents$1(Neptuo.TemplateEngine.Templates.Controls.ParameterControl.ctor, this.get_Parameters());
        },
        RenderAttributes: function (writer){
            var parameters = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
            if (!System.String.IsNullOrEmpty(this.get_CopyParameters())){
                var copy = this.get_CopyParameters().ToLowerInvariant();
                if (copy == "all")
                    this.CopyParameterCollection(parameters, Neptuo.TemplateEngine.Providers.ParameterProviderExtensions.GetAllParameters(this.parameterFactory.Provider(0)));
                else if (copy == "query")
                    this.CopyParameterCollection(parameters, Neptuo.TemplateEngine.Providers.ParameterProviderExtensions.GetAllParameters(this.parameterFactory.Provider(1)));
                else if (copy == "form")
                    this.CopyParameterCollection(parameters, Neptuo.TemplateEngine.Providers.ParameterProviderExtensions.GetAllParameters(this.parameterFactory.Provider(2)));
                else
                    this.CopySelectedParameters(parameters, this.get_CopyParameters().Split$$Char$Array$$StringSplitOptions([","], 1));
            }
            var queryBuilder = new System.Text.StringBuilder.ctor();
            if (this.get_Parameters() != null){
                var $it8 = this.get_Parameters().GetEnumerator();
                while ($it8.MoveNext()){
                    var parameter = $it8.get_Current();
                    parameters.set_Item$$TKey(parameter.get_Name(), parameter.get_Value());
                }
            }
            var $it9 = parameters.GetEnumerator();
            while ($it9.MoveNext()){
                var parameter = $it9.get_Current();
                this.AppendQuery(queryBuilder, parameter.get_Key(), parameter.get_Value());
            }
            this.get_Attributes().set_Item$$TKey("href", System.String.Format$$String$$Object$$Object("{0}{1}", this.urlProvider.ResolveUrl(this.get_Href()), queryBuilder.ToString()));
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.RenderAttributes.call(this, writer);
        },
        AppendQuery: function (builder, key, value){
            builder.AppendFormat$$String$$Object$$Object$$Object("{2}{0}={1}", key, value, builder.get_Length() == 0 ? "?" : "&");
        },
        CopyParameterCollection: function (parameters, collections){
            var $it10 = collections.GetEnumerator();
            while ($it10.MoveNext()){
                var collection = $it10.get_Current();
                var $it11 = collection.get_Keys().GetEnumerator();
                while ($it11.MoveNext()){
                    var parameter = $it11.get_Current();
                    parameters.set_Item$$TKey(parameter, collection.get_Item$$TKey(parameter));
                }
            }
        },
        CopySelectedParameters: function (parameters, selectedParameters){
            var currentNames = new System.Collections.Generic.HashSet$1.ctor$$IEnumerable$1(System.String.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.String.ctor, System.String.ctor, this.parameterFactory.Provider(0).get_Keys(), $CreateAnonymousDelegate(this, function (p){
                return p.ToLowerInvariant();
            })));
            var value;
            var $it12 = selectedParameters.GetEnumerator();
            while ($it12.MoveNext()){
                var paramName = $it12.get_Current();
                if (currentNames.Contains(paramName.ToLowerInvariant()) && (function (){
                    var $1 = {
                        Value: value
                    };
                    var $res = this.parameterFactory.Provider(0).TryGet(paramName, $1);
                    value = $1.Value;
                    return $res;
                }).call(this))
                    parameters.set_Item$$TKey(paramName, value);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Templates.ICurrentUrlProvider", "Neptuo.TemplateEngine.Providers.IParameterProviderFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$LinkControl);
var Neptuo$TemplateEngine$Templates$Controls$LiteralControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.LiteralControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITextControl"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Text = null;
            this._FormatString = null;
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.ctor.call(this, componentManager);
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        FormatString$$: "System.String",
        get_FormatString: function (){
            return this._FormatString;
        },
        set_FormatString: function (value){
            this._FormatString = value;
        },
        Render: function (writer){
            if (!System.String.IsNullOrEmpty(this.get_FormatString()))
                writer.Content$$String(System.String.Format$$String$$Object(this.get_FormatString(), this.get_Text()));
            else
                writer.Content$$String(this.get_Text());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$LiteralControl);
var Neptuo$TemplateEngine$Templates$Controls$MessagePanelControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.MessagePanelControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, messageStorage){
            this._MessageStorage = null;
            this._Group = null;
            this._Key = null;
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.ctor.call(this, componentManager, "ul", false);
            this.set_MessageStorage(messageStorage);
        },
        MessageStorage$$: "Neptuo.TemplateEngine.Providers.MessageStorage",
        get_MessageStorage: function (){
            return this._MessageStorage;
        },
        set_MessageStorage: function (value){
            this._MessageStorage = value;
        },
        Group$$: "System.String",
        get_Group: function (){
            return this._Group;
        },
        set_Group: function (value){
            this._Group = value;
        },
        Key$$: "System.String",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        },
        Render: function (writer){
            var messages = System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(Neptuo.TemplateEngine.Providers.Message.ctor, this.get_MessageStorage().GetList(this.get_Group()), $CreateAnonymousDelegate(this, function (m){
                return this.get_Key() == null || m.get_Key() == this.get_Key();
            }));
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(Neptuo.TemplateEngine.Providers.Message.ctor, messages)){
                writer.Tag(this.get_TagName()).Attribute("class", "message-list");
                this.RenderAttributes(writer);
                var $it13 = messages.GetEnumerator();
                while ($it13.MoveNext()){
                    var message = $it13.get_Current();
                    var cssClass = null;
                    switch (message.get_Type()){
                        case 0:
                            cssClass = "message-error";
                            break;
                        case 1:
                            cssClass = "message-info";
                            break;
                        case 2:
                            cssClass = "message-warn";
                            break;
                    }
                    writer.Tag("li").Attribute("class", cssClass).Content$$String(message.get_Text()).CloseFullTag();
                }
                writer.CloseFullTag();
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Providers.MessageStorage"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$MessagePanelControl);
var Neptuo$TemplateEngine$Templates$Controls$NavigationControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.NavigationControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, navigator, navigations, globalNavigations){
            this._Navigations = null;
            this._GlobalNavigations = null;
            this._Navigator = null;
            this._Items = null;
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.ctor.call(this, componentManager);
            this.set_Navigator(navigator);
            this.set_Navigations(navigations);
            this.set_GlobalNavigations(globalNavigations);
        },
        Navigations$$: "Neptuo.TemplateEngine.Providers.NavigationCollection",
        get_Navigations: function (){
            return this._Navigations;
        },
        set_Navigations: function (value){
            this._Navigations = value;
        },
        GlobalNavigations$$: "Neptuo.TemplateEngine.Providers.GlobalNavigationCollection",
        get_GlobalNavigations: function (){
            return this._GlobalNavigations;
        },
        set_GlobalNavigations: function (value){
            this._GlobalNavigations = value;
        },
        Navigator$$: "Neptuo.TemplateEngine.Navigation.INavigator",
        get_Navigator: function (){
            return this._Navigator;
        },
        set_Navigator: function (value){
            this._Navigator = value;
        },
        Items$$: "System.Collections.Generic.ICollection`1[[Neptuo.TemplateEngine.Templates.Controls.NavigationItem]]",
        get_Items: function (){
            return this._Items;
        },
        set_Items: function (value){
            this._Items = value;
        },
        OnInit: function (){
            this.InitComponents$1(Neptuo.TemplateEngine.Templates.Controls.NavigationItem.ctor, this.get_Items());
            var $it14 = this.get_Navigations().GetEnumerator();
            while ($it14.MoveNext()){
                var name = $it14.get_Current();
                if (this.get_Items() != null){
                    var $it15 = this.get_Items().GetEnumerator();
                    while ($it15.MoveNext()){
                        var item = $it15.get_Current();
                        if (item.get_Name() == name){
                            this.get_Navigator().Open(item.get_To());
                            return;
                        }
                    }
                }
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Navigation.INavigator", "Neptuo.TemplateEngine.Providers.NavigationCollection", "Neptuo.TemplateEngine.Providers.GlobalNavigationCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$NavigationControl);
var Neptuo$TemplateEngine$Templates$Controls$NavigationItem = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.NavigationItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    customAttributes: [{
        targetType: "property",
        targetMemberName: "Name",
        typeName: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
        ctorName: "ctor",
        positionalArguments: ["Navigation result name"]
    }, {
        targetType: "property",
        targetMemberName: "To",
        typeName: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
        ctorName: "ctor",
        positionalArguments: ["Form uri to navigate to."]
    }
    ],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Name = null;
            this._To = null;
            System.Object.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        To$$: "Neptuo.TemplateEngine.Navigation.FormUri",
        get_To: function (){
            return this._To;
        },
        set_To: function (value){
            this._To = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$NavigationItem);
var Neptuo$TemplateEngine$Templates$Controls$OptionControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.OptionControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    customAttributes: [{
        targetType: "property",
        targetMemberName: "Text",
        typeName: "Neptuo.TemplateEngine.Templates.Controls.DesignData.HintAttribute",
        ctorName: "ctor",
        positionalArguments: ["Replace for Content property for setting via attribute."]
    }
    ],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._IsSelected = false;
            this._Value = null;
            this._Text = null;
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.ctor.call(this, componentManager, "option", false);
        },
        IsSelected$$: "System.Boolean",
        get_IsSelected: function (){
            return this._IsSelected;
        },
        set_IsSelected: function (value){
            this._IsSelected = value;
        },
        Value$$: "System.Object",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        OnInit: function (){
            if (!System.String.IsNullOrEmpty(this.get_Text()))
                this.set_Content((function (){
                    var $v2 = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
                    $v2.Add(this.get_Text());
                    return $v2;
                }).call(this));
            Neptuo.TemplateEngine.Templates.Controls.HtmlContentControlBase.commonPrototype.OnInit.call(this);
        },
        RenderAttributes: function (writer){
            if (this.get_Value() != null){
                if (this.get_IsSelected())
                    this.get_Attributes().set_Item$$TKey("selected", "selected");
                this.get_Attributes().set_Item$$TKey("value", ("" + this.get_Value()));
            }
            Neptuo.TemplateEngine.Templates.Controls.HtmlControlBase.commonPrototype.RenderAttributes.call(this, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$OptionControl);
var Neptuo$TemplateEngine$Templates$Controls$ParameterControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ParameterControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl", "Neptuo.TemplateEngine.Templates.Controls.IValueControl"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Name = null;
            this._Value = null;
            System.Object.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Value$$: "System.Object",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        },
        OnInit: function (){
        },
        Render: function (writer){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ParameterControl);
var Neptuo$TemplateEngine$Templates$Controls$PresentationControlBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.PresentationControlBase",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, configuration){
            this._DataContext = null;
            this._ModelGetter = null;
            Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor.call(this, componentManager, configuration.get_TemplateStorage());
            this.set_DataContext(configuration.get_DataContext());
        },
        DataContext$$: "Neptuo.TemplateEngine.Templates.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        },
        ModelGetter$$: "Neptuo.PresentationModels.IModelValueGetter",
        get_ModelGetter: function (){
            return this._ModelGetter;
        },
        set_ModelGetter: function (value){
            this._ModelGetter = value;
        },
        OnInit: function (){
            this.InitComponent(this.get_Template());
            this.set_TemplateContent(this.get_Template().CreateInstance());
            this.set_ModelGetter(this.CreateModel());
            this.get_DataContext().Push(this.get_ModelGetter(), null);
            Neptuo.TemplateEngine.Templates.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop(null);
        },
        Render: function (writer){
            this.get_DataContext().Push(this.get_ModelGetter(), null);
            Neptuo.TemplateEngine.Templates.Controls.TemplateControl.commonPrototype.Render.call(this, writer);
            this.get_DataContext().Pop(null);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.PresentationConfiguration"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$PresentationControlBase);
var Neptuo$TemplateEngine$Templates$Controls$PresentationListControlBase$1 = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.PresentationListControlBase$1",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (T, componentManager, configuration){
            this.T = T;
            this.configuration = null;
            this._ItemTemplate = null;
            this._DataContext = null;
            Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor.call(this, componentManager, configuration.get_TemplateStorage());
            this.configuration = configuration;
            this.set_DataContext(configuration.get_DataContext());
        },
        ItemTemplate$$: "Neptuo.TemplateEngine.Templates.Controls.ITemplate",
        get_ItemTemplate: function (){
            return this._ItemTemplate;
        },
        set_ItemTemplate: function (value){
            this._ItemTemplate = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Templates.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        },
        OnInit: function (){
            this.InitComponent(this.get_ItemTemplate());
            var itemTemplates = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var models = this.LoadData();
            var $it16 = models.GetEnumerator();
            while ($it16.MoveNext()){
                var model = $it16.get_Current();
                var provider = this.configuration.get_ValueProviderFactory().Create(model);
                this.get_DataContext().Push(provider, null);
                var control = new Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor(this.get_ComponentManager(), this.configuration.get_TemplateStorage());
                control.set_Template(this.get_ItemTemplate());
                this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor, control, null);
                this.InitComponent(control);
                itemTemplates.Add(control);
                this.get_DataContext().Pop(null);
            }
            var templateContent = (function (){
                var $v3 = new Neptuo.TemplateEngine.Templates.Controls.TemplateContentControl.ctor(this.get_ComponentManager());
                $v3.set_Name("Content");
                $v3.set_Content(itemTemplates);
                return $v3;
            }).call(this);
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Templates.Controls.TemplateContentControl.ctor, templateContent, null);
            this.InitComponent(templateContent);
            this.get_Content().Add(templateContent);
            Neptuo.TemplateEngine.Templates.Controls.TemplateControl.commonPrototype.OnInit.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.PresentationConfiguration"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$PresentationListControlBase$1);
var Neptuo$TemplateEngine$Templates$Controls$ContentTemplate = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ContentTemplate",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITemplate"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._ComponentManager = null;
            this._BindMethod = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function (){
            return this._ComponentManager;
        },
        set_ComponentManager: function (value){
            this._ComponentManager = value;
        },
        BindMethod$$: "System.Action`1[[Neptuo.TemplateEngine.Templates.Controls.ContentTemplateContent]]",
        get_BindMethod: function (){
            return this._BindMethod;
        },
        set_BindMethod: function (value){
            this._BindMethod = value;
        },
        CreateInstance: function (){
            var templateContent = new Neptuo.TemplateEngine.Templates.Controls.ContentTemplateContent.ctor(this.get_ComponentManager());
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Templates.Controls.ContentTemplateContent.ctor, templateContent, this.get_BindMethod());
            return templateContent;
        },
        Dispose: function (){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ContentTemplate);
var Neptuo$TemplateEngine$Templates$Controls$ContentTemplateContent = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ContentTemplateContent",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITemplateContent"],
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._ComponentManager = null;
            this._Content = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function (){
            return this._ComponentManager;
        },
        set_ComponentManager: function (value){
            this._ComponentManager = value;
        },
        Content$$: "System.Collections.Generic.ICollection`1[[System.Object]]",
        get_Content: function (){
            return this._Content;
        },
        set_Content: function (value){
            this._Content = value;
        },
        OnInit: function (){
            if (this.get_Content() != null){
                var $it17 = this.get_Content().GetEnumerator();
                while ($it17.MoveNext()){
                    var item = $it17.get_Current();
                    this.get_ComponentManager().Init(item);
                }
            }
        },
        Render: function (writer){
            if (this.get_Content() != null){
                var $it18 = this.get_Content().GetEnumerator();
                while ($it18.MoveNext()){
                    var item = $it18.get_Current();
                    this.get_ComponentManager().Render(item, writer);
                }
            }
        },
        Dispose: function (){
            if (this.get_Content() != null){
                var $it19 = this.get_Content().GetEnumerator();
                while ($it19.MoveNext()){
                    var item = $it19.get_Current();
                    this.get_ComponentManager().Dispose(item);
                }
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ContentTemplateContent);
var Neptuo$TemplateEngine$Templates$Controls$DefaultTemplateAttribute = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.DefaultTemplateAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (path){
            this._Path = null;
            System.Attribute.ctor.call(this);
            this.set_Path(path);
        },
        Path$$: "System.String",
        get_Path: function (){
            return this._Path;
        },
        set_Path: function (value){
            this._Path = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$DefaultTemplateAttribute);
var Neptuo$TemplateEngine$Templates$Controls$FileTemplate = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.FileTemplate",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ViewTemplateBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider, componentManager, viewActivator){
            this._ViewActivator = null;
            this._Path = null;
            Neptuo.TemplateEngine.Templates.Controls.ViewTemplateBase.ctor.call(this, dependencyProvider, componentManager);
            this.set_ViewActivator(viewActivator);
        },
        ViewActivator$$: "Neptuo.TemplateEngine.Templates.IViewActivator",
        get_ViewActivator: function (){
            return this._ViewActivator;
        },
        set_ViewActivator: function (value){
            this._ViewActivator = value;
        },
        Path$$: "System.String",
        get_Path: function (){
            return this._Path;
        },
        set_Path: function (value){
            this._Path = value;
        },
        CreateView: function (){
            return this.get_ViewActivator().CreateView(this.get_Path());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider", "Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.IViewActivator"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$FileTemplate);
var Neptuo$TemplateEngine$Templates$Controls$ITemplate = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ITemplate",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["System.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ITemplate);
var Neptuo$TemplateEngine$Templates$Controls$ITemplateContent = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ITemplateContent",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl", "System.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ITemplateContent);
var Neptuo$TemplateEngine$Templates$Controls$TemplateContentControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.TemplateContentControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ContentControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager){
            this._Name = null;
            Neptuo.TemplateEngine.Templates.Controls.ContentControlBase.ctor.call(this, componentManager);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$TemplateContentControl);
var Neptuo$TemplateEngine$Templates$Controls$TemplateControl = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.TemplateControl",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, contents){
            this._Content = null;
            this._Template = null;
            this._TemplateContent = null;
            this._TemplateStorageStack = null;
            this._TemplateStorage = null;
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.ctor.call(this, componentManager);
            this.set_TemplateStorageStack(contents);
            this.set_TemplateStorage(contents.CreateStorage());
        },
        Content$$: "System.Collections.Generic.ICollection`1[[Neptuo.TemplateEngine.Templates.Controls.TemplateContentControl]]",
        get_Content: function (){
            return this._Content;
        },
        set_Content: function (value){
            this._Content = value;
        },
        Template$$: "Neptuo.TemplateEngine.Templates.Controls.ITemplate",
        get_Template: function (){
            return this._Template;
        },
        set_Template: function (value){
            this._Template = value;
        },
        TemplateContent$$: "Neptuo.TemplateEngine.Templates.Controls.ITemplateContent",
        get_TemplateContent: function (){
            return this._TemplateContent;
        },
        set_TemplateContent: function (value){
            this._TemplateContent = value;
        },
        TemplateStorageStack$$: "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack",
        get_TemplateStorageStack: function (){
            return this._TemplateStorageStack;
        },
        set_TemplateStorageStack: function (value){
            this._TemplateStorageStack = value;
        },
        TemplateStorage$$: "Neptuo.TemplateEngine.Templates.TemplateContentStorage",
        get_TemplateStorage: function (){
            return this._TemplateStorage;
        },
        set_TemplateStorage: function (value){
            this._TemplateStorage = value;
        },
        OnInit: function (){
            this.InitComponents$1(Neptuo.TemplateEngine.Templates.Controls.TemplateContentControl.ctor, this.get_Content());
            if (this.get_Content() != null)
                this.get_TemplateStorage().AddRange(this.get_Content());
            this.get_TemplateStorageStack().Push(this.get_TemplateStorage());
            Neptuo.TemplateEngine.Templates.Controls.ControlBase.commonPrototype.OnInit.call(this);
            this.InitComponent(this.get_Template());
            this.set_TemplateContent(this.get_Template().CreateInstance());
            this.InitComponent(this.get_TemplateContent());
            this.get_TemplateStorageStack().Pop();
        },
        Render: function (writer){
            this.get_TemplateStorageStack().Push(this.get_TemplateStorage());
            this.RenderComponent(this.get_TemplateContent(), writer);
            this.get_TemplateStorageStack().Pop();
        },
        InitTemplate: function (template){
            var control = new Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor(this.get_ComponentManager(), this.get_TemplateStorageStack());
            control.set_Template(template);
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Templates.Controls.TemplateControl.ctor, control, null);
            this.InitComponent(control);
            return control;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$TemplateControl);
var Neptuo$TemplateEngine$Templates$Controls$TemplatePlaceholder = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.TemplatePlaceholder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (contents){
            this._Contents = null;
            this._Name = null;
            System.Object.ctor.call(this);
            this.set_Contents(contents);
        },
        Contents$$: "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack",
        get_Contents: function (){
            return this._Contents;
        },
        set_Contents: function (value){
            this._Contents = value;
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        OnInit: function (){
            if (this.get_Name() == null)
                this.set_Name(System.String.Empty);
        },
        Render: function (writer){
            var storage = this.get_Contents().Peek();
            if (storage.ContainsKey(this.get_Name()))
                storage.Get(this.get_Name()).Render(writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.TemplateContentStorageStack"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$TemplatePlaceholder);
var Neptuo$TemplateEngine$Templates$Controls$ViewTemplateBase = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ViewTemplateBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITemplate"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider, componentManager){
            this._DependencyProvider = null;
            this._ComponentManager = null;
            System.Object.ctor.call(this);
            this.set_DependencyProvider(dependencyProvider);
            this.set_ComponentManager(componentManager);
        },
        DependencyProvider$$: "Neptuo.IDependencyProvider",
        get_DependencyProvider: function (){
            return this._DependencyProvider;
        },
        set_DependencyProvider: function (value){
            this._DependencyProvider = value;
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function (){
            return this._ComponentManager;
        },
        set_ComponentManager: function (value){
            this._ComponentManager = value;
        },
        CreateInstance: function (){
            var view = this.CreateView();
            view.Setup(new Neptuo.Templates.BaseViewPage.ctor(this.get_ComponentManager()), this.get_ComponentManager(), this.get_DependencyProvider());
            view.CreateControls();
            var templateContent = new Neptuo.TemplateEngine.Templates.Controls.ViewTemplateContent.ctor(view);
            this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Templates.Controls.ViewTemplateContent.ctor, templateContent, null);
            return templateContent;
        },
        Dispose: function (){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider", "Neptuo.Templates.IComponentManager"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ViewTemplateBase);
var Neptuo$TemplateEngine$Templates$Controls$ViewTemplateContent = {
    fullname: "Neptuo.TemplateEngine.Templates.Controls.ViewTemplateContent",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.Controls.ITemplateContent"],
    Kind: "Class",
    definition: {
        ctor: function (view){
            this._View = null;
            System.Object.ctor.call(this);
            this.set_View(view);
        },
        View$$: "Neptuo.Templates.BaseGeneratedView",
        get_View: function (){
            return this._View;
        },
        set_View: function (value){
            this._View = value;
        },
        OnInit: function (){
            this.get_View().Init();
        },
        Render: function (writer){
            this.get_View().Render(writer);
        },
        Dispose: function (){
            this.get_View().Dispose();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.BaseGeneratedView"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Controls$ViewTemplateContent);
var Neptuo$TemplateEngine$Templates$DataContextStorage = {
    fullname: "Neptuo.TemplateEngine.Templates.DataContextStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.StackStorage$1.ctor);
            System.Object.ctor.call(this);
        },
        Push: function (value, name){
            if (name == null)
                name = System.String.Empty;
            var stack;
            if (!(function (){
                var $1 = {
                    Value: stack
                };
                var $res = this.storage.TryGetValue(name, $1);
                stack = $1.Value;
                return $res;
            }).call(this)){
                stack = new Neptuo.TemplateEngine.StackStorage$1.ctor(System.Object.ctor);
                this.storage.set_Item$$TKey(name, stack);
            }
            stack.Push(value);
        },
        Pop: function (name){
            if (name == null)
                name = System.String.Empty;
            var stack;
            if ((function (){
                var $1 = {
                    Value: stack
                };
                var $res = this.storage.TryGetValue(name, $1);
                stack = $1.Value;
                return $res;
            }).call(this))
                return stack.Pop();
            return null;
        },
        Peek: function (name){
            if (name == null)
                name = System.String.Empty;
            var stack;
            if ((function (){
                var $1 = {
                    Value: stack
                };
                var $res = this.storage.TryGetValue(name, $1);
                stack = $1.Value;
                return $res;
            }).call(this))
                return stack.Peek();
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$DataContextStorage);
var Neptuo$TemplateEngine$Templates$ExtendedHtmlTextWriter = {
    fullname: "Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter",
    baseTypeName: "Neptuo.Templates.HtmlTextWriter",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.IExtendedHtmlWriter"],
    Kind: "Class",
    definition: {
        ctor: function (writer){
            this._PendingAttributes = null;
            Neptuo.Templates.HtmlTextWriter.ctor.call(this, writer);
            this.set_PendingAttributes(new System.Collections.Generic.List$1.ctor(Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter.HtmlAttribute.ctor));
        },
        PendingAttributes$$: "System.Collections.Generic.List`1[[Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter+HtmlAttribute]]",
        get_PendingAttributes: function (){
            return this._PendingAttributes;
        },
        set_PendingAttributes: function (value){
            this._PendingAttributes = value;
        },
        AttributeOnNextTag: function (name, value){
            this.get_PendingAttributes().Add(new Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter.HtmlAttribute.ctor$$String$$String(name, value));
            return this;
        },
        Tag: function (name){
            Neptuo.Templates.HtmlTextWriter.commonPrototype.Tag.call(this, name);
            var $it20 = this.get_PendingAttributes().GetEnumerator();
            while ($it20.MoveNext()){
                var attribute = $it20.get_Current();
                this.Attribute(attribute.Name, attribute.Value);
            }
            this.get_PendingAttributes().Clear();
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.IO.TextWriter"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$ExtendedHtmlTextWriter);
var Neptuo$TemplateEngine$Templates$ExtendedHtmlTextWriter$HtmlAttribute = {
    fullname: "Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter.HtmlAttribute",
    baseTypeName: "System.ValueType",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Struct",
    definition: {
        ctor$$String$$String: function (name, value){
            this.Name = null;
            this.Value = null;
            System.ValueType.ctor.call(this);
            this.Name = name;
            this.Value = value;
        },
        ctor: function (){
            this.Name = null;
            this.Value = null;
            System.ValueType.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor$$String$$String",
        parameters: ["System.String", "System.String"]
    }, {
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$ExtendedHtmlTextWriter$HtmlAttribute);
var Neptuo$TemplateEngine$Templates$Extensions$BindingExtension = {
    fullname: "Neptuo.TemplateEngine.Templates.Extensions.BindingExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition: {
        ctor: function (dataContext, bindingManager, converterService){
            this._DataContext = null;
            this._ConverterService = null;
            this._BindingManager = null;
            this._Expression = null;
            this._ConverterKey = null;
            System.Object.ctor.call(this);
            this.set_DataContext(dataContext);
            this.set_BindingManager(bindingManager);
            this.set_ConverterService(converterService);
        },
        DataContext$$: "Neptuo.TemplateEngine.Templates.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        },
        ConverterService$$: "Neptuo.TemplateEngine.Templates.IValueConverterService",
        get_ConverterService: function (){
            return this._ConverterService;
        },
        set_ConverterService: function (value){
            this._ConverterService = value;
        },
        BindingManager$$: "Neptuo.TemplateEngine.Templates.IBindingManager",
        get_BindingManager: function (){
            return this._BindingManager;
        },
        set_BindingManager: function (value){
            this._BindingManager = value;
        },
        Expression$$: "System.String",
        get_Expression: function (){
            return this._Expression;
        },
        set_Expression: function (value){
            this._Expression = value;
        },
        ConverterKey$$: "System.String",
        get_ConverterKey: function (){
            return this._ConverterKey;
        },
        set_ConverterKey: function (value){
            this._ConverterKey = value;
        },
        ProvideValue: function (context){
            var data = this.GetData();
            if (!System.String.IsNullOrEmpty(this.get_ConverterKey()))
                data = this.get_ConverterService().GetConverter(this.get_ConverterKey()).ConvertTo(data);
            return data;
        },
        GetData: function (){
            var source = this.get_DataContext().Peek(null);
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.get_BindingManager().TryGetValue(this.get_Expression(), source, $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value;
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.DataContextStorage", "Neptuo.TemplateEngine.Templates.IBindingManager", "Neptuo.TemplateEngine.Templates.IValueConverterService"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Extensions$BindingExtension);
var Neptuo$TemplateEngine$Templates$Extensions$CurrentUrlExtension = {
    fullname: "Neptuo.TemplateEngine.Templates.Extensions.CurrentUrlExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition: {
        ctor: function (provider){
            this.provider = null;
            System.Object.ctor.call(this);
            this.provider = provider;
        },
        ProvideValue: function (context){
            return this.provider.GetCurrentUrl();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.ICurrentUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Extensions$CurrentUrlExtension);
var Neptuo$TemplateEngine$Templates$Extensions$RequestExtension = {
    fullname: "Neptuo.TemplateEngine.Templates.Extensions.RequestExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition: {
        ctor: function (parameterProvider){
            this.parameterProvider = null;
            this._Key = null;
            this._Default = null;
            System.Object.ctor.call(this);
            this.parameterProvider = parameterProvider;
        },
        Key$$: "System.String",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        },
        Default$$: "System.Object",
        get_Default: function (){
            return this._Default;
        },
        set_Default: function (value){
            this._Default = value;
        },
        ProvideValue: function (context){
            Neptuo.Guard.NotNullOrEmpty(this.get_Key(), "Key");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.parameterProvider.TryGet(this.get_Key(), $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value;
            return this.get_Default();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Providers.IParameterProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Extensions$RequestExtension);
var Neptuo$TemplateEngine$Templates$Extensions$SwitchExtension = {
    fullname: "Neptuo.TemplateEngine.Templates.Extensions.SwitchExtension",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Extensions.IValueExtension"],
    Kind: "Class",
    definition: {
        ctor: function (converterService){
            this._ConverterService = null;
            this._Expression = null;
            this._ConverterKey = null;
            this._TrueValue = null;
            this._FalseValue = null;
            System.Object.ctor.call(this);
            this.set_ConverterService(converterService);
        },
        ConverterService$$: "Neptuo.TemplateEngine.Templates.IValueConverterService",
        get_ConverterService: function (){
            return this._ConverterService;
        },
        set_ConverterService: function (value){
            this._ConverterService = value;
        },
        Expression$$: "System.Object",
        get_Expression: function (){
            return this._Expression;
        },
        set_Expression: function (value){
            this._Expression = value;
        },
        ConverterKey$$: "System.String",
        get_ConverterKey: function (){
            return this._ConverterKey;
        },
        set_ConverterKey: function (value){
            this._ConverterKey = value;
        },
        TrueValue$$: "System.Object",
        get_TrueValue: function (){
            return this._TrueValue;
        },
        set_TrueValue: function (value){
            this._TrueValue = value;
        },
        FalseValue$$: "System.Object",
        get_FalseValue: function (){
            return this._FalseValue;
        },
        set_FalseValue: function (value){
            this._FalseValue = value;
        },
        ProvideValue: function (context){
            if (!System.String.IsNullOrEmpty(this.get_ConverterKey()))
                this.set_Expression(this.get_ConverterService().GetConverter(this.get_ConverterKey()).ConvertTo(this.get_Expression()));
            if (Is(this.get_Expression(), System.Boolean.ctor)){
                if (Cast(this.get_Expression(), System.Boolean.ctor))
                    return this.get_TrueValue();
                return this.get_FalseValue();
            }
            return (this.get_TrueValue() != null ? this.get_TrueValue() : this.get_FalseValue());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.IValueConverterService"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Extensions$SwitchExtension);
var Neptuo$TemplateEngine$Templates$Extensions$TemplateBindingExtension = {
    fullname: "Neptuo.TemplateEngine.Templates.Extensions.TemplateBindingExtension",
    baseTypeName: "Neptuo.TemplateEngine.Templates.Extensions.BindingExtension",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (dataContext, bindingManager, converterService){
            Neptuo.TemplateEngine.Templates.Extensions.BindingExtension.ctor.call(this, dataContext, bindingManager, converterService);
        },
        GetData: function (){
            var source = this.get_DataContext().Peek("Template");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.get_BindingManager().TryGetValue(this.get_Expression(), source, $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value;
            var attributeSource = As(source, Neptuo.TemplateEngine.Templates.Controls.IHtmlAttributeCollection.ctor);
            if (attributeSource != null){
                var attributeValue;
                if ((function (){
                    var $1 = {
                        Value: attributeValue
                    };
                    var $res = attributeSource.get_Attributes().TryGetValue(this.get_Expression().ToLowerInvariant(), $1);
                    attributeValue = $1.Value;
                    return $res;
                }).call(this))
                    return attributeValue;
            }
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.DataContextStorage", "Neptuo.TemplateEngine.Templates.IBindingManager", "Neptuo.TemplateEngine.Templates.IValueConverterService"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Extensions$TemplateBindingExtension);
var Neptuo$TemplateEngine$Templates$IBindingManager = {
    fullname: "Neptuo.TemplateEngine.Templates.IBindingManager",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IBindingManager);
var Neptuo$TemplateEngine$Templates$ICurrentUrlProvider = {
    fullname: "Neptuo.TemplateEngine.Templates.ICurrentUrlProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$ICurrentUrlProvider);
var Neptuo$TemplateEngine$Templates$IExtendedHtmlWriter = {
    fullname: "Neptuo.TemplateEngine.Templates.IExtendedHtmlWriter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.IHtmlWriter"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IExtendedHtmlWriter);
var Neptuo$TemplateEngine$Templates$IPartialUpdateWriter = {
    fullname: "Neptuo.TemplateEngine.Templates.IPartialUpdateWriter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IPartialUpdateWriter);
var Neptuo$TemplateEngine$Templates$IRequestContext = {
    fullname: "Neptuo.TemplateEngine.Templates.IRequestContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.ICurrentUrlProvider", "Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Providers.IParameterProviderFactory"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IRequestContext);
var Neptuo$TemplateEngine$Templates$IValueConverter = {
    fullname: "Neptuo.TemplateEngine.Templates.IValueConverter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IValueConverter);
var Neptuo$TemplateEngine$Templates$IValueConverterService = {
    fullname: "Neptuo.TemplateEngine.Templates.IValueConverterService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IValueConverterService);
var Neptuo$TemplateEngine$Templates$IViewActivator = {
    fullname: "Neptuo.TemplateEngine.Templates.IViewActivator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Templates$IViewActivator);
var Neptuo$TemplateEngine$Web$LocalizationHelper = {
    fullname: "Neptuo.TemplateEngine.Web.LocalizationHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        Translate: function (text){
            return text;
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$LocalizationHelper);
var Neptuo$TemplateEngine$Templates$Observers$PartialObserver = {
    fullname: "Neptuo.TemplateEngine.Templates.Observers.PartialObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Update = null;
            System.Object.ctor.call(this);
        },
        Update$$: "System.String",
        get_Update: function (){
            return this._Update;
        },
        set_Update: function (value){
            this._Update = value;
        },
        OnInit: function (e){
        },
        Render: function (e, writer){
            var extendedWriter = As(writer, Neptuo.TemplateEngine.Templates.IExtendedHtmlWriter.ctor);
            if (extendedWriter != null)
                extendedWriter.AttributeOnNextTag("data-toupdate", this.get_Update());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Observers$PartialObserver);
var Neptuo$TemplateEngine$Templates$Observers$EventObserver = {
    fullname: "Neptuo.TemplateEngine.Templates.Observers.EventObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Event = null;
            System.Object.ctor.call(this);
        },
        Event$$: "System.String",
        get_Event: function (){
            return this._Event;
        },
        set_Event: function (value){
            this._Event = value;
        },
        OnInit: function (e){
            var button = As(e.get_Target(), Neptuo.TemplateEngine.Templates.Controls.ButtonControl.ctor);
            if (button == null)
                throw $CreateException(new System.InvalidOperationException.ctor$$String("EventObserver must used on ButtonControl."), new Error());
            if (System.String.IsNullOrEmpty(button.get_Name()))
                button.set_Name(this.get_Event());
        },
        Render: function (e, writer){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Observers$EventObserver);
var Neptuo$TemplateEngine$Templates$Observers$HtmlObserver = {
    fullname: "Neptuo.TemplateEngine.Templates.Observers.HtmlObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._ID = null;
            this._Name = null;
            this._Class = null;
            this._Style = null;
            System.Object.ctor.call(this);
        },
        ID$$: "System.String",
        get_ID: function (){
            return this._ID;
        },
        set_ID: function (value){
            this._ID = value;
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Class$$: "System.String",
        get_Class: function (){
            return this._Class;
        },
        set_Class: function (value){
            this._Class = value;
        },
        Style$$: "System.String",
        get_Style: function (){
            return this._Style;
        },
        set_Style: function (value){
            this._Style = value;
        },
        OnInit: function (e){
            var htmlControl = As(e.get_Target(), Neptuo.Templates.IAttributeCollection.ctor);
            if (htmlControl == null)
                return;
            if (!System.String.IsNullOrEmpty(this.get_ID()))
                htmlControl.SetAttribute("id", this.get_ID());
            if (!System.String.IsNullOrEmpty(this.get_Name()))
                htmlControl.SetAttribute("name", this.get_Name());
            if (!System.String.IsNullOrEmpty(this.get_Class()))
                htmlControl.SetAttribute("class", this.get_Class());
            if (!System.String.IsNullOrEmpty(this.get_Style()))
                htmlControl.SetAttribute("style", this.get_Style());
        },
        Render: function (e, writer){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Observers$HtmlObserver);
var Neptuo$TemplateEngine$Templates$Observers$IsPlaceholderObserver = {
    fullname: "Neptuo.TemplateEngine.Templates.Observers.IsPlaceholderObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition: {
        ctor: function (templateStorage){
            this._IsPlaceholder = null;
            this._TemplateStorage = null;
            System.Object.ctor.call(this);
            this.set_TemplateStorage(templateStorage);
        },
        IsPlaceholder$$: "System.String",
        get_IsPlaceholder: function (){
            return this._IsPlaceholder;
        },
        set_IsPlaceholder: function (value){
            this._IsPlaceholder = value;
        },
        TemplateStorage$$: "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack",
        get_TemplateStorage: function (){
            return this._TemplateStorage;
        },
        set_TemplateStorage: function (value){
            this._TemplateStorage = value;
        },
        OnInit: function (e){
            if (!this.get_TemplateStorage().Peek().ContainsKey(this.get_IsPlaceholder()))
                e.set_Cancel(true);
        },
        Render: function (e, writer){
            if (!this.get_TemplateStorage().Peek().ContainsKey(this.get_IsPlaceholder()))
                e.set_Cancel(true);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.TemplateContentStorageStack"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Observers$IsPlaceholderObserver);
var Neptuo$TemplateEngine$Templates$Observers$VisibleObserver = {
    fullname: "Neptuo.TemplateEngine.Templates.Observers.VisibleObserver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.Templates.Observers.IObserver"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._IsVisible = false;
            System.Object.ctor.call(this);
        },
        IsVisible$$: "System.Boolean",
        get_IsVisible: function (){
            return this._IsVisible;
        },
        set_IsVisible: function (value){
            this._IsVisible = value;
        },
        OnInit: function (e){
            if (!this.get_IsVisible())
                e.set_Cancel(true);
        },
        Render: function (e, writer){
            if (!this.get_IsVisible())
                e.set_Cancel(true);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$Observers$VisibleObserver);
var Neptuo$TemplateEngine$Templates$PresentationConfiguration = {
    fullname: "Neptuo.TemplateEngine.Templates.PresentationConfiguration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (templateStorage, valueProviderFactory, dataContext){
            this._TemplateStorage = null;
            this._ValueProviderFactory = null;
            this._DataContext = null;
            System.Object.ctor.call(this);
            if (templateStorage == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("templateStorage"), new Error());
            if (valueProviderFactory == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("valueProviderFactory"), new Error());
            if (dataContext == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("dataContext"), new Error());
            this.set_TemplateStorage(templateStorage);
            this.set_ValueProviderFactory(valueProviderFactory);
            this.set_DataContext(dataContext);
        },
        TemplateStorage$$: "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack",
        get_TemplateStorage: function (){
            return this._TemplateStorage;
        },
        set_TemplateStorage: function (value){
            this._TemplateStorage = value;
        },
        ValueProviderFactory$$: "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory",
        get_ValueProviderFactory: function (){
            return this._ValueProviderFactory;
        },
        set_ValueProviderFactory: function (value){
            this._ValueProviderFactory = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Templates.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.TemplateContentStorageStack", "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory", "Neptuo.TemplateEngine.Templates.DataContextStorage"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$PresentationConfiguration);
var Neptuo$TemplateEngine$Templates$PresentationConfiguration$1 = {
    fullname: "Neptuo.TemplateEngine.Templates.PresentationConfiguration$1",
    baseTypeName: "Neptuo.TemplateEngine.Templates.PresentationConfiguration",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (T, templateStorage, valueProviderFactory, dataContext){
            this.T = T;
            Neptuo.TemplateEngine.Templates.PresentationConfiguration.ctor.call(this, templateStorage, valueProviderFactory, dataContext);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.TemplateContentStorageStack", "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory", "Neptuo.TemplateEngine.Templates.DataContextStorage"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$PresentationConfiguration$1);
var Neptuo$TemplateEngine$Web$Routing$TemplateRouteParameterBase = {
    fullname: "Neptuo.TemplateEngine.Web.Routing.TemplateRouteParameterBase",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Web.Routing.TemplateRouteParameterBase.TemplateUrlSuffix = ".aspx";
            Neptuo.TemplateEngine.Web.Routing.TemplateRouteParameterBase.TemplatePathSuffix = ".view";
        },
        FormatUrl: function (path){
            if (path == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("path"), new Error());
            return System.String.Format$$String$$Object$$Object("{0}{1}", path, ".aspx");
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Routing$TemplateRouteParameterBase);
var Neptuo$TemplateEngine$Templates$TemplateContentStorage = {
    fullname: "Neptuo.TemplateEngine.Templates.TemplateContentStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (parent){
            this.parent = null;
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.Templates.Controls.TemplateContentControl.ctor);
            System.Object.ctor.call(this);
            this.parent = parent;
        },
        Add: function (key, content){
            this.storage.set_Item$$TKey(key, content);
        },
        AddRange: function (contents){
            if (contents == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("contents"), new Error());
            var $it21 = contents.GetEnumerator();
            while ($it21.MoveNext()){
                var content = $it21.get_Current();
                this.Add(content.get_Name(), content);
            }
        },
        ContainsKey: function (key){
            if (this.storage.ContainsKey(key))
                return true;
            if (this.parent == null)
                return false;
            return this.parent.ContainsKey(key);
        },
        Get: function (key){
            if (this.storage.ContainsKey(key))
                return this.storage.get_Item$$TKey(key);
            if (this.parent == null)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("key", System.String.Format$$String$$Object("Missing key \'{0}\'.", key)), new Error());
            return this.parent.Get(key);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.TemplateContentStorage"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$TemplateContentStorage);
var Neptuo$TemplateEngine$Templates$TemplateContentStorageStack = {
    fullname: "Neptuo.TemplateEngine.Templates.TemplateContentStorageStack",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.IStackStorage$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.innerStorage = new System.Collections.Generic.Stack$1.ctor(Neptuo.TemplateEngine.Templates.TemplateContentStorage.ctor);
            System.Object.ctor.call(this);
        },
        CreateStorage: function (){
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(Neptuo.TemplateEngine.Templates.TemplateContentStorage.ctor, this.innerStorage))
                return new Neptuo.TemplateEngine.Templates.TemplateContentStorage.ctor(this.innerStorage.Peek());
            return new Neptuo.TemplateEngine.Templates.TemplateContentStorage.ctor(null);
        },
        Push: function (storage){
            this.innerStorage.Push(storage);
        },
        Pop: function (){
            return this.innerStorage.Pop();
        },
        Peek: function (){
            return this.innerStorage.Peek();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$TemplateContentStorageStack);
var Neptuo$TemplateEngine$Templates$ValueConverterService = {
    fullname: "Neptuo.TemplateEngine.Templates.ValueConverterService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.IValueConverterService"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.Templates.IValueConverter.ctor);
            System.Object.ctor.call(this);
        },
        GetConverter: function (key){
            if (System.String.IsNullOrEmpty(key))
                throw $CreateException(new System.ArgumentNullException.ctor$$String$$String("key", "Key can\'t be null or empty!"), new Error());
            if (!this.storage.ContainsKey(key))
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$Object$$String("key", "There is no converter associated with key {0}!", key), new Error());
            return this.storage.get_Item$$TKey(key);
        },
        SetConverter: function (key, converter){
            this.storage.set_Item$$TKey(key, converter);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$ValueConverterService);
var Neptuo$TemplateEngine$Templates$ViewAttribute = {
    fullname: "Neptuo.TemplateEngine.Templates.ViewAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.TemplateEngine.Shared",
    Kind: "Class",
    definition: {
        ctor: function (viewPath){
            this._ViewPath = null;
            System.Attribute.ctor.call(this);
            this.set_ViewPath(viewPath);
        },
        ViewPath$$: "System.String",
        get_ViewPath: function (){
            return this._ViewPath;
        },
        set_ViewPath: function (value){
            this._ViewPath = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$ViewAttribute);

