/* Generated by SharpKit 5 v5.3.6 */

/* Generated by SharpKit 5 v5.3.6 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$TemplateEngine$Bootstrap$PresentationModelBootstrapTask = {
    fullname: "Neptuo.TemplateEngine.Bootstrap.PresentationModelBootstrapTask",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapTask"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyContainer){
            this._DependencyContainer = null;
            System.Object.ctor.call(this);
            this.set_DependencyContainer(dependencyContainer);
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        Initialize: function (){
            var metadataReaders = new Neptuo.PresentationModels.TypeModels.MetadataReaderService.ctor();
            this.SetupMetadataReaderService(metadataReaders);
            var validators = new Neptuo.PresentationModels.Validation.MetadataValidatorCollection.ctor();
            this.SetupMetadataValidatorCollection(validators);
            var bindingConverters = new Neptuo.PresentationModels.BindingConverterCollection.ctor(null);
            this.SetupBindingConverterCollection(bindingConverters);
            Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer$$Object(Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory.ctor, Neptuo.PresentationModels.TypeModels.ReflectionModelValueProviderFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer$$Object(Neptuo.PresentationModels.TypeModels.IModelDefinitionFactory.ctor, Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.Controllers.Binders.IModelBinder.ctor, Neptuo.TemplateEngine.Web.Controllers.Binders.ModelBinder.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.IBindingConverterCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.BindingConverterCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.Validation.IMetadataValidatorCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.Validation.MetadataValidatorCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.TypeModels.MetadataReaderService.ctor, this.get_DependencyContainer(), metadataReaders), validators), validators), bindingConverters), bindingConverters)), new Neptuo.Lifetimes.SingletonLifetime.ctor()), new Neptuo.Lifetimes.SingletonLifetime.ctor());
        },
        SetupMetadataReaderService: function (readerService){
        },
        SetupMetadataValidatorCollection: function (validators){
        },
        SetupBindingConverterCollection: function (bindingConverters){
            Neptuo.PresentationModels.BindingConverters.BindingConverterCollectionExtensions.AddStandart(bindingConverters);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyContainer"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Bootstrap$PresentationModelBootstrapTask);
var Neptuo$TemplateEngine$Navigation$ClientNavigateTo = {
    fullname: "Neptuo.TemplateEngine.Navigation.ClientNavigateTo",
    baseTypeName: "Neptuo.TemplateEngine.Navigation.QueryStringNavigateTo",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (urlProvider, formUri){
            Neptuo.TemplateEngine.Navigation.QueryStringNavigateTo.ctor.call(this, urlProvider, formUri);
        },
        NavigateToUrl: function (url){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Navigation.FormUri"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Navigation$ClientNavigateTo);
var Neptuo$TemplateEngine$Navigation$ClientNavigator = {
    fullname: "Neptuo.TemplateEngine.Navigation.ClientNavigator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Navigation.INavigator"],
    Kind: "Class",
    definition: {
        ctor: function (urlProvider){
            this.urlProvider = null;
            System.Object.ctor.call(this);
            this.urlProvider = urlProvider;
        },
        Open: function (formUri){
            this.NavigateTo(formUri).Open();
        },
        NavigateTo: function (formUri){
            return new Neptuo.TemplateEngine.Navigation.ClientNavigateTo.ctor(this.urlProvider, formUri);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IVirtualUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Navigation$ClientNavigator);
var Neptuo$TemplateEngine$Web$Application = {
    fullname: "Neptuo.TemplateEngine.Web.Application",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Web.Application._Instance = null;
        },
        Instance$$: "Neptuo.TemplateEngine.Web.IApplication",
        get_Instance: function (){
            return Neptuo.TemplateEngine.Web.Application._Instance;
        },
        set_Instance: function (value){
            Neptuo.TemplateEngine.Web.Application._Instance = value;
        },
        Start: function (applicationPath, defaultToUpdate){
            if (Neptuo.TemplateEngine.Web.Application.get_Instance() != null)
                throw $CreateException(new System.ApplicationException.ctor$$String("Application is already started."), new Error());
            Neptuo.TemplateEngine.Web.Application.set_Instance(new Neptuo.TemplateEngine.Web.Application.ctor(applicationPath, defaultToUpdate));
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IApplication", "Neptuo.Templates.IVirtualUrlProvider"],
    Kind: "Class",
    definition: {
        ctor: function (applicationPath, defaultToUpdate){
            this._ApplicationPath = null;
            this._DefaultToUpdate = null;
            this._HistoryState = null;
            this._DependencyContainer = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(applicationPath, "applicationPath");
            Neptuo.Guard.NotNull$$Object$$String(defaultToUpdate, "defaultToUpdate");
            this.set_DependencyContainer(this.CreateDependencyContainer());
            this.set_ApplicationPath(applicationPath);
            this.set_DefaultToUpdate(defaultToUpdate);
            this.get_HistoryState().add_OnPop($CreateDelegate(this, this.OnHistoryStatePop));
            this.RunBootstrapTasks(this.get_DependencyContainer());
        },
        ApplicationPath$$: "System.String",
        get_ApplicationPath: function (){
            return this._ApplicationPath;
        },
        set_ApplicationPath: function (value){
            this._ApplicationPath = value;
        },
        DefaultToUpdate$$: "System.String[]",
        get_DefaultToUpdate: function (){
            return this._DefaultToUpdate;
        },
        set_DefaultToUpdate: function (value){
            this._DefaultToUpdate = value;
        },
        HistoryState$$: "Neptuo.TemplateEngine.Web.IHistoryState",
        get_HistoryState: function (){
            return this._HistoryState;
        },
        set_HistoryState: function (value){
            this._HistoryState = value;
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        ResolveUrl: function (path){
            return path.Replace$$String$$String("~/", this.get_ApplicationPath());
        },
        CreateDependencyContainer: function (){
            var container = new Neptuo.ObjectBuilder.DependencyContainer.ctor();
            container.Map(Typeof(Neptuo.Lifetimes.SingletonLifetime.ctor), new Neptuo.ObjectBuilder.Lifetimes.Mapping.SingletonLifetimeMapper.ctor());
            var formService = new Neptuo.TemplateEngine.Navigation.DefaultFormUriService.ctor();
            Neptuo.TemplateEngine.Navigation.Bootstrap.FormUriServiceRegistration.SetInstance(formService);
            this.set_HistoryState(new Neptuo.TemplateEngine.Web.HistoryState.ctor());
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IHistoryState.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Permissions.IPermissionProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.Controllers.IControllerRegistry.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Navigation.Bootstrap.IFormUriRegistry.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Navigation.IFormUriService.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.GlobalNavigationCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer$$Object(Neptuo.TemplateEngine.Web.IViewActivator.ctor, Neptuo.TemplateEngine.Web.StaticViewActivator.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.IGuidProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.DataContextStorage.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.TemplateContentStorageStack.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IRequestContext.ctor, Neptuo.TemplateEngine.Web.CompositeRequestContext.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IValueConverterService.ctor, Neptuo.TemplateEngine.Web.ValueConverterService.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IBindingManager.ctor, Neptuo.TemplateEngine.Web.BindingManagerBase.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IParameterProvider.ctor, Neptuo.TemplateEngine.Web.AllParameterProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IParameterProviderFactory.ctor, Neptuo.TemplateEngine.Web.ParameterProviderFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.ICurrentUrlProvider.ctor, Neptuo.TemplateEngine.Web.UrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.Templates.IVirtualUrlProvider.ctor, Neptuo.TemplateEngine.Web.UrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.IStackStorage$1.ctor, Neptuo.TemplateEngine.StackStorage$1.ctor, container)))))))), new Neptuo.TemplateEngine.Web.TemplateContentStorageStack.ctor()), new Neptuo.TemplateEngine.Web.DataContextStorage.ctor()), new Neptuo.SequenceGuidProvider.ctor("guid", 1)), new Neptuo.Lifetimes.SingletonLifetime.ctor()), new Neptuo.TemplateEngine.Web.GlobalNavigationCollection.ctor()), formService), formService), new Neptuo.TemplateEngine.Web.Controllers.ControllerRegistryBase.ctor()), new Neptuo.TemplateEngine.Permissions.OptimisticPermissionProvider.ctor()), this.get_HistoryState());
            return container;
        },
        RunBootstrapTasks: function (dependencyContainer){
            var taskFactory = $CreateAnonymousDelegate(this, function (type){
                return dependencyContainer.Resolve(type, null);
            });
            var constrainFactory = $CreateAnonymousDelegate(this, function (type){
                return dependencyContainer.Resolve(type, null);
            });
            var bootstrapper = new Neptuo.Bootstrap.AutomaticBootstrapper.ctor$$Func$2$Type$IBootstrapTask$$IEnumerable$1$Type$$IBootstrapConstraintProvider(taskFactory, JsCompiler.NewTypes, new Neptuo.Bootstrap.Constraints.AttributeConstraintProvider.ctor(constrainFactory));
            bootstrapper.Initialize();
        },
        OnHistoryStatePop: function (historyItem){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String[]"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Application);
var Neptuo$TemplateEngine$Web$ClientExtendedComponentManager = {
    fullname: "Neptuo.TemplateEngine.Web.ClientExtendedComponentManager",
    baseTypeName: "Neptuo.TemplateEngine.Web.ExtendedComponentManager",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (partialsToUpdate){
            this.partialsToUpdate = null;
            Neptuo.TemplateEngine.Web.ExtendedComponentManager.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(partialsToUpdate, "partialsToUpdate");
            this.partialsToUpdate = partialsToUpdate;
        },
        DoRenderControl: function (control, writer){
            var partialView;
            if ((function (){
                var $1 = {
                    Value: partialView
                };
                var $res = this.get_PartialUpdates().TryGetValue(control, $1);
                partialView = $1.Value;
                return $res;
            }).call(this) && System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, this.partialsToUpdate, partialView)){
                var stringWriter = new System.IO.StringWriter.ctor();
                var extendedWriter = new Neptuo.TemplateEngine.Web.ExtendedHtmlTextWriter.ctor(stringWriter);
                Neptuo.Templates.ComponentManager.commonPrototype.DoRenderControl.call(this, control, extendedWriter);
                var target = $("[data-update=" + partialView + "]");
                target.replaceWith(stringWriter.toString());
                return;
            }
            Neptuo.Templates.ComponentManager.commonPrototype.DoRenderControl.call(this, control, writer);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String[]"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$ClientExtendedComponentManager);
var Neptuo$TemplateEngine$Web$Controls$PartialStartUpControl = {
    fullname: "Neptuo.TemplateEngine.Web.Controls.PartialStartUpControl",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._DefaultUpdate = null;
            System.Object.ctor.call(this);
        },
        DefaultUpdate$$: "System.String",
        get_DefaultUpdate: function (){
            return this._DefaultUpdate;
        },
        set_DefaultUpdate: function (value){
            this._DefaultUpdate = value;
        },
        OnInit: function (){
            Neptuo.Guard.NotNull$$Object$$String(this.get_DefaultUpdate(), "DefaultUpdate");
        },
        Render: function (writer){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$PartialStartUpControl);
var Neptuo$TemplateEngine$Web$Controls$BundleControl = {
    fullname: "Neptuo.TemplateEngine.Web.Controls.BundleControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.BundleControlBase",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (urlProvider){
            Neptuo.TemplateEngine.Web.Controls.BundleControlBase.ctor.call(this, urlProvider);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IVirtualUrlProvider"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$BundleControl);
var Neptuo$TemplateEngine$Web$Controls$DetailViewControl = {
    fullname: "Neptuo.TemplateEngine.Web.Controls.DetailViewControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (componentManager, storage, dataContext, updateHelper){
            this._Source = null;
            this._DataContext = null;
            this._UpdateHelper = null;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, componentManager, storage);
            this.set_DataContext(dataContext);
            this.set_UpdateHelper(updateHelper);
        },
        Source$$: "Neptuo.TemplateEngine.Web.DataSources.IDataSource",
        get_Source: function (){
            return this._Source;
        },
        set_Source: function (value){
            this._Source = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        },
        UpdateHelper$$: "Neptuo.TemplateEngine.Web.PartialUpdateHelper",
        get_UpdateHelper: function (){
            return this._UpdateHelper;
        },
        set_UpdateHelper: function (value){
            this._UpdateHelper = value;
        },
        OnInit: function (){
            this.InitComponent(this.get_Source());
            if (this.get_Source() == null)
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Missing data source."), new Error());
            this.get_UpdateHelper().add_RenderContent($CreateDelegate(this, this.OnRenderContent));
            this.get_UpdateHelper().OnInit();
            this.get_Source().GetItem($CreateDelegate(this, this.OnLoadData));
        },
        OnRenderContent: function (writer){
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.Render.call(this, writer);
        },
        Render: function (writer){
            this.get_UpdateHelper().Render(writer);
        },
        OnLoadData: function (data){
            this.get_DataContext().Push(data, null);
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop(null);
            this.get_UpdateHelper().OnDataLoaded();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage", "Neptuo.TemplateEngine.Web.PartialUpdateHelper"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$DetailViewControl);
var Neptuo$TemplateEngine$Web$Controls$ListViewControl = {
    fullname: "Neptuo.TemplateEngine.Web.Controls.ListViewControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (requestContext, storage, dataContext, updateHelper){
            this._Source = null;
            this._ItemTemplate = null;
            this._EmptyTemplate = null;
            this._PageSize = null;
            this._PageIndex = null;
            this._RequestContext = null;
            this._DataContext = null;
            this._TotalCount = 0;
            this._UpdateHelper = null;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, requestContext.get_ComponentManager(), storage);
            this.set_RequestContext(requestContext);
            this.set_DataContext(dataContext);
            this.set_UpdateHelper(updateHelper);
        },
        Source$$: "Neptuo.TemplateEngine.Web.DataSources.IListDataSource",
        get_Source: function (){
            return this._Source;
        },
        set_Source: function (value){
            this._Source = value;
        },
        ItemTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_ItemTemplate: function (){
            return this._ItemTemplate;
        },
        set_ItemTemplate: function (value){
            this._ItemTemplate = value;
        },
        EmptyTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_EmptyTemplate: function (){
            return this._EmptyTemplate;
        },
        set_EmptyTemplate: function (value){
            this._EmptyTemplate = value;
        },
        PageSize$$: "System.Nullable`1[[System.Int32]]",
        get_PageSize: function (){
            return this._PageSize;
        },
        set_PageSize: function (value){
            this._PageSize = value;
        },
        PageIndex$$: "System.Nullable`1[[System.Int32]]",
        get_PageIndex: function (){
            return this._PageIndex;
        },
        set_PageIndex: function (value){
            this._PageIndex = value;
        },
        RequestContext$$: "Neptuo.TemplateEngine.Web.IRequestContext",
        get_RequestContext: function (){
            return this._RequestContext;
        },
        set_RequestContext: function (value){
            this._RequestContext = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function (){
            return this._DataContext;
        },
        set_DataContext: function (value){
            this._DataContext = value;
        },
        TotalCount$$: "System.Int32",
        get_TotalCount: function (){
            return this._TotalCount;
        },
        set_TotalCount: function (value){
            this._TotalCount = value;
        },
        UpdateHelper$$: "Neptuo.TemplateEngine.Web.PartialUpdateHelper",
        get_UpdateHelper: function (){
            return this._UpdateHelper;
        },
        set_UpdateHelper: function (value){
            this._UpdateHelper = value;
        },
        OnInit: function (){
            this.InitComponent(this.get_ItemTemplate());
            if (this.get_ItemTemplate() == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Missing item template.", "ItemTemplate"), new Error());
            this.InitComponent(this.get_Source());
            if (this.get_Source() == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Missing data source.", "Source"), new Error());
            this.get_UpdateHelper().add_RenderContent($CreateDelegate(this, this.OnRenderContent));
            this.get_UpdateHelper().OnInit();
            this.get_Source().GetData(this.get_PageIndex(), this.get_PageSize(), $CreateDelegate(this, this.OnLoadData));
        },
        OnRenderContent: function (writer){
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.Render.call(this, writer);
            if (this.get_PageSize() != null){
                writer.Tag("ul").Attribute("class", "pagination pagination-sm");
                for (var i = 0; i < System.Math.Ceiling$$Decimal(this.get_TotalCount() / this.get_PageSize().get_Value()); i++){
                    writer.Tag("li").Attribute("class", ((this.get_PageIndex() != null ? this.get_PageIndex() : 0) == i) ? "active" : "").Tag("a").Attribute("href", this.GetBaseUrl() + ((i != 0) ? ("?PageIndex=" + i) : "?")).Content$$Object(i + 1).CloseFullTag().CloseFullTag();
                }
                writer.CloseFullTag();
            }
        },
        GetBaseUrl: function (){
            var currentUrl = this.get_RequestContext().GetCurrentUrl();
            var indexOfQueryString = currentUrl.indexOf("?");
            if (indexOfQueryString > 0)
                currentUrl = currentUrl.substr(0, indexOfQueryString);
            return currentUrl;
        },
        Render: function (writer){
            this.get_UpdateHelper().Render(writer);
        },
        OnLoadData: function (result){
            var isEmpty = true;
            var itemTemplates = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            this.get_DataContext().Push(this, "Template");
            this.set_TotalCount(result.get_TotalCount());
            var $it1 = result.get_Data().GetEnumerator();
            while ($it1.MoveNext()){
                var model = $it1.get_Current();
                isEmpty = false;
                this.get_DataContext().Push(model, null);
                itemTemplates.Add(this.InitTemplate(this.get_ItemTemplate()));
                this.get_DataContext().Pop(null);
            }
            if (isEmpty && this.get_EmptyTemplate() != null){
                this.set_Template(this.get_EmptyTemplate());
            }
            else {
                var templateContent = (function (){
                    var $v1 = new Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor(this.get_ComponentManager());
                    $v1.set_Name("Content");
                    $v1.set_Content(itemTemplates);
                    return $v1;
                }).call(this);
                this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor, templateContent, null);
                this.InitComponent(templateContent);
                this.get_Content().Add(templateContent);
            }
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop("Template");
            this.get_UpdateHelper().OnDataLoaded();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Web.IRequestContext", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage", "Neptuo.TemplateEngine.Web.PartialUpdateHelper"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ListViewControl);
var Neptuo$TemplateEngine$Web$Controls$SelectControl = {
    fullname: "Neptuo.TemplateEngine.Web.Controls.SelectControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ListViewControl",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.IHtmlAttributeCollection", "Neptuo.Templates.IAttributeCollection"],
    Kind: "Class",
    definition: {
        ctor: function (requestContext, storage, dataContext, updateHelper){
            this._Name = null;
            this._Value = null;
            this._IsAddEmpty = false;
            this._Attributes = null;
            Neptuo.TemplateEngine.Web.Controls.ListViewControl.ctor.call(this, requestContext, storage, dataContext, updateHelper);
            this.set_Attributes(new Neptuo.Templates.HtmlAttributeCollection.ctor());
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Value$$: "System.Object",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        },
        IsAddEmpty$$: "System.Boolean",
        get_IsAddEmpty: function (){
            return this._IsAddEmpty;
        },
        set_IsAddEmpty: function (value){
            this._IsAddEmpty = value;
        },
        Attributes$$: "Neptuo.Templates.HtmlAttributeCollection",
        get_Attributes: function (){
            return this._Attributes;
        },
        set_Attributes: function (value){
            this._Attributes = value;
        },
        SetAttribute: function (name, value){
            this.get_Attributes().set_Item$$TKey(name, value);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Web.IRequestContext", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage", "Neptuo.TemplateEngine.Web.PartialUpdateHelper"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$SelectControl);
var Neptuo$TemplateEngine$Web$DataSources$IDataSource = {
    fullname: "Neptuo.TemplateEngine.Web.DataSources.IDataSource",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$DataSources$IDataSource);
var Neptuo$TemplateEngine$Web$DataSources$IListDataSource = {
    fullname: "Neptuo.TemplateEngine.Web.DataSources.IListDataSource",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$DataSources$IListDataSource);
var Neptuo$TemplateEngine$Web$DataSources$IListResult = {
    fullname: "Neptuo.TemplateEngine.Web.DataSources.IListResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$DataSources$IListResult);
var Neptuo$TemplateEngine$Web$DataSources$ListResult = {
    fullname: "Neptuo.TemplateEngine.Web.DataSources.ListResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.DataSources.IListResult"],
    Kind: "Class",
    definition: {
        ctor: function (data, totalCount){
            this._Data = null;
            this._TotalCount = 0;
            System.Object.ctor.call(this);
            this.set_Data(data);
            this.set_TotalCount(totalCount);
        },
        Data$$: "System.Collections.IEnumerable",
        get_Data: function (){
            return this._Data;
        },
        set_Data: function (value){
            this._Data = value;
        },
        TotalCount$$: "System.Int32",
        get_TotalCount: function (){
            return this._TotalCount;
        },
        set_TotalCount: function (value){
            this._TotalCount = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.IEnumerable", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$DataSources$ListResult);
var Neptuo$TemplateEngine$Web$HistoryItem = {
    fullname: "Neptuo.TemplateEngine.Web.HistoryItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (url, toUpdate, context){
            this.ToUpdate = null;
            this.Url = null;
            this.FormData = null;
            this.EventName = null;
            System.Object.ctor.call(this);
            this.Url = url;
            this.ToUpdate = toUpdate;
            if (context != null){
                this.FormData = context.Parameters;
                this.EventName = context.EventName;
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String[]", "Neptuo.TemplateEngine.Web.FormRequestContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$HistoryItem);
var Neptuo$TemplateEngine$Web$HistoryState = {
    fullname: "Neptuo.TemplateEngine.Web.HistoryState",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IHistoryState"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.isPopAssigned = false;
            this.onPop = null;
            this.OnPop = null;
            System.Object.ctor.call(this);
        },
        add_onPop: function (value){
            this.onPop = $CombineDelegates(this.onPop, value);
        },
        remove_onPop: function (value){
            this.onPop = $RemoveDelegate(this.onPop, value);
        },
        add_OnPop: function (value){
            this.add_onPop(value);
            if (this.onPop != null && !this.isPopAssigned){
                window.addEventListener("popstate", $CreateDelegate(this, this.OnPopState));
                this.isPopAssigned = true;
            }
        },
        remove_OnPop: function (value){
            this.remove_onPop(value);
            if (this.onPop == null && this.isPopAssigned){
                window.removeEventListener("popstate", $CreateDelegate(this, this.OnPopState));
                this.isPopAssigned = false;
            }
        },
        OnPopState: function (e){
            var state = e;
            var historyItem = state.state;
            if (this.onPop != null)
                this.onPop(historyItem);
        },
        Push: function (item){
            history.pushState(item, "", item.Url);
        },
        Replace: function (item){
            history.replaceState(item, "", item.Url);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$HistoryState);
var Neptuo$TemplateEngine$Web$IApplication = {
    fullname: "Neptuo.TemplateEngine.Web.IApplication",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IApplication);
var Neptuo$TemplateEngine$Web$IHistoryState = {
    fullname: "Neptuo.TemplateEngine.Web.IHistoryState",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IHistoryState);
var Neptuo$TemplateEngine$Web$IMainView = {
    fullname: "Neptuo.TemplateEngine.Web.IMainView",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IMainView);
var Neptuo$TemplateEngine$Web$IPartialWriter = {
    fullname: "Neptuo.TemplateEngine.Web.IPartialWriter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IPartialWriter);
var Neptuo$TemplateEngine$Web$MainView = {
    fullname: "Neptuo.TemplateEngine.Web.MainView",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IMainView", "Neptuo.TemplateEngine.Web.IPartialWriter"],
    Kind: "Class",
    definition: {
        ctor: function (viewActivator){
            this.OnLinkClick = null;
            this.OnPostFormSubmit = null;
            this.OnGetFormSubmit = null;
            this._ViewActivator = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(viewActivator, "viewActivator");
            this.set_ViewActivator(viewActivator);
            $($CreateAnonymousDelegate(this, function (){
                var body = $("body");
                body.delegate("a", "click", $CreateDelegate(this, this.OnLinkClickInternal));
                body.delegate("button", "click", $CreateDelegate(this, this.OnButtonClickInternal));
                body.delegate("form", "submit", $CreateDelegate(this, this.OnFormSubmitInternal));
            }));
        },
        ViewActivator$$: "Neptuo.TemplateEngine.Web.IViewActivator",
        get_ViewActivator: function (){
            return this._ViewActivator;
        },
        set_ViewActivator: function (value){
            this._ViewActivator = value;
        },
        add_OnLinkClick: function (value){
            this.OnLinkClick = $CombineDelegates(this.OnLinkClick, value);
        },
        remove_OnLinkClick: function (value){
            this.OnLinkClick = $RemoveDelegate(this.OnLinkClick, value);
        },
        add_OnPostFormSubmit: function (value){
            this.OnPostFormSubmit = $CombineDelegates(this.OnPostFormSubmit, value);
        },
        remove_OnPostFormSubmit: function (value){
            this.OnPostFormSubmit = $RemoveDelegate(this.OnPostFormSubmit, value);
        },
        add_OnGetFormSubmit: function (value){
            this.OnGetFormSubmit = $CombineDelegates(this.OnGetFormSubmit, value);
        },
        remove_OnGetFormSubmit: function (value){
            this.OnGetFormSubmit = $RemoveDelegate(this.OnGetFormSubmit, value);
        },
        GetToUpdateFromElement: function (element){
            var value = element.data("toupdate");
            if (System.String.IsNullOrEmpty(value))
                return null;
            return value.Split$$Char$Array(",");
        },
        OnLinkClickInternal: function (e){
            var link = $(e.currentTarget);
            var newUrl = link.attr("href");
            var toUpdate = this.GetToUpdateFromElement(link);
            if (this.OnLinkClick != null)
                this.OnLinkClick(newUrl, toUpdate);
            e.preventDefault();
        },
        OnButtonClickInternal: function (e){
            var button = $(e.currentTarget);
            var buttonName = button.attr("name");
            button.parents("form").first().data("button", buttonName);
        },
        OnFormSubmitInternal: function (e){
            var form = $(e.currentTarget);
            var buttonName = form.data("button");
            if (System.String.IsNullOrEmpty(buttonName))
                buttonName = form.find("button:first").attr("name");
            var formUrl = (form.attr("action") != null ? form.attr("action") : location.href);
            var toUpdate = (this.GetToUpdateFromElement(form) != null ? this.GetToUpdateFromElement(form) : ["Body"]);
            if (form.is("[method]") && form.attr("method").toLocaleLowerCase() == "post"){
                var formData = form.serializeArray();
                if (!System.String.IsNullOrEmpty(buttonName)){
                    var submitButton = new Object();
                    submitButton["name"] = buttonName;
                    submitButton["value"] = null;
                    formData.push(submitButton);
                }
                var context = new Neptuo.TemplateEngine.Web.FormRequestContext.ctor(toUpdate, formData, buttonName, formUrl);
                if (this.OnPostFormSubmit != null)
                    this.OnPostFormSubmit(context);
            }
            else {
                var formData = form.serialize();
                var queryIndex = formUrl.indexOf("?");
                if (queryIndex > 0)
                    formUrl = formUrl.substr(0, queryIndex);
                formUrl += "?" + formData;
                if (this.OnGetFormSubmit != null)
                    this.OnGetFormSubmit(formUrl, toUpdate);
            }
            e.preventDefault();
        },
        RenderView: function (viewPath, toUpdate, dependencyContainer){
            var componentManager = new Neptuo.TemplateEngine.Web.ClientExtendedComponentManager.ctor(toUpdate);
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.NavigationCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IPartialUpdateWriter.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.Templates.IComponentManager.ctor, dependencyContainer, componentManager), componentManager), new Neptuo.TemplateEngine.Web.NavigationCollection.ctor());
            var writer = new System.IO.StringWriter.ctor();
            var view = this.get_ViewActivator().CreateView(viewPath);
            view.Setup(new Neptuo.Templates.BaseViewPage.ctor(componentManager), componentManager, dependencyContainer);
            view.CreateControls();
            view.Init();
            view.Render(new Neptuo.TemplateEngine.Web.ExtendedHtmlTextWriter.ctor(writer));
            view.Dispose();
        },
        UpdateView: function (partialGuid, content){
            var target = $("div[data-partial=" + partialGuid + "]");
            target.replaceWith(content.toString());
        },
        WritePlaceholder: function (writer, partialGuid){
            writer.Tag("div").Attribute("data-partial", partialGuid).Content$$String("Loading data...").CloseFullTag();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Web.IViewActivator"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$MainView);
var Neptuo$TemplateEngine$Web$PartialResponseConverter = {
    fullname: "Neptuo.TemplateEngine.Web.PartialResponseConverter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter$2"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        TryConvert: function (sourceValue, targetValue){
            if (sourceValue == null){
                targetValue.Value = null;
                return false;
            }
            var messageStorage = new Neptuo.TemplateEngine.Web.MessageStorage.ctor();
            if (sourceValue["Messages"] != null){
                var messages = sourceValue["Messages"];
                for (var key in messages){
                    var messageList = messages[key];
                    for (var i = 0; i < messageList.length; i++){
                        var message = messageList[i];
                        messageStorage.Add(key, message["Key"], message["Text"], message["Type"]);
                    }
                }
            }
            targetValue.Value = new Neptuo.TemplateEngine.Web.PartialResponse.ctor(messageStorage, sourceValue["Navigation"]);
            return true;
        },
        TryConvertGeneral: function (sourceType, targetType, sourceValue, targetValue){
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.TryConvert(sourceValue instanceof Object || sourceValue == null ? sourceValue : (function (){
                    throw new Error("InvalidCastException");
                }
                ()), $1);
                target = $1.Value;
                return $res;
            }).call(this)){
                targetValue.Value = target;
                return true;
            }
            targetValue.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PartialResponseConverter);
var Neptuo$TemplateEngine$Web$PartialUpdateHelper = {
    fullname: "Neptuo.TemplateEngine.Web.PartialUpdateHelper",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (guidProvider, partialWriter, mainView){
            this.guidProvider = null;
            this.partialWriter = null;
            this.mainView = null;
            this.partialElementGuid = null;
            this.isRenderCalled = false;
            this.isDataLoaded = false;
            this.RenderContent = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(guidProvider, "guidProvider");
            Neptuo.Guard.NotNull$$Object$$String(partialWriter, "partialWriter");
            Neptuo.Guard.NotNull$$Object$$String(mainView, "mainView");
            this.guidProvider = guidProvider;
            this.partialWriter = partialWriter;
            this.mainView = mainView;
        },
        add_RenderContent: function (value){
            this.RenderContent = $CombineDelegates(this.RenderContent, value);
        },
        remove_RenderContent: function (value){
            this.RenderContent = $RemoveDelegate(this.RenderContent, value);
        },
        OnInit: function (){
            Neptuo.Guard.NotNull$$Object$$String(this.RenderContent, "RenderContent");
            this.partialElementGuid = this.guidProvider.Next();
        },
        Render: function (writer){
            if (!this.isDataLoaded){
                this.isRenderCalled = true;
                this.partialWriter.WritePlaceholder(writer, this.partialElementGuid);
                return;
            }
            else {
                if (this.RenderContent != null)
                    this.RenderContent(writer);
            }
        },
        OnDataLoaded: function (){
            this.isDataLoaded = true;
            if (this.isRenderCalled){
                var stringWriter = new System.IO.StringWriter.ctor();
                var writer = new Neptuo.Templates.HtmlTextWriter.ctor(stringWriter);
                if (this.RenderContent != null)
                    this.RenderContent(writer);
                this.mainView.UpdateView(this.partialElementGuid, stringWriter);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IGuidProvider", "Neptuo.TemplateEngine.Web.IPartialWriter", "Neptuo.TemplateEngine.Web.IMainView"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PartialUpdateHelper);
var Neptuo$TemplateEngine$Web$RenderEventHandler = {
    fullname: "Neptuo.TemplateEngine.Web.RenderEventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$RenderEventHandler);
var Neptuo$TemplateEngine$Web$StaticViewActivator = {
    fullname: "Neptuo.TemplateEngine.Web.StaticViewActivator",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Web.StaticViewActivator.mappings = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Type.ctor);
        },
        Add: function (viewPath, viewType){
            Neptuo.TemplateEngine.Web.StaticViewActivator.mappings.set_Item$$TKey(viewPath, viewType);
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IViewActivator"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            this.dependencyProvider = dependencyProvider;
        },
        CreateView: function (path){
            var viewType;
            if ((function (){
                var $1 = {
                    Value: viewType
                };
                var $res = Neptuo.TemplateEngine.Web.StaticViewActivator.mappings.TryGetValue(path, $1);
                viewType = $1.Value;
                return $res;
            }).call(this))
                return Cast(Neptuo.DependencyProviderExtensions.Resolve$$IDependencyProvider$$Type(this.dependencyProvider, viewType), Neptuo.Templates.BaseGeneratedView.ctor);
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$StaticViewActivator);
var Neptuo$TemplateEngine$Web$GeneratedViewBase = {
    fullname: "Neptuo.TemplateEngine.Web.GeneratedViewBase",
    baseTypeName: "Neptuo.Templates.BaseGeneratedView",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.urlProvider = null;
            Neptuo.Templates.BaseGeneratedView.ctor.call(this);
        },
        ResolveUrl: function (relativeUrl){
            if (this.urlProvider == null)
                this.urlProvider = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Templates.IVirtualUrlProvider.ctor, this.dependencyProvider);
            return this.urlProvider.ResolveUrl(relativeUrl);
        },
        CastValueTo$1: function (T, value){
            if (value == null)
                return null;
            var sourceType = value.GetType();
            var targetType = Typeof(T);
            if (sourceType == targetType)
                return Cast(value, T);
            if (targetType == Typeof(System.String.ctor))
                return value.toString();
            return value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$GeneratedViewBase);
var Neptuo$TemplateEngine$Web$InitScript = {
    fullname: "Neptuo.TemplateEngine.Web.InitScript",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Web.InitScript.FormRequestContext = null;
            Neptuo.TemplateEngine.Web.InitScript.dependencyContainer = null;
            Neptuo.TemplateEngine.Web.InitScript.viewActivator = null;
            Neptuo.TemplateEngine.Web.InitScript.historyState = null;
            Neptuo.TemplateEngine.Web.InitScript.mainView = null;
        },
        CreateDependencyContainer: function (){
            var container = new Neptuo.ObjectBuilder.DependencyContainer.ctor();
            container.Map(Typeof(Neptuo.Lifetimes.SingletonLifetime.ctor), new Neptuo.ObjectBuilder.Lifetimes.Mapping.SingletonLifetimeMapper.ctor());
            var formService = new Neptuo.TemplateEngine.Navigation.DefaultFormUriService.ctor();
            Neptuo.TemplateEngine.Navigation.Bootstrap.FormUriServiceRegistration.SetInstance(formService);
            Neptuo.TemplateEngine.Web.InitScript.viewActivator = new Neptuo.TemplateEngine.Web.StaticViewActivator.ctor(container);
            Neptuo.TemplateEngine.Web.InitScript.historyState = new Neptuo.TemplateEngine.Web.HistoryState.ctor();
            Neptuo.TemplateEngine.Web.InitScript.mainView = new Neptuo.TemplateEngine.Web.MainView.ctor(Neptuo.TemplateEngine.Web.InitScript.viewActivator);
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IPartialWriter.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IMainView.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IHistoryState.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Permissions.IPermissionProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.Controllers.IControllerRegistry.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Navigation.Bootstrap.IFormUriRegistry.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Navigation.IFormUriService.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.GlobalNavigationCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IViewActivator.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.IGuidProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.DataContextStorage.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.TemplateContentStorageStack.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IRequestContext.ctor, Neptuo.TemplateEngine.Web.CompositeRequestContext.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IValueConverterService.ctor, Neptuo.TemplateEngine.Web.ValueConverterService.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IBindingManager.ctor, Neptuo.TemplateEngine.Web.BindingManagerBase.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IParameterProvider.ctor, Neptuo.TemplateEngine.Web.AllParameterProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IParameterProviderFactory.ctor, Neptuo.TemplateEngine.Web.ParameterProviderFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.ICurrentUrlProvider.ctor, Neptuo.TemplateEngine.Web.UrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.Templates.IVirtualUrlProvider.ctor, Neptuo.TemplateEngine.Web.UrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.IStackStorage$1.ctor, Neptuo.TemplateEngine.StackStorage$1.ctor, container)))))))), new Neptuo.TemplateEngine.Web.TemplateContentStorageStack.ctor()), new Neptuo.TemplateEngine.Web.DataContextStorage.ctor()), new Neptuo.SequenceGuidProvider.ctor("guid", 1)), Neptuo.TemplateEngine.Web.InitScript.viewActivator), new Neptuo.TemplateEngine.Web.GlobalNavigationCollection.ctor()), formService), formService), new Neptuo.TemplateEngine.Web.Controllers.ControllerRegistryBase.ctor()), new Neptuo.TemplateEngine.Permissions.OptimisticPermissionProvider.ctor()), Neptuo.TemplateEngine.Web.InitScript.historyState), Neptuo.TemplateEngine.Web.InitScript.mainView), Neptuo.TemplateEngine.Web.InitScript.mainView);
            return container;
        },
        RunBootstrapTasks: function (objectBuilder){
            var taskFactory = function (type){
                return objectBuilder.Resolve(type, null);
            };
            var constrainFactory = function (type){
                return objectBuilder.Resolve(type, null);
            };
            var bootstrapper = new Neptuo.Bootstrap.AutomaticBootstrapper.ctor$$Func$2$Type$IBootstrapTask$$IEnumerable$1$Type$$IBootstrapConstraintProvider(taskFactory, JsCompiler.NewTypes, new Neptuo.Bootstrap.Constraints.AttributeConstraintProvider.ctor(constrainFactory));
            bootstrapper.Initialize();
        },
        Init: function (){
            Neptuo.TemplateEngine.Web.InitScript.dependencyContainer = Neptuo.TemplateEngine.Web.InitScript.CreateDependencyContainer();
            Neptuo.Converts.get_Repository().Add(Typeof(Object), Typeof(Neptuo.TemplateEngine.Web.PartialResponse.ctor), new Neptuo.TemplateEngine.Web.PartialResponseConverter.ctor());
            Neptuo.TemplateEngine.Web.InitScript.RunBootstrapTasks(Neptuo.TemplateEngine.Web.InitScript.dependencyContainer);
            Neptuo.TemplateEngine.Web.InitScript.historyState.add_OnPop(Neptuo.TemplateEngine.Web.InitScript.historyState_OnPop);
            Neptuo.TemplateEngine.Web.InitScript.mainView.add_OnLinkClick(Neptuo.TemplateEngine.Web.InitScript.mainView_OnLinkClick);
            Neptuo.TemplateEngine.Web.InitScript.mainView.add_OnGetFormSubmit(Neptuo.TemplateEngine.Web.InitScript.mainView_OnGetFormSubmit);
            Neptuo.TemplateEngine.Web.InitScript.mainView.add_OnPostFormSubmit(Neptuo.TemplateEngine.Web.InitScript.mainView_OnPostFormSubmit);
        },
        historyState_OnPop: function (historyItem){
            if (historyItem != null){
                if (historyItem.FormData != null)
                    Neptuo.TemplateEngine.Web.InitScript.FormRequestContext = new Neptuo.TemplateEngine.Web.FormRequestContext.ctor(historyItem.ToUpdate, historyItem.FormData, historyItem.EventName, historyItem.Url);
                else
                    Neptuo.TemplateEngine.Web.InitScript.FormRequestContext = null;
                Neptuo.TemplateEngine.Web.InitScript.RenderUrl(historyItem.Url, System.String.Join$$String$$IEnumerable$1$String(",", historyItem.ToUpdate), null);
            }
            else {
                Neptuo.TemplateEngine.Web.InitScript.FormRequestContext = null;
                Neptuo.TemplateEngine.Web.InitScript.RenderUrl(location.href, "Body", null);
            }
        },
        MapView: function (url){
            if (url.Contains("/Home.aspx"))
                return "~/Views/Home.view";
            if (url.Contains("/Accounts/UserList.aspx"))
                return "~/Views/Accounts/UserList.view";
            if (url.Contains("/Accounts/UserEdit.aspx"))
                return "~/Views/Accounts/UserEdit.view";
            if (url.Contains("/Accounts/RoleList.aspx"))
                return "~/Views/Accounts/RoleList.view";
            if (url.Contains("/Accounts/RoleEdit.aspx"))
                return "~/Views/Accounts/RoleEdit.view";
            return null;
        },
        mainView_OnLinkClick: function (newUrl, toUpdate){
            Neptuo.TemplateEngine.Web.InitScript.NavigateToUrl(newUrl, System.String.Join$$String$$IEnumerable$1$String(",", toUpdate), "", null);
        },
        mainView_OnGetFormSubmit: function (newUrl, toUpdate){
            Neptuo.TemplateEngine.Web.InitScript.NavigateToUrl(newUrl, System.String.Join$$String$$IEnumerable$1$String(",", toUpdate), "", null);
        },
        mainView_OnPostFormSubmit: function (context){
            Neptuo.TemplateEngine.Web.InitScript.FormRequestContext = context;
            Neptuo.TemplateEngine.Web.InitScript.historyState.Replace(new Neptuo.TemplateEngine.Web.HistoryItem.ctor(context.FormUrl, context.ToUpdate, context));
            if (!Neptuo.TemplateEngine.Web.InitScript.InvokeControllers(context.Parameters)){
                alert("Event: " + context.EventName);
                console.log(context.Parameters);
                var headers = new Object();
                headers["X-EngineRequestType"] = "Partial";
                $.ajax({
                    url: context.FormUrl,
                    type: "POST",
                    data: context.Parameters,
                    headers: headers,
                    success: Neptuo.TemplateEngine.Web.InitScript.OnFormSubmitSuccess
                });
            }
        },
        NavigateToUrl: function (newUrl, toUpdate, title, initContainer){
            var viewPath = Neptuo.TemplateEngine.Web.InitScript.MapView(newUrl);
            Neptuo.TemplateEngine.Web.InitScript.historyState.Push(new Neptuo.TemplateEngine.Web.HistoryItem.ctor(newUrl, null, null));
            Neptuo.TemplateEngine.Web.InitScript.RenderUrl(newUrl, toUpdate, initContainer);
        },
        RenderUrl: function (newUrl, toUpdate, initContainer){
            var viewPath = Neptuo.TemplateEngine.Web.InitScript.MapView(newUrl);
            if (viewPath == null){
                alert("No view for: " + newUrl);
                return;
            }
            var container = Neptuo.TemplateEngine.Web.InitScript.dependencyContainer.CreateChildContainer();
            if (initContainer != null)
                initContainer(container);
            var partialsToUpdate = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            if (!System.String.IsNullOrEmpty(toUpdate)){
                for (var $i3 = 0,$t3 = toUpdate.Split$$Char$Array(","),$l3 = $t3.length,partialToUpdate = $t3[$i3]; $i3 < $l3; $i3++, partialToUpdate = $t3[$i3])
                    partialsToUpdate.Add(partialToUpdate);
            }
            else {
                partialsToUpdate.Add("Body");
            }
            Neptuo.TemplateEngine.Web.InitScript.mainView.RenderView(viewPath, partialsToUpdate.ToArray(), container);
        },
        OnFormSubmitSuccess: function (response, status, sender){
            var partialResponse;
            if ((function (){
                var $1 = {
                    Value: partialResponse
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Object, Neptuo.TemplateEngine.Web.PartialResponse.ctor, response, $1);
                partialResponse = $1.Value;
                return $res;
            })()){
                var navigationUrl = null;
                if (partialResponse.get_Navigation() != null)
                    navigationUrl = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Templates.IVirtualUrlProvider.ctor, Neptuo.TemplateEngine.Web.InitScript.dependencyContainer).ResolveUrl(partialResponse.get_Navigation());
                else
                    navigationUrl = location.pathname;
                Neptuo.TemplateEngine.Web.InitScript.NavigateToUrl(navigationUrl, System.String.Join$$String$$IEnumerable$1$String(",", Neptuo.TemplateEngine.Web.InitScript.FormRequestContext.ToUpdate), "Form submitted", function (container){
                    Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.MessageStorage.ctor, container, partialResponse.get_Messages());
                });
                Neptuo.TemplateEngine.Web.InitScript.FormRequestContext = null;
            }
            else {
                alert(status);
            }
        },
        InvokeControllers: function (data){
            var container = Neptuo.TemplateEngine.Web.InitScript.dependencyContainer.CreateChildContainer();
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IParameterProvider.ctor, container, new Neptuo.TemplateEngine.Web.ParameterProvider.ctor(Neptuo.TemplateEngine.Web.InitScript.TransformParameters(data)));
            var controllerRegistry = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.TemplateEngine.Web.Controllers.IControllerRegistry.ctor, container);
            var viewData = new Neptuo.TemplateEngine.Web.Controllers.ViewDataCollection.ctor();
            var modelBinder = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.TemplateEngine.Web.Controllers.Binders.IModelBinder.ctor, container);
            var localNavigations = new Neptuo.TemplateEngine.Web.NavigationCollection.ctor();
            var isControllerExecuted = false;
            for (var i = 0; i < data.length; i++){
                var key = data[i]["name"];
                var controller;
                if ((function (){
                    var $1 = {
                        Value: controller
                    };
                    var $res = controllerRegistry.TryGet(key, $1);
                    controller = $1.Value;
                    return $res;
                })()){
                    controller.Execute(new Neptuo.TemplateEngine.Web.Controllers.ControllerContext.ctor(key, viewData, modelBinder, localNavigations));
                    isControllerExecuted = true;
                }
            }
            return isControllerExecuted;
        },
        TransformParameters: function (data){
            var parameters = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            for (var i = 0; i < data.length; i++)
                parameters.set_Item$$TKey(data[i]["name"], data[i]["value"]);
            return parameters;
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$InitScript);
var Neptuo$TemplateEngine$Web$UrlProvider = {
    fullname: "Neptuo.TemplateEngine.Web.UrlProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Web.ICurrentUrlProvider"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        ResolveUrl: function (path){
            return path.Replace$$String$$String("~/", "/");
        },
        GetCurrentUrl: function (){
            return location.href;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$UrlProvider);
var Neptuo$TemplateEngine$Web$ParameterProviderFactory = {
    fullname: "Neptuo.TemplateEngine.Web.ParameterProviderFactory",
    baseTypeName: "System.Object",
    staticDefinition: {
        ParseQueryString: function (parameters){
            var queryString = location.search;
            if (System.String.IsNullOrEmpty(queryString))
                return;
            if (queryString.StartsWith$$String("?"))
                queryString = queryString.substr(1);
            var keyValues = queryString.Split$$Char$Array("&");
            for (var $i4 = 0,$l4 = keyValues.length,keyValue = keyValues[$i4]; $i4 < $l4; $i4++, keyValue = keyValues[$i4]){
                var param = keyValue.Split$$Char$Array("=");
                if (param.length == 2)
                    parameters.set_Item$$TKey(param[0], param[1]);
                else
                    parameters.set_Item$$TKey(param[0], null);
            }
        },
        ParseFormRequest: function (parameters){
            if (Neptuo.TemplateEngine.Web.InitScript.FormRequestContext != null){
                var source = Neptuo.TemplateEngine.Web.InitScript.FormRequestContext.Parameters;
                for (var i = 0; i < source.length; i++){
                    var parameter = source[i];
                    parameters.set_Item$$TKey(parameter["name"], parameter["value"]);
                }
            }
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IParameterProviderFactory"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Provider: function (providerType){
            var parameters = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            switch (providerType){
                case 0:
                    Neptuo.TemplateEngine.Web.ParameterProviderFactory.ParseQueryString(parameters);
                    Neptuo.TemplateEngine.Web.ParameterProviderFactory.ParseFormRequest(parameters);
                    break;
                case 1:
                    Neptuo.TemplateEngine.Web.ParameterProviderFactory.ParseQueryString(parameters);
                    break;
                case 2:
                    Neptuo.TemplateEngine.Web.ParameterProviderFactory.ParseFormRequest(parameters);
                    break;
                default:
                    break;
            }
            return new Neptuo.TemplateEngine.Web.ParameterProvider.ctor(parameters);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$ParameterProviderFactory);
var Neptuo$TemplateEngine$Web$ParameterProvider = {
    fullname: "Neptuo.TemplateEngine.Web.ParameterProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IParameterProvider"],
    Kind: "Class",
    definition: {
        ctor: function (parameters){
            this._Parameters = null;
            System.Object.ctor.call(this);
            this.set_Parameters(parameters);
        },
        Parameters$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.String]]",
        get_Parameters: function (){
            return this._Parameters;
        },
        set_Parameters: function (value){
            this._Parameters = value;
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function (){
            return this.get_Parameters().get_Keys();
        },
        TryGet: function (key, value){
            var targetValue;
            if ((function (){
                var $1 = {
                    Value: targetValue
                };
                var $res = this.get_Parameters().TryGetValue(key, $1);
                targetValue = $1.Value;
                return $res;
            }).call(this)){
                value.Value = targetValue;
                return true;
            }
            value.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Generic.Dictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$ParameterProvider);
var Neptuo$TemplateEngine$Web$AllParameterProvider = {
    fullname: "Neptuo.TemplateEngine.Web.AllParameterProvider",
    baseTypeName: "Neptuo.TemplateEngine.Web.ParameterProvider",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.TemplateEngine.Web.ParameterProvider.ctor.call(this, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor));
            Neptuo.TemplateEngine.Web.ParameterProviderFactory.ParseQueryString(this.get_Parameters());
            Neptuo.TemplateEngine.Web.ParameterProviderFactory.ParseFormRequest(this.get_Parameters());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$AllParameterProvider);
var Neptuo$TemplateEngine$Web$FormRequestContext = {
    fullname: "Neptuo.TemplateEngine.Web.FormRequestContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (toUpdate, parameters, eventName, formUrl){
            this.ToUpdate = null;
            this.Parameters = null;
            this.EventName = null;
            this.FormUrl = null;
            System.Object.ctor.call(this);
            this.ToUpdate = toUpdate;
            this.Parameters = parameters;
            this.EventName = eventName;
            this.FormUrl = formUrl;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String[]", "SharpKit.JavaScript.JsArray", "System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$FormRequestContext);


