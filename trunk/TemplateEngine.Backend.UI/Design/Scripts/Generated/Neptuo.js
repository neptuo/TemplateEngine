/* Generated by SharpKit 5 v5.3.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};
function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};
function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Collections$ObjectModel$IITemsSource = {fullname: "Neptuo.Collections.ObjectModel.IITemsSource", baseTypeName: "System.Object", assemblyName: "Neptuo", interfaceNames: ["System.Collections.IEnumerable"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Collections$ObjectModel$IITemsSource);
var Neptuo$Collections$ObjectModel$DictionaryStringValueProvider =
{
    fullname: "Neptuo.Collections.ObjectModel.DictionaryStringValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IStringValueProvider$1"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        GetValue: function (model, key)
        {
            if (model.ContainsKey(key))
                return model.get_Item$$TKey(key);
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$ObjectModel$DictionaryStringValueProvider);
var Neptuo$ComponentModel$Converters$ConverterBase$2 =
{
    fullname: "Neptuo.ComponentModel.Converters.ConverterBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter$2"],
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, TTarget)
        {
            this.TSource = TSource;
            this.TTarget = TTarget;
            this._Converter = null;
            System.Object.ctor.call(this);
        },
        Converter$$: "Neptuo.OutFunc`3[[`0],[`1],[System.Boolean]]",
        get_Converter: function ()
        {
            return this._Converter;
        },
        set_Converter: function (value)
        {
            this._Converter = value;
        },
        ctor$$OutFunc$3: function (TSource, TTarget, converter)
        {
            this.TSource = TSource;
            this.TTarget = TTarget;
            this._Converter = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(converter, "converter");
            this.set_Converter(converter);
        },
        TryConvert: function (sourceValue, targetValue)
        {
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.get_Converter(), null))
                return this.get_Converter()(sourceValue, targetValue);
            throw $CreateException(new System.InvalidOperationException.ctor$$String("Override TryConvert method or provider Converter function."), new Error());
        },
        TryConvertGeneral: function (sourceType, targetType, sourceValue, targetValue)
        {
            var target;
            if ((function ()
            {
                var $1 = {Value: target};
                var $res = this.TryConvert(Cast(sourceValue, this.TSource), $1);
                target = $1.Value;
                return $res;
            }).call(this))
            {
                targetValue.Value = target;
                return true;
            }
            targetValue.Value = null;
            return false;
        }
    },
    ctors: [ {name: "ctor", parameters: []}, {name: "ctor$$OutFunc", parameters: ["Neptuo.OutFunc"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterBase$2);
var Neptuo$ComponentModel$Converters$ConverterRepository =
{
    fullname: "Neptuo.ComponentModel.Converters.ConverterRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverterRepository"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.OnSearchConverter = null;
            this._Storage = null;
            Neptuo.ComponentModel.Converters.ConverterRepository.ctor$$Dictionary$2.call(this, new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.Dictionary$2.ctor));
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.ComponentModel.Converters.IConverter]]]]",
        get_Storage: function ()
        {
            return this._Storage;
        },
        set_Storage: function (value)
        {
            this._Storage = value;
        },
        ctor$$Dictionary$2: function (storage)
        {
            this.OnSearchConverter = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(storage, "storage");
            this.set_Storage(storage);
        },
        Add: function (sourceType, targetType, converter)
        {
            Neptuo.Guard.NotNull$$Object$$String(sourceType, "sourceType");
            Neptuo.Guard.NotNull$$Object$$String(targetType, "targetType");
            Neptuo.Guard.NotNull$$Object$$String(converter, "converter");
            var storage;
            if (!(function ()
            {
                var $1 = {Value: storage};
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this))
                storage = (function ($p1)
                {
                    this.get_Storage().set_Item$$TKey(sourceType, $p1);
                    return $p1;
                }).call(this, new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.ComponentModel.Converters.IConverter.ctor));
            storage.set_Item$$TKey(targetType, converter);
            return this;
        },
        add_OnSearchConverter: function (value)
        {
            this.OnSearchConverter = $CombineDelegates(this.OnSearchConverter, value);
        },
        remove_OnSearchConverter: function (value)
        {
            this.OnSearchConverter = $RemoveDelegate(this.OnSearchConverter, value);
        },
        TryConvert$2$$TSource$$TTarget: function (TSource, TTarget, sourceValue, targetValue)
        {
            var sourceType = Typeof(TSource);
            var targetType = Typeof(TTarget);
            var converter = null;
            var storage;
            if (!(function ()
            {
                var $1 = {Value: storage};
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this) || !(function ()
            {
                var $1 = {Value: converter};
                var $res = storage.TryGetValue(targetType, $1);
                converter = $1.Value;
                return $res;
            }).call(this))
            {
                if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchConverter, null))
                    converter = this.OnSearchConverter(sourceType, targetType);
            }
            if (converter == null)
            {
                targetValue.Value = Default(TTarget);
                return false;
            }
            var genericConverter = As(converter, Neptuo.ComponentModel.Converters.IConverter$2.ctor);
            if (genericConverter != null)
                return genericConverter.TryConvert(sourceValue, targetValue);
            var targetObject;
            if ((function ()
            {
                var $1 = {Value: targetObject};
                var $res = converter.TryConvertGeneral(sourceType, targetType, sourceValue, $1);
                targetObject = $1.Value;
                return $res;
            }).call(this))
            {
                if (Is(targetObject, TTarget))
                {
                    targetValue.Value = Cast(targetObject, TTarget);
                    return true;
                }
            }
            targetValue.Value = Default(TTarget);
            return false;
        },
        TryConvert$$Type$$Type$$Object$$Object: function (sourceType, targetType, sourceValue, targetValue)
        {
            var converter = null;
            var storage;
            if (!(function ()
            {
                var $1 = {Value: storage};
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this) || !(function ()
            {
                var $1 = {Value: converter};
                var $res = storage.TryGetValue(targetType, $1);
                converter = $1.Value;
                return $res;
            }).call(this))
            {
                if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchConverter, null))
                    converter = this.OnSearchConverter(sourceType, targetType);
            }
            if (converter == null)
            {
                targetValue.Value = null;
                return false;
            }
            return converter.TryConvertGeneral(sourceType, targetType, sourceValue, targetValue);
        }
    },
    ctors: [ {name: "ctor", parameters: []}, {name: "ctor$$Dictionary", parameters: ["System.Collections.Generic.Dictionary"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterRepository);
var Neptuo$ComponentModel$Converters$ConverterSearchDelegate =
{
    fullname: "Neptuo.ComponentModel.Converters.ConverterSearchDelegate",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Object", "System.IntPtr"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterSearchDelegate);
var Neptuo$ComponentModel$Converters$IConverter = {fullname: "Neptuo.ComponentModel.Converters.IConverter", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverter);
var Neptuo$ComponentModel$Converters$IConverter$2 = {fullname: "Neptuo.ComponentModel.Converters.IConverter$2", baseTypeName: "System.Object", assemblyName: "Neptuo", interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverter$2);
var Neptuo$ComponentModel$Converters$IConverterRepository = {fullname: "Neptuo.ComponentModel.Converters.IConverterRepository", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverterRepository);
var Neptuo$ComponentModel$ReturnTypeAttribute =
{
    fullname: "Neptuo.ComponentModel.ReturnTypeAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (type)
        {
            this._Type = null;
            System.Attribute.ctor.call(this);
            this.set_Type(type);
        },
        Type$$: "System.Type",
        get_Type: function ()
        {
            return this._Type;
        },
        set_Type: function (value)
        {
            this._Type = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Type"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$ReturnTypeAttribute);
var Neptuo$Converts =
{
    fullname: "Neptuo.Converts",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            Neptuo.Converts.repository = null;
        },
        Repository$$: "Neptuo.ComponentModel.Converters.IConverterRepository",
        get_Repository: function ()
        {
            if (Neptuo.Converts.repository == null)
            {
                if (Neptuo.Converts.repository == null)
                    Neptuo.Converts.repository = new Neptuo.ComponentModel.Converters.ConverterRepository.ctor();
            }
            return Neptuo.Converts.repository;
        },
        Try$2$$TSource$$TTarget: function (TSource, TTarget, sourceValue, targetValue)
        {
            return Neptuo.Converts.get_Repository().TryConvert$2$$TSource$$TTarget(TSource, TTarget, sourceValue, targetValue);
        },
        Try$$Type$$Type$$Object$$Object: function (sourceType, targetType, sourceValue, targetValue)
        {
            return Neptuo.Converts.get_Repository().TryConvert$$Type$$Type$$Object$$Object(sourceType, targetType, sourceValue, targetValue);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Converts);
var Neptuo$DependencyProviderExtensions =
{
    fullname: "Neptuo.DependencyProviderExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Resolve$1$$IDependencyProvider: function (T, provider)
        {
            return Cast(provider.Resolve(Typeof(T), null), T);
        },
        ResolveAll$1: function (T, provider)
        {
            return Cast(provider.ResolveAll(Typeof(T)), System.Collections.Generic.IEnumerable$1.ctor);
        },
        Resolve$$IDependencyProvider$$Type: function (provider, type)
        {
            return provider.Resolve(type, null);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DependencyProviderExtensions);
var Neptuo$DependencyContainerExtensions =
{
    fullname: "Neptuo.DependencyContainerExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        RegisterInstance$1: function (T, container, instance)
        {
            return container.RegisterInstance(Typeof(T), null , instance);
        },
        RegisterType$2$$IDependencyContainer: function (TFrom, TTo, container)
        {
            return container.RegisterType(Typeof(TFrom), Typeof(TTo), null , null);
        },
        RegisterType$$IDependencyContainer$$Type$$Type$$String: function (container, from, to, name)
        {
            return container.RegisterType(from, to, name, null);
        },
        RegisterType$$IDependencyContainer$$Type$$Object: function (container, from, lifetime)
        {
            return container.RegisterType(from, from, null , lifetime);
        },
        RegisterType$1$$IDependencyContainer$$Object: function (TFrom, container, lifetime)
        {
            return container.RegisterType(Typeof(TFrom), Typeof(TFrom), null , lifetime);
        },
        RegisterType$2$$IDependencyContainer$$Object: function (TFrom, TTo, container, lifetime)
        {
            return container.RegisterType(Typeof(TFrom), Typeof(TTo), null , lifetime);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DependencyContainerExtensions);
var Neptuo$Events$EventDispatcher =
{
    fullname: "Neptuo.Events.EventDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.IEventManager", "Neptuo.Events.IEventDispatcher", "Neptuo.Events.IEventRegistry"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Registry = null;
            System.Object.ctor.call(this);
            this.set_Registry(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor));
        },
        Registry$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.List`1[[System.Object]]]]",
        get_Registry: function ()
        {
            return this._Registry;
        },
        set_Registry: function (value)
        {
            this._Registry = value;
        },
        Publish$1: function (TEvent, eventData)
        {
            if (eventData == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("eventData"), new Error());
            var eventType = Typeof(TEvent);
            var handlers;
            if ((function ()
            {
                var $1 = {Value: handlers};
                var $res = this.get_Registry().TryGetValue(eventType, $1);
                handlers = $1.Value;
                return $res;
            }).call(this))
            {
                var $it1 = handlers.GetEnumerator();
                while ($it1.MoveNext())
                {
                    var handlerFactory = $it1.get_Current();
                    handlerFactory.CreateHandler().Handle(eventData);
                }
            }
        },
        Subscribe$1: function (TEvent, factory)
        {
            var eventType = Typeof(TEvent);
            var handlers;
            if (!(function ()
            {
                var $1 = {Value: handlers};
                var $res = this.get_Registry().TryGetValue(eventType, $1);
                handlers = $1.Value;
                return $res;
            }).call(this))
            {
                handlers = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
                this.get_Registry().Add(eventType, handlers);
            }
            handlers.Add(factory);
        },
        UnSubscribe$1: function (TEvent, factory)
        {
            var eventType = Typeof(TEvent);
            var handlers;
            if ((function ()
            {
                var $1 = {Value: handlers};
                var $res = this.get_Registry().TryGetValue(eventType, $1);
                handlers = $1.Value;
                return $res;
            }).call(this))
                handlers.Remove(factory);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$EventDispatcher);
var Neptuo$Events$Handlers$GetterEventHandlerFactory$1 =
{
    fullname: "Neptuo.Events.Handlers.GetterEventHandlerFactory$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (TEvent, getter)
        {
            this.TEvent = TEvent;
            this._Getter = null;
            System.Object.ctor.call(this);
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(getter, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("getter"), new Error());
            this.set_Getter(getter);
        },
        Getter$$: "System.Func`1[[Neptuo.Events.Handlers.IEventHandler`1[[`0]]]]",
        get_Getter: function ()
        {
            return this._Getter;
        },
        set_Getter: function (value)
        {
            this._Getter = value;
        },
        CreateHandler: function ()
        {
            return this.get_Getter()();
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Func"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$Handlers$GetterEventHandlerFactory$1);
var Neptuo$Events$Handlers$IEventHandler$1 = {fullname: "Neptuo.Events.Handlers.IEventHandler$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Events$Handlers$IEventHandler$1);
var Neptuo$Events$Handlers$IEventHandlerFactory$1 = {fullname: "Neptuo.Events.Handlers.IEventHandlerFactory$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Events$Handlers$IEventHandlerFactory$1);
var Neptuo$Events$Handlers$SingletonEventHandlerFactory$1 =
{
    fullname: "Neptuo.Events.Handlers.SingletonEventHandlerFactory$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (TEvent, handler)
        {
            this.TEvent = TEvent;
            this._Handler = null;
            System.Object.ctor.call(this);
            if (handler == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("handler"), new Error());
            this.set_Handler(handler);
        },
        Handler$$: "Neptuo.Events.Handlers.IEventHandler`1[[`0]]",
        get_Handler: function ()
        {
            return this._Handler;
        },
        set_Handler: function (value)
        {
            this._Handler = value;
        },
        CreateHandler: function ()
        {
            return this.get_Handler();
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Events.Handlers.IEventHandler"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$Handlers$SingletonEventHandlerFactory$1);
var Neptuo$Events$IEventDispatcher = {fullname: "Neptuo.Events.IEventDispatcher", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Events$IEventDispatcher);
var Neptuo$Events$IEventManager = {fullname: "Neptuo.Events.IEventManager", baseTypeName: "System.Object", assemblyName: "Neptuo", interfaceNames: ["Neptuo.Events.IEventDispatcher", "Neptuo.Events.IEventRegistry"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Events$IEventManager);
var Neptuo$Events$IEventRegistry = {fullname: "Neptuo.Events.IEventRegistry", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Events$IEventRegistry);
var Neptuo$Guard =
{
    fullname: "Neptuo.Guard",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        NotNull$$Object$$String: function (argument, argumentName)
        {
            if (argument == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String(argumentName), new Error());
        },
        NotNull$$Object$$String$$String: function (argument, argumentName, message)
        {
            if (argument == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String(message, argumentName), new Error());
        },
        NotNullOrEmpty: function (argument, argumentName)
        {
            if (argument == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String(argumentName), new Error());
            if (System.String.IsNullOrEmpty(argument))
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Passed argument can\'t be empty string.", argumentName), new Error());
        },
        Positive: function (argument, argumentName)
        {
            if (argument <= 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(argumentName, "Argument must be positive (> 0)."), new Error());
        },
        PositiveOrZero: function (argument, argumentName)
        {
            if (argument < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(argumentName, "Argument must be positive or zero (>= 0)."), new Error());
        },
        Negative: function (argument, argumentName)
        {
            if (argument >= 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(argumentName, "Argument must be negative (< 0)."), new Error());
        },
        NegativeOrZero: function (argument, argumentName)
        {
            if (argument > 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(argumentName, "Argument must be negative or zero (<= 0)."), new Error());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Guard);
var Neptuo$IGuidProvider = {fullname: "Neptuo.IGuidProvider", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$IGuidProvider);
var Neptuo$Lifetimes$Mapping$ILifetimeMapping$1 = {fullname: "Neptuo.Lifetimes.Mapping.ILifetimeMapping$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Lifetimes$Mapping$ILifetimeMapping$1);
var Neptuo$Lifetimes$SingletonLifetime =
{
    fullname: "Neptuo.Lifetimes.SingletonLifetime",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Instance = null;
            System.Object.ctor.call(this);
        },
        Instance$$: "System.Object",
        get_Instance: function ()
        {
            return this._Instance;
        },
        set_Instance: function (value)
        {
            this._Instance = value;
        },
        ctor$$Object: function (instance)
        {
            this._Instance = null;
            System.Object.ctor.call(this);
            this.set_Instance(instance);
        }
    },
    ctors: [ {name: "ctor", parameters: []}, {name: "ctor$$Object", parameters: ["System.Object"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$SingletonLifetime);
var Neptuo$Globalization$CultureInfoExtensions =
{
    fullname: "Neptuo.Globalization.CultureInfoExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        TryParse: function (value, cultureInfo)
        {
            if (System.String.IsNullOrEmpty(value) || (value.get_Length() != 5 && value.get_Length() != 2))
            {
                cultureInfo.Value = null;
                return false;
            }
            var $it2 = System.Globalization.CultureInfo.GetCultures(7).GetEnumerator();
            while ($it2.MoveNext())
            {
                var item = $it2.get_Current();
                if ((value.get_Length() == 5 && item.get_Name().ToLowerInvariant() == value.ToLowerInvariant()) || (value.get_Length() == 2 && item.get_TwoLetterISOLanguageName().ToLowerInvariant() == value.ToLowerInvariant()))
                {
                    cultureInfo.Value = item;
                    return true;
                }
            }
            cultureInfo.Value = null;
            return false;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Globalization$CultureInfoExtensions);
var Neptuo$IActivator$1 = {fullname: "Neptuo.IActivator$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$IActivator$1);
var Neptuo$IDependencyContainer = {fullname: "Neptuo.IDependencyContainer", baseTypeName: "System.Object", assemblyName: "Neptuo", interfaceNames: ["Neptuo.IDependencyProvider"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$IDependencyContainer);
var Neptuo$IDependencyProvider = {fullname: "Neptuo.IDependencyProvider", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$IDependencyProvider);
var Neptuo$Lifetimes$GetterLifetime =
{
    fullname: "Neptuo.Lifetimes.GetterLifetime",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (factory)
        {
            this._Factory = null;
            System.Object.ctor.call(this);
            this.set_Factory(factory);
        },
        Factory$$: "System.Func`1[[System.Object]]",
        get_Factory: function ()
        {
            return this._Factory;
        },
        set_Factory: function (value)
        {
            this._Factory = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Func"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$GetterLifetime);
var Neptuo$Lifetimes$Mapping$ILifetimeMapper$1 = {fullname: "Neptuo.Lifetimes.Mapping.ILifetimeMapper$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Lifetimes$Mapping$ILifetimeMapper$1);
var Neptuo$Lifetimes$Mapping$LifetimeMapperBase$2 =
{
    fullname: "Neptuo.Lifetimes.Mapping.LifetimeMapperBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Lifetimes.Mapping.ILifetimeMapper$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (TBaseLifetimeManager, TLifetime)
        {
            this.TBaseLifetimeManager = TBaseLifetimeManager;
            this.TLifetime = TLifetime;
            System.Object.ctor.call(this);
        },
        Map$$Object: function (lifetime)
        {
            return this.Map$$TLifetime(Cast(lifetime, this.TLifetime));
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$Lifetimes$Mapping$LifetimeMapperBase$2);
var Neptuo$Lifetimes$Mapping$LifetimeMapping$1 =
{
    fullname: "Neptuo.Lifetimes.Mapping.LifetimeMapping$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (TBaseLifetimeManager)
        {
            this.TBaseLifetimeManager = TBaseLifetimeManager;
            this._Registry = null;
            System.Object.ctor.call(this);
            this.set_Registry(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.Lifetimes.Mapping.ILifetimeMapper$1.ctor));
        },
        Registry$$: "System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.Lifetimes.Mapping.ILifetimeMapper`1[[`0]]]]",
        get_Registry: function ()
        {
            return this._Registry;
        },
        set_Registry: function (value)
        {
            this._Registry = value;
        },
        ctor$$Dictionary$2: function (TBaseLifetimeManager, registry)
        {
            this.TBaseLifetimeManager = TBaseLifetimeManager;
            this._Registry = null;
            System.Object.ctor.call(this);
            this.set_Registry(new System.Collections.Generic.Dictionary$2.ctor$$IDictionary$2(System.Type.ctor, Neptuo.Lifetimes.Mapping.ILifetimeMapper$1.ctor, registry));
        },
        Map: function (lifetimeType, mapper)
        {
            if (System.Type.op_Equality$$Type$$Type(lifetimeType, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("lifetimeType"), new Error());
            if (mapper == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("mapper"), new Error());
            this.get_Registry().set_Item$$TKey(lifetimeType, mapper);
            return this;
        },
        Resolve: function (lifetime)
        {
            if (lifetime == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("lifetime"), new Error());
            var lifetimeType = lifetime.GetType();
            var mapper;
            if (!(function ()
            {
                var $1 = {Value: mapper};
                var $res = this.get_Registry().TryGetValue(lifetimeType, $1);
                mapper = $1.Value;
                return $res;
            }).call(this))
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("lifetime", "Unregistered lifetime."), new Error());
            return mapper.Map(lifetime);
        },
        CreateChildMapping: function ()
        {
            return new Neptuo.Lifetimes.Mapping.LifetimeMapping$1.ctor$$Dictionary$2(this.TBaseLifetimeManager, this.get_Registry());
        }
    },
    ctors: [ {name: "ctor", parameters: []}, {name: "ctor$$Dictionary", parameters: ["System.Collections.Generic.Dictionary"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$Mapping$LifetimeMapping$1);
var Neptuo$Linq$Expressions$CompiledExpression =
{
    fullname: "Neptuo.Linq.Expressions.CompiledExpression",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        BoxedGet$$: "System.Linq.Expressions.LambdaExpression"
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$Expressions$CompiledExpression);
var Neptuo$Linq$Expressions$CompiledExpression$2 =
{
    fullname: "Neptuo.Linq.Expressions.CompiledExpression$2",
    baseTypeName: "Neptuo.Linq.Expressions.CompiledExpression",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (T, TResult)
        {
            this.T = T;
            this.TResult = TResult;
            this.expression = null;
            this.function = null;
            Neptuo.Linq.Expressions.CompiledExpression.ctor.call(this);
        },
        ctor$$Expression$1: function (T, TResult, expression)
        {
            this.T = T;
            this.TResult = TResult;
            this.expression = null;
            this.function = null;
            Neptuo.Linq.Expressions.CompiledExpression.ctor.call(this);
            this.expression = expression;
            this.function = expression.Compile();
        },
        Evaluate: function (instance)
        {
            return this.function(instance);
        },
        BoxedGet$$: "System.Linq.Expressions.LambdaExpression",
        get_BoxedGet: function ()
        {
            return this.expression;
        }
    },
    ctors: [ {name: "ctor", parameters: []}, {name: "ctor$$Expression", parameters: ["System.Linq.Expressions.Expression"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$CompiledExpression$2);
var Neptuo$Linq$Expressions$DefaultTranslationOf$1 =
{
    fullname: "Neptuo.Linq.Expressions.DefaultTranslationOf$1",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Property$1$$Expression$1$$Expression$1: function (TResult, property, expression)
        {
            return Neptuo.Linq.Expressions.TranslationMap.defaultMap.Add$2$$Expression$1$$Expression$1(this.T, TResult, property, expression);
        },
        Property$1$$Expression$1: function (TResult, property)
        {
            return new Neptuo.Linq.Expressions.DefaultTranslationOf.IncompletePropertyTranslation$2.ctor(this.T, TResult, property);
        },
        Evaluate$1: function (TResult, instance, method)
        {
            var compiledExpression = Neptuo.Linq.Expressions.TranslationMap.defaultMap.Get$2(this.T, TResult, method);
            return compiledExpression.Evaluate(instance);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$Expressions$DefaultTranslationOf$1);
var Neptuo$Linq$Expressions$DefaultTranslationOf$IncompletePropertyTranslation$2 =
{
    fullname: "Neptuo.Linq.Expressions.DefaultTranslationOf.IncompletePropertyTranslation$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (T, TResult, property)
        {
            this.T = T;
            this.TResult = TResult;
            this.property = null;
            System.Object.ctor.call(this);
            this.property = property;
        },
        Is: function (expression)
        {
            return Neptuo.Linq.Expressions.DefaultTranslationOf$1.Property$1$$Expression$1$$Expression$1(this.TResult, this.property, expression);
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Linq.Expressions.Expression"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$DefaultTranslationOf$IncompletePropertyTranslation$2);
var Neptuo$Linq$Expressions$TranslationMap =
{
    fullname: "Neptuo.Linq.Expressions.TranslationMap",
    baseTypeName: "System.Collections.Generic.Dictionary$2",
    staticDefinition:
    {
        cctor: function ()
        {
            Neptuo.Linq.Expressions.TranslationMap.defaultMap = new Neptuo.Linq.Expressions.TranslationMap.ctor();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.Reflection.MemberInfo.ctor, Neptuo.Linq.Expressions.CompiledExpression.ctor);
        },
        Get$2: function (T, TResult, method)
        {
            var propertyInfo = method.get_DeclaringType().GetProperty$$String(method.get_Name().Replace$$String$$String("get_", System.String.Empty));
            return As(this.get_Item$$TKey(propertyInfo), Neptuo.Linq.Expressions.CompiledExpression$2.ctor);
        },
        Add$2$$Expression$1$$CompiledExpression$2: function (T, TResult, property, compiledExpression)
        {
            System.Collections.Generic.Dictionary$2.commonPrototype.Add.call(this, (Cast(property.get_Body(), System.Linq.Expressions.MemberExpression.ctor)).get_Member(), compiledExpression);
        },
        Add$2$$Expression$1$$Expression$1: function (T, TResult, property, expression)
        {
            var compiledExpression = new Neptuo.Linq.Expressions.CompiledExpression$2.ctor$$Expression$1(T, TResult, expression);
            this.Add$2$$Expression$1$$CompiledExpression$2(T, TResult, property, compiledExpression);
            return compiledExpression;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$TranslationMap);
var Neptuo$OutFunc$3 =
{
    fullname: "Neptuo.OutFunc$3",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, TOutput, TReturn, obj, func)
        {
            this.T = T;
            this.TOutput = TOutput;
            this.TReturn = TReturn;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Object", "System.IntPtr"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$OutFunc$3);
var Neptuo$VersionInfo =
{
    fullname: "Neptuo.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            Neptuo.VersionInfo.Version = "2.8.0";
        },
        GetVersion: function ()
        {
            return new System.Version.ctor$$String("2.8.0");
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$VersionInfo);
var Neptuo$Reflection$ReflectionHelper =
{
    fullname: "Neptuo.Reflection.ReflectionHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetAttribute$1: function (T, member)
        {
            var attrs = Cast(member.GetCustomAttributes$$Type$$Boolean(Typeof(T), true), Array.ctor);
            if (attrs.get_Length() == 1)
                return attrs[0];
            else
                return null;
        },
        GetTypesInNamespace: function (newNamespace)
        {
            var targetAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            var parts = newNamespace.Split$$Char$Array(",");
            if (parts.get_Length() == 2)
                targetAssembly = System.Reflection.Assembly.Load$$String(parts[1]);
            return System.Linq.Enumerable.ToList$1(System.Type.ctor, System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(System.Type.ctor, targetAssembly.GetTypes(), function (t)
            {
                return t.get_Namespace() == parts[0];
            }));
        },
        GetAnnotatedProperties$1: function (T, type)
        {
            var result = new System.Collections.Generic.List$1.ctor(System.Reflection.PropertyInfo.ctor);
            var $it3 = type.GetProperties().GetEnumerator();
            while ($it3.MoveNext())
            {
                var prop = $it3.get_Current();
                if (prop.GetCustomAttributes$$Type$$Boolean(Typeof(T), true).get_Length() == 1)
                    result.Add(prop);
            }
            return result;
        },
        IsGenericType$2$$Type: function (TAssignable, TArgument, testedType)
        {
            return Neptuo.Reflection.ReflectionHelper.IsGenericType$$Type$$Type$$Type(testedType, Typeof(TAssignable), Typeof(TArgument));
        },
        IsGenericType$1$$Type: function (TAssignable, testedType)
        {
            return Neptuo.Reflection.ReflectionHelper.IsGenericType$$Type$$Type(testedType, Typeof(TAssignable));
        },
        IsGenericType$$Type$$Type$$Type: function (testedType, assignableType, argumentType)
        {
            if (System.Type.op_Equality$$Type$$Type(argumentType, null))
                return false;
            return assignableType.IsAssignableFrom(testedType) && testedType.get_IsGenericType() && (testedType.GetGenericArguments()[0].IsAssignableFrom(argumentType) || argumentType.IsAssignableFrom(testedType.GetGenericArguments()[0]));
        },
        IsGenericType$$Type$$Type: function (testedType, assignableType)
        {
            return assignableType.IsAssignableFrom(testedType) && testedType.get_IsGenericType();
        },
        GetGenericArgument: function (type, index)
        {
            if (!type.get_IsGenericType())
                return null;
            return type.GetGenericArguments()[index];
        },
        CanBeUsedInMarkup: function (type, requireDefaultCtor)
        {
            if (type.get_IsInterface())
                return false;
            if (type.get_IsAbstract())
                return false;
            if (requireDefaultCtor)
            {
                if (System.Reflection.ConstructorInfo.op_Equality$$ConstructorInfo$$ConstructorInfo(type.GetConstructor$$Type$Array(new Array(0)), null))
                    return false;
            }
            return true;
        },
        PropertyName$$Expression$1: function (propertyGetter)
        {
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$1$$Expression$1: function (T, propertyGetter)
        {
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$2$$Expression$1: function (T, TResult, propertyGetter)
        {
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        MethodName$2$$Expression$1: function (T, TParam1, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$3$$Expression$1: function (T, TParam1, TParam2, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$4$$Expression$1: function (T, TParam1, TParam2, TParam3, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$1$$Expression$1: function (T, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$5$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Reflection$ReflectionHelper);
var Neptuo$Security$Cryptography$HashHelper =
{
    fullname: "Neptuo.Security.Cryptography.HashHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Sha1: function (text)
        {
            var hasher = System.Security.Cryptography.SHA1.Create();
            var hash = hasher.ComputeHash$$Byte$Array(System.Text.Encoding.get_UTF8().GetBytes$$String(text));
            var result = new System.Text.StringBuilder.ctor();
            var $it4 = hash.GetEnumerator();
            while ($it4.MoveNext())
            {
                var hashPart = $it4.get_Current();
                result.Append$$String(hashPart.ToString$$String("X2"));
            }
            return result.ToString();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Security$Cryptography$HashHelper);
var Neptuo$Linq$Expressions$TypeHelper =
{
    fullname: "Neptuo.Linq.Expressions.TypeHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        PropertyName$1$$Expression$1: function (T, propertyGetter)
        {
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$2$$Expression$1: function (T, TResult, propertyGetter)
        {
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        MethodName$2$$Expression$1: function (T, TParam1, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$3$$Expression$1: function (T, TParam1, TParam2, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$4$$Expression$1: function (T, TParam1, TParam2, TParam3, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$1$$Expression$1: function (T, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$5$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, propertyGetter)
        {
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$TypeHelper);
var Neptuo$SequenceGuidProvider =
{
    fullname: "Neptuo.SequenceGuidProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IGuidProvider"],
    Kind: "Class",
    definition:
    {
        ctor: function (prefix, offset)
        {
            this.prefix = null;
            this.offset = 0;
            System.Object.ctor.call(this);
            this.prefix = prefix;
            this.offset = offset;
        },
        Next: function ()
        {
            return this.prefix + (++this.offset);
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String", "System.Int32"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$SequenceGuidProvider);
var Neptuo$StateMachines$IStateMachineState$2 = {fullname: "Neptuo.StateMachines.IStateMachineState$2", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$StateMachines$IStateMachineState$2);
var Neptuo$StateMachines$IStringState$1 = {fullname: "Neptuo.StateMachines.IStringState$1", baseTypeName: "System.Object", assemblyName: "Neptuo", interfaceNames: ["Neptuo.StateMachines.IStateMachineState$2"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$StateMachines$IStringState$1);
var Neptuo$StateMachines$StateMachine$2 =
{
    fullname: "Neptuo.StateMachines.StateMachine$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (TItem, TState, initialState)
        {
            this.TItem = TItem;
            this.TState = TState;
            this.OnEnterState = null;
            this.OnLeaveState = null;
            this._InitialState = null;
            System.Object.ctor.call(this);
            if (initialState == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("initialState"), new Error());
            this.set_InitialState(initialState);
        },
        InitialState$$: "`1",
        get_InitialState: function ()
        {
            return this._InitialState;
        },
        set_InitialState: function (value)
        {
            this._InitialState = value;
        },
        add_OnEnterState: function (value)
        {
            this.OnEnterState = $CombineDelegates(this.OnEnterState, value);
        },
        remove_OnEnterState: function (value)
        {
            this.OnEnterState = $RemoveDelegate(this.OnEnterState, value);
        },
        add_OnLeaveState: function (value)
        {
            this.OnLeaveState = $CombineDelegates(this.OnLeaveState, value);
        },
        remove_OnLeaveState: function (value)
        {
            this.OnLeaveState = $RemoveDelegate(this.OnLeaveState, value);
        },
        OnEnterConcreteState$1: function (TConcreteState, handler)
        {
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(handler, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("handler"), new Error());
            this.add_OnEnterState($CreateAnonymousDelegate(this, function (sender, e)
            {
                if (System.Type.op_Equality$$Type$$Type(e.get_State().GetType(), Typeof(TConcreteState)))
                    handler(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(TConcreteState, Cast(e.get_State(), TConcreteState)));
            }));
        },
        OnLeaveConcreteState$1: function (TConcreteState, handler)
        {
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(handler, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("handler"), new Error());
            this.add_OnLeaveState($CreateAnonymousDelegate(this, function (sender, e)
            {
                if (System.Type.op_Equality$$Type$$Type(e.get_State().GetType(), Typeof(TConcreteState)))
                    handler(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(TConcreteState, Cast(e.get_State(), TConcreteState)));
            }));
        },
        Process: function (items)
        {
            if (items == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("items"), new Error());
            var currentState = this.get_InitialState();
            var index = 0;
            var $it5 = items.GetEnumerator();
            while ($it5.MoveNext())
            {
                var item = $it5.get_Current();
                var newState = currentState.Accept(item, index);
                if (newState == null)
                    throw $CreateException(new System.InvalidOperationException.ctor$$String("StateMachine in invalid state, got null new state."), new Error());
                if (newState != currentState)
                {
                    if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnLeaveState, null))
                        this.OnLeaveState(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(this.TState, currentState));
                    if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnEnterState, null))
                        this.OnEnterState(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(this.TState, newState));
                }
                currentState = newState;
                index++;
            }
            return currentState;
        }
    },
    ctors: [ {name: "ctor", parameters: ["TState"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StateMachine$2);
var Neptuo$StateMachines$StateMachineEventArgs$1 =
{
    fullname: "Neptuo.StateMachines.StateMachineEventArgs$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (TState, state)
        {
            this.TState = TState;
            this._State = null;
            System.Object.ctor.call(this);
            this.set_State(state);
        },
        State$$: "`0",
        get_State: function ()
        {
            return this._State;
        },
        set_State: function (value)
        {
            this._State = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["TState"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StateMachineEventArgs$1);
var Neptuo$StateMachines$StringState$2 =
{
    fullname: "Neptuo.StateMachines.StringState$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.StateMachines.IStringState$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (TContext, TState)
        {
            this.TContext = TContext;
            this.TState = TState;
            this._Text = null;
            this._Context = null;
            System.Object.ctor.call(this);
            this.set_Text(new System.Text.StringBuilder.ctor());
        },
        Text$$: "System.Text.StringBuilder",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        Context$$: "`0",
        get_Context: function ()
        {
            return this._Context;
        },
        set_Context: function (value)
        {
            this._Context = value;
        },
        Move$1: function (TNewState)
        {
            var newState = new TNewState();
            newState.set_Context(this.GetContextForNewState());
            return newState;
        },
        GetContextForNewState: function ()
        {
            return this.get_Context();
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$StringState$2);
var Neptuo$StringConvertBase =
{
    fullname: "Neptuo.StringConvertBase",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Convert$1: function (TType, value, func, defaultValue)
        {
            var converted = defaultValue;
            if ((function ()
            {
                var $1 = {Value: converted};
                var $res = func(value, $1);
                converted = $1.Value;
                return $res;
            })())
                return converted;
            return defaultValue;
        },
        ConvertNull$1: function (TType, value, func)
        {
            var converted = Default(TType);
            if ((function ()
            {
                var $1 = {Value: converted};
                var $res = func(value, $1);
                converted = $1.Value;
                return $res;
            })())
                return converted;
            return null;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$StringConvertBase);
var Neptuo$StringConvert$1 =
{
    fullname: "Neptuo.StringConvert$1",
    baseTypeName: "Neptuo.StringConvertBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (T, provider)
        {
            this.T = T;
            this.provider = null;
            Neptuo.StringConvertBase.ctor.call(this);
            this.provider = provider;
        },
        Value: function (model, name, defaultValue)
        {
            return (this.provider.GetValue(model, name) != null ? this.provider.GetValue(model, name) : defaultValue);
        },
        Bool: function (model, name, defaultValue)
        {
            return (this.BoolNull(model, name) != null ? this.BoolNull(model, name) : defaultValue);
        },
        BoolNull: function (model, name)
        {
            return Neptuo.StringConvertBase.ConvertNull$1(System.Boolean.ctor, this.provider.GetValue(model, name), System.Boolean.TryParse);
        },
        Int: function (model, name, defaultValue)
        {
            return (this.IntNull(model, name) != null ? this.IntNull(model, name) : defaultValue);
        },
        IntNull: function (model, name)
        {
            return Neptuo.StringConvertBase.ConvertNull$1(System.Int32.ctor, this.provider.GetValue(model, name), System.Int32.TryParse$$String$$Int32);
        },
        Long: function (model, name, defaultValue)
        {
            return (this.LongNull(model, name) != null ? this.LongNull(model, name) : defaultValue);
        },
        LongNull: function (model, name)
        {
            return Neptuo.StringConvertBase.ConvertNull$1(System.Int64.ctor, this.provider.GetValue(model, name), System.Int64.TryParse$$String$$Int64);
        },
        Decimal: function (model, name, defaultValue)
        {
            return (this.DecimalNull(model, name) != null ? this.DecimalNull(model, name) : defaultValue);
        },
        DecimalNull: function (model, name)
        {
            return Neptuo.StringConvertBase.ConvertNull$1(System.Decimal.ctor, this.provider.GetValue(model, name), System.Decimal.TryParse$$String$$Decimal);
        },
        Double: function (model, name, defaultValue)
        {
            return (this.DoubleNull(model, name) != null ? this.DoubleNull(model, name) : defaultValue);
        },
        DoubleNull: function (model, name)
        {
            return Neptuo.StringConvertBase.ConvertNull$1(System.Double.ctor, this.provider.GetValue(model, name), System.Double.TryParse$$String$$Double);
        },
        DateTime: function (model, key, defaultValue)
        {
            return (this.DateTimeNull(model, key) != null ? this.DateTimeNull(model, key) : (defaultValue != null ? defaultValue : System.DateTime.get_Now()));
        },
        DateTimeNull: function (model, key)
        {
            var value = this.provider.GetValue(model, key);
            if (value == null)
                return null;
            var dateTime;
            if ((function ()
            {
                var $1 = {Value: dateTime};
                var $res = System.DateTime.TryParse$$String$$DateTime(value, $1);
                dateTime = $1.Value;
                return $res;
            }).call(this))
                return dateTime;
            var ticks;
            if ((function ()
            {
                var $1 = {Value: ticks};
                var $res = System.Int64.TryParse$$String$$Int64(value, $1);
                ticks = $1.Value;
                return $res;
            }).call(this))
                return new System.DateTime.ctor$$Int64(ticks);
            return null;
        },
        Culture: function (model, key, defaultValue)
        {
            return (this.CultureNull(model, key) != null ? this.CultureNull(model, key) : defaultValue);
        },
        CultureNull: function (model, key)
        {
            var value = this.provider.GetValue(model, key);
            if (value == null)
                return null;
            return System.Globalization.CultureInfo.GetCultureInfo$$String(value);
        },
        Enum$1: function (TEnum, model, name, defaultValue)
        {
            return (this.EnumNull$1(TEnum, model, name) != null ? this.EnumNull$1(TEnum, model, name) : defaultValue);
        },
        EnumNull$1: function (TEnum, model, name)
        {
            var attr = this.provider.GetValue(model, name);
            if (attr != null)
            {
                var val;
                if ((function ()
                {
                    var $1 = {Value: val};
                    var $res = System.Enum.TryParse$1$$String$$TEnum(TEnum, attr, $1);
                    val = $1.Value;
                    return $res;
                }).call(this))
                    return val;
            }
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IStringValueProvider"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$StringConvert$1);
var Neptuo$IStringConvert = {fullname: "Neptuo.IStringConvert", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$IStringConvert);
var Neptuo$StringStringConvert$1 =
{
    fullname: "Neptuo.StringStringConvert$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IStringConvert"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, provider, model)
        {
            this.T = T;
            this.convert = null;
            this.model = null;
            System.Object.ctor.call(this);
            this.convert = new Neptuo.StringConvert$1.ctor(this.T, provider);
            this.model = model;
        },
        Bool: function (name, defaultValue)
        {
            return this.convert.Bool(this.model, name, defaultValue);
        },
        BoolNull: function (name)
        {
            return this.convert.BoolNull(this.model, name);
        },
        Culture: function (key, defaultValue)
        {
            return this.convert.Culture(this.model, key, defaultValue);
        },
        CultureNull: function (key)
        {
            return this.convert.CultureNull(this.model, key);
        },
        DateTime: function (key, defaultValue)
        {
            return this.convert.DateTime(this.model, key, defaultValue);
        },
        DateTimeNull: function (key)
        {
            return this.convert.DateTimeNull(this.model, key);
        },
        Decimal: function (name, defaultValue)
        {
            return this.convert.Decimal(this.model, name, defaultValue);
        },
        DecimalNull: function (name)
        {
            return this.convert.DecimalNull(this.model, name);
        },
        Double: function (name, defaultValue)
        {
            return this.convert.Double(this.model, name, defaultValue);
        },
        DoubleNull: function (name)
        {
            return this.convert.DoubleNull(this.model, name);
        },
        Enum$1: function (TEnum, name, defaultValue)
        {
            return this.convert.Enum$1(TEnum, this.model, name, defaultValue);
        },
        EnumNull$1: function (TEnum, name)
        {
            return this.convert.EnumNull$1(TEnum, this.model, name);
        },
        Int: function (key, defaultValue)
        {
            return this.convert.Int(this.model, key, defaultValue);
        },
        IntNull: function (name)
        {
            return this.convert.IntNull(this.model, name);
        },
        Long: function (name, defaultValue)
        {
            return this.convert.Long(this.model, name, defaultValue);
        },
        LongNull: function (name)
        {
            return this.convert.LongNull(this.model, name);
        },
        Value: function (name, defaultValue)
        {
            return this.convert.Value(this.model, name, defaultValue);
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IStringValueProvider", "T"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$StringStringConvert$1);
var Neptuo$IStringValueProvider$1 = {fullname: "Neptuo.IStringValueProvider$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$IStringValueProvider$1);
var Neptuo$StateMachines$StringStateMachine$1 =
{
    fullname: "Neptuo.StateMachines.StringStateMachine$1",
    baseTypeName: "Neptuo.StateMachines.StateMachine$2",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition:
    {
        ctor: function (TState, initialState)
        {
            this.TState = TState;
            Neptuo.StateMachines.StateMachine$2.ctor.call(this, System.Char.ctor, this.TState, initialState);
        }
    },
    ctors: [ {name: "ctor", parameters: ["TState"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StringStateMachine$1);
var Neptuo$Validation$IValidationResult = {fullname: "Neptuo.Validation.IValidationResult", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Validation$IValidationResult);
var Neptuo$Validation$IValidationMessage = {fullname: "Neptuo.Validation.IValidationMessage", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Validation$IValidationMessage);
var Neptuo$Validation$IValidator$1 = {fullname: "Neptuo.Validation.IValidator$1", baseTypeName: "System.Object", assemblyName: "Neptuo", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$Validation$IValidator$1);
var Neptuo$Validation$TextValidationMessage =
{
    fullname: "Neptuo.Validation.TextValidationMessage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Validation.IValidationMessage"],
    Kind: "Class",
    definition:
    {
        ctor: function (key, message)
        {
            this._Key = null;
            this._Message = null;
            System.Object.ctor.call(this);
            if (message == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("message"), new Error());
            this.set_Key(key);
            this.set_Message(message);
        },
        Key$$: "System.String",
        get_Key: function ()
        {
            return this._Key;
        },
        set_Key: function (value)
        {
            this._Key = value;
        },
        Message$$: "System.String",
        get_Message: function ()
        {
            return this._Message;
        },
        set_Message: function (value)
        {
            this._Message = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String", "System.String"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validation$TextValidationMessage);
