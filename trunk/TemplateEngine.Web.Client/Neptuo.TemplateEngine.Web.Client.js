/* Generated by SharpKit 5 v5.3.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$TemplateEngine$Web$Controls$ControlBase =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this.defaultPropertyName = null;
            this._ComponentManager = null;
            System.Object.ctor.call(this);
            this.set_ComponentManager(componentManager);
        },
        ComponentManager$$: "Neptuo.Templates.IComponentManager",
        get_ComponentManager: function ()
        {
            return this._ComponentManager;
        },
        set_ComponentManager: function (value)
        {
            this._ComponentManager = value;
        },
        DefaultPropertyName$$: "System.String",
        get_DefaultPropertyName: function ()
        {
            if (this.defaultPropertyName == null)
            {
                var attr = Neptuo.Reflection.ReflectionHelper.GetAttribute$1(System.ComponentModel.DefaultPropertyAttribute.ctor, this.GetType());
                if (attr != null)
                    this.defaultPropertyName = attr.get_Name();
            }
            return this.defaultPropertyName;
        },
        set_DefaultPropertyName: function (value)
        {
            this.defaultPropertyName = value;
        },
        OnInit: function ()
        {
        },
        Render: function (writer)
        {
        },
        InitComponent: function (component)
        {
            this.get_ComponentManager().Init(component);
        },
        RenderComponent: function (component, writer)
        {
            this.get_ComponentManager().Render(component, writer);
        },
        InitComponents$1: function (T, compoments)
        {
            if (compoments != null)
            {
                var $it1 = compoments.GetEnumerator();
                while ($it1.MoveNext())
                {
                    var component = $it1.get_Current();
                    this.InitComponent(component);
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ControlBase);
var Neptuo$TemplateEngine$Web$Controls$FileTemplate2 =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.FileTemplate2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITemplate"],
    Kind: "Class",
    definition:
    {
        ctor: function (dependencyProvider, componentManager)
        {
            this.dependencyProvider = null;
            this.componentManager = null;
            this._Path = null;
            System.Object.ctor.call(this);
            this.dependencyProvider = dependencyProvider;
            this.componentManager = componentManager;
        },
        Path$$: "System.String",
        get_Path: function ()
        {
            return this._Path;
        },
        set_Path: function (value)
        {
            this._Path = value;
        },
        CreateView: function ()
        {
            throw $CreateException(new System.NotSupportedException.ctor(), new Error());
        },
        CreateInstance: function ()
        {
            var view = this.CreateView();
            view.Setup(new Neptuo.Templates.BaseViewPage.ctor(this.componentManager), this.componentManager, this.dependencyProvider);
            view.CreateControls();
            var templateContent = new Neptuo.TemplateEngine.Web.Controls.ViewTemplateContent.ctor(view);
            this.componentManager.AddComponent$1(Neptuo.TemplateEngine.Web.Controls.ViewTemplateContent.ctor, templateContent, null);
            return templateContent;
        },
        Dispose: function ()
        {
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IDependencyProvider", "Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$FileTemplate2);
var Neptuo$TemplateEngine$Web$Controls$ITextControl = {fullname: "Neptuo.TemplateEngine.Web.Controls.ITextControl", baseTypeName: "System.Object", assemblyName: "Neptuo.TemplateEngine.Web.Client", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ITextControl);
var Neptuo$TemplateEngine$Web$Controls$ListViewControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.ListViewControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.TemplateControl",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager, storage, dataContext)
        {
            this._Source = null;
            this._ItemTemplate = null;
            this._EmptyTemplate = null;
            this._PageSize = null;
            this._PageIndex = null;
            this._DataContext = null;
            this._TotalCount = 0;
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.ctor.call(this, componentManager, storage);
            this.set_DataContext(dataContext);
        },
        Source$$: "Neptuo.TemplateEngine.Web.IListDataSource",
        get_Source: function ()
        {
            return this._Source;
        },
        set_Source: function (value)
        {
            this._Source = value;
        },
        ItemTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_ItemTemplate: function ()
        {
            return this._ItemTemplate;
        },
        set_ItemTemplate: function (value)
        {
            this._ItemTemplate = value;
        },
        EmptyTemplate$$: "Neptuo.TemplateEngine.Web.Controls.ITemplate",
        get_EmptyTemplate: function ()
        {
            return this._EmptyTemplate;
        },
        set_EmptyTemplate: function (value)
        {
            this._EmptyTemplate = value;
        },
        PageSize$$: "System.Nullable`1[[System.Int32]]",
        get_PageSize: function ()
        {
            return this._PageSize;
        },
        set_PageSize: function (value)
        {
            this._PageSize = value;
        },
        PageIndex$$: "System.Nullable`1[[System.Int32]]",
        get_PageIndex: function ()
        {
            return this._PageIndex;
        },
        set_PageIndex: function (value)
        {
            this._PageIndex = value;
        },
        DataContext$$: "Neptuo.TemplateEngine.Web.DataContextStorage",
        get_DataContext: function ()
        {
            return this._DataContext;
        },
        set_DataContext: function (value)
        {
            this._DataContext = value;
        },
        TotalCount$$: "System.Int32",
        get_TotalCount: function ()
        {
            return this._TotalCount;
        },
        set_TotalCount: function (value)
        {
            this._TotalCount = value;
        },
        OnInit: function ()
        {
            this.InitComponent(this.get_ItemTemplate());
            if (this.get_ItemTemplate() == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Missing item template.", "ItemTemplate"), new Error());
            this.InitComponent(this.get_Source());
            if (this.get_Source() == null)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("Missing data source.", "Source"), new Error());
            var itemTemplates = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var models = this.get_Source().GetData(this.get_PageIndex(), this.get_PageSize());
            this.set_TotalCount(this.get_Source().GetTotalCount());
            this.get_DataContext().Push(this, "Template");
            var isEmpty = true;
            if (isEmpty && this.get_EmptyTemplate() != null)
            {
                this.set_Template(this.get_EmptyTemplate());
            }
            else
            {
                var templateContent = (function ()
                {
                    var $v1 = new Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor(this.get_ComponentManager());
                    $v1.set_Name("Content");
                    $v1.set_Content(itemTemplates);
                    return $v1;
                }).call(this);
                this.get_ComponentManager().AddComponent$1(Neptuo.TemplateEngine.Web.Controls.TemplateContentControl.ctor, templateContent, null);
                this.InitComponent(templateContent);
                this.get_Content().Add(templateContent);
            }
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.OnInit.call(this);
            this.get_DataContext().Pop("Template");
        },
        Render: function (writer)
        {
            Neptuo.TemplateEngine.Web.Controls.TemplateControl.commonPrototype.Render.call(this, writer);
            if (this.get_PageSize() != null)
            {
                writer.Tag("ul").Attribute("class", "pagination pagination-sm");
                for (var i = 0; i < System.Math.Ceiling$$Decimal(this.get_TotalCount() / this.get_PageSize().get_Value()); i++)
                {
                    writer.Tag("li").Attribute("class", ((this.get_PageIndex() != null ? this.get_PageIndex() : 0) == i) ? "active" : "").Tag("a").Attribute("href", (i != 0) ? ("?PageIndex=" + i) : "?").Content$$Object(i + 1).CloseFullTag().CloseFullTag();
                }
                writer.CloseFullTag();
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager", "Neptuo.TemplateEngine.Web.TemplateContentStorageStack", "Neptuo.TemplateEngine.Web.DataContextStorage"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$ListViewControl);
var Neptuo$TemplateEngine$Web$Controls$LiteralControl =
{
    fullname: "Neptuo.TemplateEngine.Web.Controls.LiteralControl",
    baseTypeName: "Neptuo.TemplateEngine.Web.Controls.ControlBase",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.Controls.ITextControl"],
    Kind: "Class",
    definition:
    {
        ctor: function (componentManager)
        {
            this._Text = null;
            this._FormatString = null;
            Neptuo.TemplateEngine.Web.Controls.ControlBase.ctor.call(this, componentManager);
        },
        Text$$: "System.String",
        get_Text: function ()
        {
            return this._Text;
        },
        set_Text: function (value)
        {
            this._Text = value;
        },
        FormatString$$: "System.String",
        get_FormatString: function ()
        {
            return this._FormatString;
        },
        set_FormatString: function (value)
        {
            this._FormatString = value;
        },
        Render: function (writer)
        {
            if (!System.String.IsNullOrEmpty(this.get_FormatString()))
                writer.Content$$String(System.String.Format$$String$$Object(this.get_FormatString(), this.get_Text()));
            else
                writer.Content$$String(this.get_Text());
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.Templates.IComponentManager"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Controls$LiteralControl);
var Neptuo$TemplateEngine$Web$Client$StaticViewActivator =
{
    fullname: "Neptuo.TemplateEngine.Web.Client.StaticViewActivator",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            Neptuo.TemplateEngine.Web.Client.StaticViewActivator.mappings = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Type.ctor);
        },
        Add: function (viewPath, viewType)
        {
            Neptuo.TemplateEngine.Web.Client.StaticViewActivator.mappings.set_Item$$TKey(viewPath, viewType);
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IViewActivator"],
    Kind: "Class",
    definition:
    {
        ctor: function (dependencyProvider)
        {
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            this.dependencyProvider = dependencyProvider;
        },
        CreateView: function (path)
        {
            var viewType;
            if ((function ()
            {
                var $1 = {Value: viewType};
                var $res = Neptuo.TemplateEngine.Web.Client.StaticViewActivator.mappings.TryGetValue(path, $1);
                viewType = $1.Value;
                return $res;
            }).call(this))
                return Cast(Neptuo.DependencyProviderExtensions.Resolve$$IDependencyProvider$$Type(this.dependencyProvider, viewType), Neptuo.Templates.BaseGeneratedView.ctor);
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.IDependencyProvider"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Client$StaticViewActivator);
var Neptuo$TemplateEngine$Accounts$Web$DataSources$UserAccountDataSource =
{
    fullname: "Neptuo.TemplateEngine.Accounts.Web.DataSources.UserAccountDataSource",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IListDataSource", "Neptuo.TemplateEngine.Web.IDataSource"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Key = null;
            this._Username = null;
            System.Object.ctor.call(this);
        },
        Key$$: "System.Nullable`1[[System.Int32]]",
        get_Key: function ()
        {
            return this._Key;
        },
        set_Key: function (value)
        {
            this._Key = value;
        },
        Username$$: "System.String",
        get_Username: function ()
        {
            return this._Username;
        },
        set_Username: function (value)
        {
            this._Username = value;
        },
        GetItem: function ()
        {
            return null;
        },
        GetData: function (pageIndex, pageSize)
        {
            return new System.Collections.Generic.List$1.ctor(System.Object.ctor);
        },
        GetTotalCount: function ()
        {
            return 0;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Accounts$Web$DataSources$UserAccountDataSource);
var Neptuo$TemplateEngine$Accounts$Web$DataSources$UserRoleDataSource =
{
    fullname: "Neptuo.TemplateEngine.Accounts.Web.DataSources.UserRoleDataSource",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IListDataSource"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Key = null;
            this._Name = null;
            System.Object.ctor.call(this);
        },
        Key$$: "System.Nullable`1[[System.Int32]]",
        get_Key: function ()
        {
            return this._Key;
        },
        set_Key: function (value)
        {
            this._Key = value;
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        GetData: function (pageIndex, pageSize)
        {
            return new System.Collections.Generic.List$1.ctor(System.Object.ctor);
        },
        GetTotalCount: function ()
        {
            return 0;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Accounts$Web$DataSources$UserRoleDataSource);
var Neptuo$TemplateEngine$Web$GeneratedViewBase =
{
    fullname: "Neptuo.TemplateEngine.Web.GeneratedViewBase",
    baseTypeName: "Neptuo.Templates.BaseGeneratedView",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.urlProvider = null;
            Neptuo.Templates.BaseGeneratedView.ctor.call(this);
        },
        ResolveUrl: function (relativeUrl)
        {
            if (this.urlProvider == null)
                this.urlProvider = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Templates.IVirtualUrlProvider.ctor, this.dependencyProvider);
            return this.urlProvider.ResolveUrl(relativeUrl);
        },
        CastValueTo$1: function (T, value)
        {
            return Cast(value, T);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$GeneratedViewBase);
var Neptuo$TemplateEngine$Web$Client$InitScript =
{
    fullname: "Neptuo.TemplateEngine.Web.Client.InitScript",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Init: function (container)
        {
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IViewActivator.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.DataContextStorage.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.TemplateContentStorageStack.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IValueConverterService.ctor, Neptuo.TemplateEngine.Web.ValueConverterService.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IBindingManager.ctor, Neptuo.TemplateEngine.Web.BindingManagerBase.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IParameterProvider.ctor, Neptuo.TemplateEngine.Web.Client.ParameterProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.IParameterProviderFactory.ctor, Neptuo.TemplateEngine.Web.Client.ParameterProviderFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Web.ICurrentUrlProvider.ctor, Neptuo.TemplateEngine.Web.Client.UrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.Templates.IVirtualUrlProvider.ctor, Neptuo.TemplateEngine.Web.Client.UrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.IStackStorage$1.ctor, Neptuo.TemplateEngine.StackStorage$1.ctor, container))))))), new Neptuo.TemplateEngine.Web.TemplateContentStorageStack.ctor()), new Neptuo.TemplateEngine.Web.DataContextStorage.ctor()), new Neptuo.TemplateEngine.Web.Client.StaticViewActivator.ctor(container));
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$Client$InitScript);
var Neptuo$TemplateEngine$Web$Client$UrlProvider =
{
    fullname: "Neptuo.TemplateEngine.Web.Client.UrlProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Web.ICurrentUrlProvider"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        ResolveUrl: function (path)
        {
            return path.Replace$$String$$String("~/", "/");
        },
        GetCurrentUrl: function ()
        {
            return location.href;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Client$UrlProvider);
var Neptuo$TemplateEngine$Web$Client$ParameterProviderFactory =
{
    fullname: "Neptuo.TemplateEngine.Web.Client.ParameterProviderFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IParameterProviderFactory"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        Provider: function (providerType)
        {
            return new Neptuo.TemplateEngine.Web.Client.ParameterProvider.ctor();
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Client$ParameterProviderFactory);
var Neptuo$TemplateEngine$Web$Client$ParameterProvider =
{
    fullname: "Neptuo.TemplateEngine.Web.Client.ParameterProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Web.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IParameterProvider"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function ()
        {
            return new System.Collections.Generic.List$1.ctor(System.String.ctor);
        },
        TryGet: function (key, value)
        {
            value.Value = null;
            return false;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Client$ParameterProvider);
