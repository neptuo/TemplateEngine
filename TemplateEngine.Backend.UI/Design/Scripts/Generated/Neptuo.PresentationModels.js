/* Generated by SharpKit 5 v5.3.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$PresentationModels$BindingConverterCollection =
{
    fullname: "Neptuo.PresentationModels.BindingConverterCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IBindingConverterCollection"],
    Kind: "Class",
    definition:
    {
        ctor: function (previousCollection)
        {
            this._PreviousCollection = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            this.set_Storage(new System.Collections.Generic.Dictionary$2.ctor(Neptuo.PresentationModels.IFieldType.ctor, System.Collections.Generic.List$1.ctor));
            this.set_PreviousCollection(previousCollection);
        },
        PreviousCollection$$: "Neptuo.PresentationModels.BindingConverterCollection",
        get_PreviousCollection: function ()
        {
            return this._PreviousCollection;
        },
        set_PreviousCollection: function (value)
        {
            this._PreviousCollection = value;
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[Neptuo.PresentationModels.IFieldType],[System.Collections.Generic.List`1[[Neptuo.PresentationModels.IBindingConverter]]]]",
        get_Storage: function ()
        {
            return this._Storage;
        },
        set_Storage: function (value)
        {
            this._Storage = value;
        },
        Add: function (fieldType, converter)
        {
            if (fieldType == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("fieldType"), new Error());
            if (converter == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("converter"), new Error());
            var list;
            if (!(function ()
            {
                var $1 = {Value: list};
                var $res = this.get_Storage().TryGetValue(fieldType, $1);
                list = $1.Value;
                return $res;
            }).call(this))
            {
                list = new System.Collections.Generic.List$1.ctor(Neptuo.PresentationModels.IBindingConverter.ctor);
                this.get_Storage().Add(fieldType, list);
            }
            list.Add(converter);
            return this;
        },
        TryConvert: function (sourceValue, targetField, targetValue)
        {
            var converters;
            if ((function ()
            {
                var $1 = {Value: converters};
                var $res = this.TryGetConverters(targetField, $1);
                converters = $1.Value;
                return $res;
            }).call(this))
            {
                var $it1 = converters.GetEnumerator();
                while ($it1.MoveNext())
                {
                    var converter = $it1.get_Current();
                    if (converter.TryConvert(sourceValue, targetField, targetValue))
                        return true;
                }
            }
            targetValue.Value = null;
            return false;
        },
        TryGetConverters: function (targetField, converters)
        {
            var storageValue;
            if ((function ()
            {
                var $1 = {Value: storageValue};
                var $res = this.get_Storage().TryGetValue(targetField.get_FieldType(), $1);
                storageValue = $1.Value;
                return $res;
            }).call(this))
            {
                if (this.get_PreviousCollection() != null)
                {
                    var previousConverters;
                    if ((function ()
                    {
                        var $1 = {Value: previousConverters};
                        var $res = this.get_PreviousCollection().TryGetConverters(targetField, $1);
                        previousConverters = $1.Value;
                        return $res;
                    }).call(this))
                        storageValue.AddRange(previousConverters);
                }
                converters.Value = storageValue;
                return true;
            }
            if (this.get_PreviousCollection() != null)
                return this.get_PreviousCollection().TryGetConverters(targetField, converters);
            converters.Value = null;
            return false;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.PresentationModels.BindingConverterCollection"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$BindingConverterCollection);
var Neptuo$PresentationModels$BindingModelValueGetter =
{
    fullname: "Neptuo.PresentationModels.BindingModelValueGetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueGetter"],
    Kind: "Class",
    definition:
    {
        ctor: function (storage, converterCollection, modelDefinition)
        {
            this._Storage = null;
            this._ConverterCollection = null;
            this._ModelDefinition = null;
            System.Object.ctor.call(this);
            if (storage == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("storage"), new Error());
            if (converterCollection == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("converterCollection"), new Error());
            if (modelDefinition == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("modelDefinition"), new Error());
            this.set_Storage(storage);
            this.set_ConverterCollection(converterCollection);
            this.set_ModelDefinition(modelDefinition);
        },
        Storage$$: "Neptuo.PresentationModels.IBindingModelValueStorage",
        get_Storage: function ()
        {
            return this._Storage;
        },
        set_Storage: function (value)
        {
            this._Storage = value;
        },
        ConverterCollection$$: "Neptuo.PresentationModels.IBindingConverterCollection",
        get_ConverterCollection: function ()
        {
            return this._ConverterCollection;
        },
        set_ConverterCollection: function (value)
        {
            this._ConverterCollection = value;
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function ()
        {
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value)
        {
            this._ModelDefinition = value;
        },
        TryGetValue: function (identifier, value)
        {
            var targetField = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1$$Func$2(Neptuo.PresentationModels.IFieldDefinition.ctor, this.get_ModelDefinition().get_Fields(), $CreateAnonymousDelegate(this, function (f)
            {
                return f.get_Identifier() == identifier;
            }));
            if (targetField == null)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("identifier", System.String.Format$$String$$Object$$Object("Unnable to find field \'{0}\' in model \'{1}\'.", identifier, this.get_ModelDefinition().get_Identifier())), new Error());
            var sourceValue = this.get_Storage().GetValue(identifier);
            if (this.get_ConverterCollection().TryConvert(sourceValue, targetField, value))
                return true;
            value.Value = null;
            return false;
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.PresentationModels.IBindingModelValueStorage", "Neptuo.PresentationModels.IBindingConverterCollection", "Neptuo.PresentationModels.IModelDefinition"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$BindingModelValueGetter);
var Neptuo$PresentationModels$CopyModelValueProvider =
{
    fullname: "Neptuo.PresentationModels.CopyModelValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition:
    {
        ctor: function (modelDefinition)
        {
            this._ModelDefinition = null;
            System.Object.ctor.call(this);
            if (modelDefinition == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("modelDefinition"), new Error());
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function ()
        {
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value)
        {
            this._ModelDefinition = value;
        },
        Update: function (targetSetter, sourceGetters)
        {
            var $it2 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it2.MoveNext())
            {
                var field = $it2.get_Current();
                var value;
                var $it3 = sourceGetters.GetEnumerator();
                while ($it3.MoveNext())
                {
                    var sourceGetter = $it3.get_Current();
                    if ((function ()
                    {
                        var $1 = {Value: value};
                        var $res = sourceGetter.TryGetValue(field.get_Identifier(), $1);
                        value = $1.Value;
                        return $res;
                    }).call(this))
                        targetSetter.SetValue(field.get_Identifier(), value);
                }
            }
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.PresentationModels.IModelDefinition"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$CopyModelValueProvider);
var Neptuo$PresentationModels$BindingDictionaryValueStorage =
{
    fullname: "Neptuo.PresentationModels.BindingDictionaryValueStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IBindingModelValueStorage"],
    Kind: "Class",
    definition:
    {
        ctor: function (storage)
        {
            this._Storage = null;
            System.Object.ctor.call(this);
            if (storage == null)
                storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            this.set_Storage(storage);
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.String]]",
        get_Storage: function ()
        {
            return this._Storage;
        },
        set_Storage: function (value)
        {
            this._Storage = value;
        },
        Add: function (key, value)
        {
            this.get_Storage().Add(key, value);
            return this;
        },
        GetValue: function (identifier)
        {
            if (identifier != null)
            {
                var value;
                if ((function ()
                {
                    var $1 = {Value: value};
                    var $res = this.get_Storage().TryGetValue(identifier, $1);
                    value = $1.Value;
                    return $res;
                }).call(this))
                    return value;
            }
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Collections.Generic.Dictionary"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$BindingDictionaryValueStorage);
var Neptuo$PresentationModels$FieldDefinition =
{
    fullname: "Neptuo.PresentationModels.FieldDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldDefinition"],
    Kind: "Class",
    definition:
    {
        ctor: function (identifier, fieldType, metadata)
        {
            this._Identifier = null;
            this._FieldType = null;
            this._Metadata = null;
            System.Object.ctor.call(this);
            if (identifier == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("identifier"), new Error());
            if (fieldType == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("fieldType"), new Error());
            if (metadata == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("metadata"), new Error());
            this.set_Identifier(identifier);
            this.set_FieldType(fieldType);
            this.set_Metadata(metadata);
        },
        Identifier$$: "System.String",
        get_Identifier: function ()
        {
            return this._Identifier;
        },
        set_Identifier: function (value)
        {
            this._Identifier = value;
        },
        FieldType$$: "Neptuo.PresentationModels.IFieldType",
        get_FieldType: function ()
        {
            return this._FieldType;
        },
        set_FieldType: function (value)
        {
            this._FieldType = value;
        },
        Metadata$$: "Neptuo.PresentationModels.IFieldMetadataCollection",
        get_Metadata: function ()
        {
            return this._Metadata;
        },
        set_Metadata: function (value)
        {
            this._Metadata = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String", "Neptuo.PresentationModels.IFieldType", "Neptuo.PresentationModels.IFieldMetadataCollection"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$FieldDefinition);
var Neptuo$PresentationModels$FieldDefinitionBuilderBase =
{
    fullname: "Neptuo.PresentationModels.FieldDefinitionBuilderBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldDefinitionBuilder"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        Build: function ()
        {
            return new Neptuo.PresentationModels.FieldDefinition.ctor(this.BuildFieldIdentifier(), this.BuildFieldType(), this.BuildFieldMetadata());
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$FieldDefinitionBuilderBase);
var Neptuo$PresentationModels$IBindingConverter = {fullname: "Neptuo.PresentationModels.IBindingConverter", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IBindingConverter);
var Neptuo$PresentationModels$IBindingConverterCollection = {fullname: "Neptuo.PresentationModels.IBindingConverterCollection", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IBindingConverterCollection);
var Neptuo$PresentationModels$IBindingModelValueStorage = {fullname: "Neptuo.PresentationModels.IBindingModelValueStorage", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IBindingModelValueStorage);
var Neptuo$PresentationModels$MetadataCollectionExtensions =
{
    fullname: "Neptuo.PresentationModels.MetadataCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetOrDefault$1$$IFieldMetadataCollection$$String$$T: function (T, metadata, key, defaultValue)
        {
            var value;
            if (!(function ()
            {
                var $1 = {Value: value};
                var $res = metadata.TryGet(key, $1);
                value = $1.Value;
                return $res;
            })())
                return defaultValue;
            if (!(Is(value, T)))
                return defaultValue;
            return defaultValue;
        },
        GetOrDefault$1$$IModelMetadataCollection$$String$$T: function (T, metadata, key, defaultValue)
        {
            var value;
            if (!(function ()
            {
                var $1 = {Value: value};
                var $res = metadata.TryGet(key, $1);
                value = $1.Value;
                return $res;
            })())
                return defaultValue;
            if (!(Is(value, T)))
                return defaultValue;
            return defaultValue;
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$MetadataCollectionExtensions);
var Neptuo$PresentationModels$IFieldDefinition = {fullname: "Neptuo.PresentationModels.IFieldDefinition", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IFieldDefinition);
var Neptuo$PresentationModels$IFieldDefinitionBuilder = {fullname: "Neptuo.PresentationModels.IFieldDefinitionBuilder", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IFieldDefinitionBuilder);
var Neptuo$PresentationModels$IFieldMetadataCollection = {fullname: "Neptuo.PresentationModels.IFieldMetadataCollection", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IFieldMetadataCollection);
var Neptuo$PresentationModels$IFieldType = {fullname: "Neptuo.PresentationModels.IFieldType", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IFieldType);
var Neptuo$PresentationModels$IFieldView = {fullname: "Neptuo.PresentationModels.IFieldView", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IFieldView);
var Neptuo$PresentationModels$IModelDefinition = {fullname: "Neptuo.PresentationModels.IModelDefinition", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelDefinition);
var Neptuo$PresentationModels$IModelDefinitionBuilder = {fullname: "Neptuo.PresentationModels.IModelDefinitionBuilder", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelDefinitionBuilder);
var Neptuo$PresentationModels$IModelMetadataCollection = {fullname: "Neptuo.PresentationModels.IModelMetadataCollection", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelMetadataCollection);
var Neptuo$PresentationModels$IModelPresenter = {fullname: "Neptuo.PresentationModels.IModelPresenter", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelPresenter);
var Neptuo$PresentationModels$IModelValueGetter = {fullname: "Neptuo.PresentationModels.IModelValueGetter", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelValueGetter);
var Neptuo$PresentationModels$ModelValueGetterExtensions =
{
    fullname: "Neptuo.PresentationModels.ModelValueGetterExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetValueOrDefault$$IModelValueGetter$$String$$Object: function (getter, identifier, defaultValue)
        {
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValue;
        },
        GetValueOrDefault$$IModelValueGetter$$String$$Func$1$Object: function (getter, identifier, defaultValueGetter)
        {
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValueGetter();
        },
        GetValueOrDefault$1$$IModelValueGetter$$String$$T: function (T, getter, identifier, defaultValue)
        {
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return Cast(value, T);
            return defaultValue;
        },
        GetValueOrDefault$1$$IModelValueGetter$$String$$Func$1: function (T, getter, identifier, defaultValueGetter)
        {
            var value;
            if ((function ()
            {
                var $1 = {Value: value};
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return Cast(value, T);
            return defaultValueGetter();
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelValueGetterExtensions);
var Neptuo$PresentationModels$IModelValueProvider = {fullname: "Neptuo.PresentationModels.IModelValueProvider", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", interfaceNames: ["Neptuo.PresentationModels.IModelValueGetter", "Neptuo.PresentationModels.IModelValueSetter"], Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelValueProvider);
var Neptuo$PresentationModels$IModelValueSetter = {fullname: "Neptuo.PresentationModels.IModelValueSetter", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelValueSetter);
var Neptuo$PresentationModels$IModelView = {fullname: "Neptuo.PresentationModels.IModelView", baseTypeName: "System.Object", assemblyName: "Neptuo.PresentationModels", Kind: "Interface", ctors: [], IsAbstract: true};
JsTypes.push(Neptuo$PresentationModels$IModelView);
var Neptuo$PresentationModels$MetadataCollection =
{
    fullname: "Neptuo.PresentationModels.MetadataCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelMetadataCollection", "Neptuo.PresentationModels.IFieldMetadataCollection"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Values = null;
            System.Object.ctor.call(this);
            this.set_Values(new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor));
        },
        Values$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.Object]]",
        get_Values: function ()
        {
            return this._Values;
        },
        set_Values: function (value)
        {
            this._Values = value;
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function ()
        {
            return this.get_Values().get_Keys();
        },
        TryGet: function (key, value)
        {
            return this.get_Values().TryGetValue(key, value);
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$MetadataCollection);
var Neptuo$PresentationModels$ModelDefinitionBuilderBase =
{
    fullname: "Neptuo.PresentationModels.ModelDefinitionBuilderBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinitionBuilder"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        Build: function ()
        {
            return new Neptuo.PresentationModels.ModelDefinition.ctor(this.BuildModelIdentifier(), this.BuildFieldDefinitions(), this.BuildModelMetadata());
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinitionBuilderBase);
var Neptuo$PresentationModels$ModelPresenterBase =
{
    fullname: "Neptuo.PresentationModels.ModelPresenterBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelPresenter"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._IsPreparedCalled = false;
            this._ModelDefinition = null;
            this._ModelView = null;
            this._FieldsByIdentifier = null;
            System.Object.ctor.call(this);
            this.set_FieldsByIdentifier(new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.PresentationModels.IFieldDefinition.ctor));
        },
        IsPreparedCalled$$: "System.Boolean",
        get_IsPreparedCalled: function ()
        {
            return this._IsPreparedCalled;
        },
        set_IsPreparedCalled: function (value)
        {
            this._IsPreparedCalled = value;
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function ()
        {
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value)
        {
            this._ModelDefinition = value;
        },
        ModelView$$: "Neptuo.PresentationModels.IModelView",
        get_ModelView: function ()
        {
            return this._ModelView;
        },
        set_ModelView: function (value)
        {
            this._ModelView = value;
        },
        FieldsByIdentifier$$: "System.Collections.Generic.Dictionary`2[[System.String],[Neptuo.PresentationModels.IFieldDefinition]]",
        get_FieldsByIdentifier: function ()
        {
            return this._FieldsByIdentifier;
        },
        set_FieldsByIdentifier: function (value)
        {
            this._FieldsByIdentifier = value;
        },
        SetModel: function (modelDefinition)
        {
            if (this.get_IsPreparedCalled())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Unable to set model definition after calling Prepare."), new Error());
            this.set_ModelDefinition(modelDefinition);
            return this;
        },
        SetView: function (modelView)
        {
            if (this.get_IsPreparedCalled())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Unable to set model view after calling Prepare."), new Error());
            this.set_ModelView(modelView);
            return this;
        },
        Prepare: function ()
        {
            if (this.get_IsPreparedCalled())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Unable to call Prepare multiple times."), new Error());
            var $it4 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it4.MoveNext())
            {
                var field = $it4.get_Current();
                this.get_FieldsByIdentifier().set_Item$$TKey(field.get_Identifier(), field);
            }
            this.set_IsPreparedCalled(true);
        },
        SetData: function (getter)
        {
            var value;
            var $it5 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it5.MoveNext())
            {
                var field = $it5.get_Current();
                if ((function ()
                {
                    var $1 = {Value: value};
                    var $res = getter.TryGetValue(field.get_Identifier(), $1);
                    value = $1.Value;
                    return $res;
                }).call(this))
                    this.get_ModelView().SetValue(field.get_Identifier(), value);
            }
        },
        GetData: function (setter)
        {
            var $it6 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it6.MoveNext())
            {
                var field = $it6.get_Current();
                setter.SetValue(field.get_Identifier(), this.get_ModelView().GetValue(field.get_Identifier()));
            }
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelPresenterBase);
var Neptuo$PresentationModels$ModelViewBase =
{
    fullname: "Neptuo.PresentationModels.ModelViewBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelView"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        SetValue: function (identifier, value)
        {
            this.GetFieldViewByIdentifier(identifier).SetValue(value);
        },
        GetValue: function (identifier)
        {
            var fieldView = this.GetFieldViewByIdentifier(identifier);
            if (fieldView != null)
                return fieldView.GetValue();
            return null;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelViewBase);
var Neptuo$PresentationModels$VersionInfo =
{
    fullname: "Neptuo.PresentationModels.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            Neptuo.PresentationModels.VersionInfo.Version = "4.3.0";
        },
        GetVersion: function ()
        {
            return new System.Version.ctor$$String("4.3.0");
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$VersionInfo);
var Neptuo$PresentationModels$ModelDefinition =
{
    fullname: "Neptuo.PresentationModels.ModelDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinition"],
    Kind: "Class",
    definition:
    {
        ctor: function (identifier, fields, metadata)
        {
            this._Identifier = null;
            this._Fields = null;
            this._Metadata = null;
            System.Object.ctor.call(this);
            if (identifier == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("identifier"), new Error());
            if (fields == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("fields"), new Error());
            if (metadata == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("metadata"), new Error());
            this.set_Identifier(identifier);
            this.set_Fields(new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Neptuo.PresentationModels.IFieldDefinition.ctor, fields));
            this.set_Metadata(metadata);
        },
        Identifier$$: "System.String",
        get_Identifier: function ()
        {
            return this._Identifier;
        },
        set_Identifier: function (value)
        {
            this._Identifier = value;
        },
        Fields$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.PresentationModels.IFieldDefinition]]",
        get_Fields: function ()
        {
            return this._Fields;
        },
        set_Fields: function (value)
        {
            this._Fields = value;
        },
        Metadata$$: "Neptuo.PresentationModels.IModelMetadataCollection",
        get_Metadata: function ()
        {
            return this._Metadata;
        },
        set_Metadata: function (value)
        {
            this._Metadata = value;
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.String", "System.Collections.Generic.IEnumerable", "Neptuo.PresentationModels.IModelMetadataCollection"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinition);
var Neptuo$PresentationModels$ProxyModelDefinition =
{
    fullname: "Neptuo.PresentationModels.ProxyModelDefinition",
    baseTypeName: "Neptuo.PresentationModels.ProxyModelDefinitionBase",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition:
    {
        ctor: function (modelDefinition)
        {
            this._ModelDefinition = null;
            Neptuo.PresentationModels.ProxyModelDefinitionBase.ctor.call(this);
            if (modelDefinition == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("modelDefinition"), new Error());
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function ()
        {
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value)
        {
            this._ModelDefinition = value;
        },
        RefreshIdentifier: function ()
        {
            return this.get_ModelDefinition().get_Identifier();
        },
        RefreshFields: function ()
        {
            return this.get_ModelDefinition().get_Fields();
        },
        RefreshMetadata: function ()
        {
            return this.get_ModelDefinition().get_Metadata();
        }
    },
    ctors: [ {name: "ctor", parameters: ["Neptuo.PresentationModels.IModelDefinition"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ProxyModelDefinition);
var Neptuo$PresentationModels$ProxyModelDefinitionBase =
{
    fullname: "Neptuo.PresentationModels.ProxyModelDefinitionBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinition"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.identifier = null;
            this.fields = null;
            this.metadata = null;
            this._RequiresRefresh = false;
            System.Object.ctor.call(this);
            this.set_RequiresRefresh(true);
        },
        RequiresRefresh$$: "System.Boolean",
        get_RequiresRefresh: function ()
        {
            return this._RequiresRefresh;
        },
        set_RequiresRefresh: function (value)
        {
            this._RequiresRefresh = value;
        },
        Identifier$$: "System.String",
        get_Identifier: function ()
        {
            if (this.get_RequiresRefresh())
            {
                this.identifier = this.RefreshIdentifier();
                this.set_RequiresRefresh(false);
            }
            return this.identifier;
        },
        Fields$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.PresentationModels.IFieldDefinition]]",
        get_Fields: function ()
        {
            if (this.get_RequiresRefresh())
            {
                this.fields = this.RefreshFields();
                this.set_RequiresRefresh(false);
            }
            return this.fields;
        },
        Metadata$$: "Neptuo.PresentationModels.IModelMetadataCollection",
        get_Metadata: function ()
        {
            if (this.get_RequiresRefresh())
            {
                this.metadata = this.RefreshMetadata();
                this.set_RequiresRefresh(false);
            }
            return this.metadata;
        }
    },
    ctors: [ {name: "ctor", parameters: []}],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ProxyModelDefinitionBase);
var Neptuo$PresentationModels$TypeFieldType =
{
    fullname: "Neptuo.PresentationModels.TypeFieldType",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldType"],
    Kind: "Class",
    definition:
    {
        ctor: function (type)
        {
            this._Type = null;
            System.Object.ctor.call(this);
            if (System.Type.op_Equality$$Type$$Type(type, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("type"), new Error());
            this.set_Type(type);
        },
        Type$$: "System.Type",
        get_Type: function ()
        {
            return this._Type;
        },
        set_Type: function (value)
        {
            this._Type = value;
        },
        GetHashCode: function ()
        {
            return this.get_Type().GetHashCode();
        },
        Equals$$Object: function (obj)
        {
            if (obj == null)
                return false;
            var fieldType = As(obj, Neptuo.PresentationModels.TypeFieldType.ctor);
            if (fieldType == null)
                return false;
            return System.Type.op_Equality$$Type$$Type(fieldType.get_Type(), this.get_Type());
        }
    },
    ctors: [ {name: "ctor", parameters: ["System.Type"]}],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeFieldType);
