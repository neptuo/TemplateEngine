/* Generated by SharpKit 5 v5.3.6 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$TemplateEngine$Providers$ModelBinders$BindingValueStorage = {
    fullname: "Neptuo.TemplateEngine.Providers.ModelBinders.BindingValueStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["Neptuo.PresentationModels.IBindingModelValueStorage"],
    Kind: "Class",
    definition: {
        ctor: function (parameterProvider){
            this._ParameterProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(parameterProvider, "parameterProvider");
            this.set_ParameterProvider(parameterProvider);
        },
        ParameterProvider$$: "Neptuo.TemplateEngine.Providers.IParameterProvider",
        get_ParameterProvider: function (){
            return this._ParameterProvider;
        },
        set_ParameterProvider: function (value){
            this._ParameterProvider = value;
        },
        GetValue: function (identifier){
            Neptuo.Guard.NotNull$$Object$$String(identifier, "identifier");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.get_ParameterProvider().TryGet(identifier, $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return Cast(value, System.String.ctor);
            return null;
        },
        TryGetValue: function (identifier, targetValue){
            Neptuo.Guard.NotNull$$Object$$String(identifier, "identifier");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.get_ParameterProvider().TryGet(identifier, $1);
                value = $1.Value;
                return $res;
            }).call(this)){
                targetValue.Value = Cast(value, System.String.ctor);
                return true;
            }
            targetValue.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Providers.IParameterProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ModelBinders$BindingValueStorage);
var Neptuo$TemplateEngine$Providers$ModelBinders$IModelBinder = {
    fullname: "Neptuo.TemplateEngine.Providers.ModelBinders.IModelBinder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ModelBinders$IModelBinder);
var Neptuo$TemplateEngine$Providers$ModelBinders$ModelBinder = {
    fullname: "Neptuo.TemplateEngine.Providers.ModelBinders.ModelBinder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["Neptuo.TemplateEngine.Providers.ModelBinders.IModelBinder"],
    Kind: "Class",
    definition: {
        ctor: function (parameterProvider, modelFactory, valueProviderFactory, bindingConverters, dependencyContainer){
            this._ParameterProvider = null;
            this._ModelFactory = null;
            this._ValueProviderFactory = null;
            this._BindingConverters = null;
            this._DependencyContainer = null;
            System.Object.ctor.call(this);
            this.set_ParameterProvider(parameterProvider);
            this.set_ModelFactory(modelFactory);
            this.set_ValueProviderFactory(valueProviderFactory);
            this.set_BindingConverters(bindingConverters);
            this.set_DependencyContainer(dependencyContainer);
        },
        ParameterProvider$$: "Neptuo.TemplateEngine.Providers.IParameterProvider",
        get_ParameterProvider: function (){
            return this._ParameterProvider;
        },
        set_ParameterProvider: function (value){
            this._ParameterProvider = value;
        },
        ModelFactory$$: "Neptuo.PresentationModels.TypeModels.IModelDefinitionFactory",
        get_ModelFactory: function (){
            return this._ModelFactory;
        },
        set_ModelFactory: function (value){
            this._ModelFactory = value;
        },
        ValueProviderFactory$$: "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory",
        get_ValueProviderFactory: function (){
            return this._ValueProviderFactory;
        },
        set_ValueProviderFactory: function (value){
            this._ValueProviderFactory = value;
        },
        BindingConverters$$: "Neptuo.PresentationModels.IBindingConverterCollection",
        get_BindingConverters: function (){
            return this._BindingConverters;
        },
        set_BindingConverters: function (value){
            this._BindingConverters = value;
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        Bind$$Type: function (targetType){
            if (System.Type.op_Equality$$Type$$Type(targetType, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("targetType"), new Error());
            var instance = this.get_DependencyContainer().Resolve(targetType, null);
            return this.Bind$$Object(instance);
        },
        Bind$$Object: function (instance){
            if (instance == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("instance"), new Error());
            var modelDefinition = this.get_ModelFactory().Create(instance.GetType());
            var storage = new Neptuo.TemplateEngine.Providers.ModelBinders.BindingValueStorage.ctor(this.get_ParameterProvider());
            var copyProvider = new Neptuo.PresentationModels.CopyModelValueProvider.ctor(modelDefinition);
            var model = this.get_ValueProviderFactory().Create(instance);
            var getters = [new Neptuo.PresentationModels.BindingModelValueGetter.ctor(storage, this.get_BindingConverters(), modelDefinition)];
            copyProvider.Update(model, getters);
            return instance;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Providers.IParameterProvider", "Neptuo.PresentationModels.TypeModels.IModelDefinitionFactory", "Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory", "Neptuo.PresentationModels.IBindingConverterCollection", "Neptuo.IDependencyContainer"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ModelBinders$ModelBinder);
var Neptuo$TemplateEngine$Providers$ModelBinders$ModelBinderExtensions = {
    fullname: "Neptuo.TemplateEngine.Providers.ModelBinders.ModelBinderExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Bind$1$$IModelBinder: function (T, binder){
            return Cast(binder.Bind$$Type(Typeof(T)), T);
        },
        Bind$1$$IModelBinder$$T: function (T, binder, instance){
            return Cast(binder.Bind$$Object(instance), T);
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ModelBinders$ModelBinderExtensions);
var ConsoleApplication20$IConfiguration = {
    fullname: "ConsoleApplication20.IConfiguration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$IConfiguration);
var ConsoleApplication20$IConfigurationProperty = {
    fullname: "ConsoleApplication20.IConfigurationProperty",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$IConfigurationProperty);
var ConsoleApplication20$IConfigurationProperty$1 = {
    fullname: "ConsoleApplication20.IConfigurationProperty$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfigurationProperty"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$IConfigurationProperty$1);
var ConsoleApplication20$IUpdateableConfigurationProperty = {
    fullname: "ConsoleApplication20.IUpdateableConfigurationProperty",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$IUpdateableConfigurationProperty);
var ConsoleApplication20$IConfigurationPropertyScope = {
    fullname: "ConsoleApplication20.IConfigurationPropertyScope",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$IConfigurationPropertyScope);
var ConsoleApplication20$StaticConfigurationPropertyScope = {
    fullname: "ConsoleApplication20.StaticConfigurationPropertyScope",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfigurationPropertyScope"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetValue: function (key){
            return "false";
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(ConsoleApplication20$StaticConfigurationPropertyScope);
var ConsoleApplication20$ApplicationConfigurationPropertyScope = {
    fullname: "ConsoleApplication20.ApplicationConfigurationPropertyScope",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfigurationPropertyScope"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetValue: function (key){
            return "true";
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(ConsoleApplication20$ApplicationConfigurationPropertyScope);
var ConsoleApplication20$UserConfigurationPropertyScope = {
    fullname: "ConsoleApplication20.UserConfigurationPropertyScope",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfigurationPropertyScope"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetValue: function (key){
            return "false";
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(ConsoleApplication20$UserConfigurationPropertyScope);
var ConsoleApplication20$FormConfigurationPropertyScope = {
    fullname: "ConsoleApplication20.FormConfigurationPropertyScope",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfigurationPropertyScope"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetValue: function (key){
            return "true";
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(ConsoleApplication20$FormConfigurationPropertyScope);
var ConsoleApplication20$ConfigurationScope = {
    fullname: "ConsoleApplication20.ConfigurationScope",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ConsoleApplication20.ConfigurationScope.Static = new ConsoleApplication20.StaticConfigurationPropertyScope.ctor();
            ConsoleApplication20.ConfigurationScope.Application = new ConsoleApplication20.ApplicationConfigurationPropertyScope.ctor();
            ConsoleApplication20.ConfigurationScope.User = new ConsoleApplication20.UserConfigurationPropertyScope.ctor();
            ConsoleApplication20.ConfigurationScope.Form = new ConsoleApplication20.FormConfigurationPropertyScope.ctor();
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$ConfigurationScope);
var ConsoleApplication20$Configuration = {
    fullname: "ConsoleApplication20.Configuration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfiguration"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.DefaultScope = ConsoleApplication20.ConfigurationScope.Application;
            this.properties = new System.Collections.Generic.HashSet$1.ctor(System.Type.ctor);
            System.Object.ctor.call(this);
        },
        MapProperty$1: function (T){
            this.properties.Add(Typeof(T));
        },
        GetProperty$1: function (T){
            if (this.properties.Contains(Typeof(T))){
                var property = new T();
                var updateable = As(property, ConsoleApplication20.IUpdateableConfigurationProperty.ctor);
                if (updateable != null){
                    var value = (property.get_Scope() != null ? property.get_Scope() : this.DefaultScope).GetValue(property.get_Name());
                    updateable.SetValue(value);
                }
                return Cast(property, T);
            }
            return new T();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(ConsoleApplication20$Configuration);
var ConsoleApplication20$ConfigurationProperty$1 = {
    fullname: "ConsoleApplication20.ConfigurationProperty$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["ConsoleApplication20.IConfigurationProperty$1", "ConsoleApplication20.IUpdateableConfigurationProperty"],
    Kind: "Class",
    definition: {
        ctor: function (T, defaultValue, scope, name){
            this.T = T;
            this._Name = null;
            this._PropertyType = null;
            this._Scope = null;
            this._Value = null;
            System.Object.ctor.call(this);
            this.set_PropertyType(Typeof(this.T));
            this.set_Value(defaultValue);
            this.set_Scope(scope);
            this.set_Name((name != null ? name : this.GetType().get_FullName()));
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        PropertyType$$: "System.Type",
        get_PropertyType: function (){
            return this._PropertyType;
        },
        set_PropertyType: function (value){
            this._PropertyType = value;
        },
        Scope$$: "ConsoleApplication20.IConfigurationPropertyScope",
        get_Scope: function (){
            return this._Scope;
        },
        set_Scope: function (value){
            this._Scope = value;
        },
        Value$$: "`0",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        },
        SetValue: function (value){
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.TryParseValue(value, $1);
                target = $1.Value;
                return $res;
            }).call(this))
                this.set_Value(target);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["T", "ConsoleApplication20.IConfigurationPropertyScope", "System.String"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(ConsoleApplication20$ConfigurationProperty$1);
var ConsoleApplication20$BoolConfigurationProperty = {
    fullname: "ConsoleApplication20.BoolConfigurationProperty",
    baseTypeName: "ConsoleApplication20.ConfigurationProperty$1",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (defaultValue, scope, name){
            ConsoleApplication20.ConfigurationProperty$1.ctor.call(this, System.Boolean.ctor, defaultValue, scope, name);
        },
        TryParseValue: function (source, target){
            return System.Boolean.TryParse(source, target);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Boolean", "ConsoleApplication20.IConfigurationPropertyScope", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(ConsoleApplication20$BoolConfigurationProperty);
var Neptuo$TemplateEngine$Web$DictionaryParameterProvider = {
    fullname: "Neptuo.TemplateEngine.Web.DictionaryParameterProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["Neptuo.TemplateEngine.Providers.IParameterProvider"],
    Kind: "Class",
    definition: {
        ctor: function (parameters){
            this._Parameters = null;
            System.Object.ctor.call(this);
            this.set_Parameters(parameters);
        },
        Parameters$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.String]]",
        get_Parameters: function (){
            return this._Parameters;
        },
        set_Parameters: function (value){
            this._Parameters = value;
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function (){
            return this.get_Parameters().get_Keys();
        },
        TryGet: function (key, value){
            var targetValue;
            if ((function (){
                var $1 = {
                    Value: targetValue
                };
                var $res = this.get_Parameters().TryGetValue(key, $1);
                targetValue = $1.Value;
                return $res;
            }).call(this)){
                value.Value = targetValue;
                return true;
            }
            value.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Generic.Dictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$DictionaryParameterProvider);
var Neptuo$TemplateEngine$Providers$GlobalNavigationCollection = {
    fullname: "Neptuo.TemplateEngine.Providers.GlobalNavigationCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.TemplateEngine.Navigation.FormUri.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (name, to){
            if (name == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("name"), new Error());
            if (to == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("to"), new Error());
            this.storage.set_Item$$TKey(name, to);
            return this;
        },
        TryGetValue: function (name, to){
            if (name == null){
                to.Value = null;
                return false;
            }
            return this.storage.TryGetValue(name, to);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$GlobalNavigationCollection);
var Neptuo$TemplateEngine$Providers$ICurrentUrlProvider = {
    fullname: "Neptuo.TemplateEngine.Providers.ICurrentUrlProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ICurrentUrlProvider);
var Neptuo$TemplateEngine$Providers$IParameterProvider = {
    fullname: "Neptuo.TemplateEngine.Providers.IParameterProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$IParameterProvider);
var Neptuo$TemplateEngine$Providers$IParameterProviderFactory = {
    fullname: "Neptuo.TemplateEngine.Providers.IParameterProviderFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$IParameterProviderFactory);
var Neptuo$TemplateEngine$Providers$IRequestContext = {
    fullname: "Neptuo.TemplateEngine.Providers.IRequestContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["Neptuo.TemplateEngine.Providers.ICurrentUrlProvider", "Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Providers.IParameterProviderFactory"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$IRequestContext);
var Neptuo$TemplateEngine$Providers$Message = {
    fullname: "Neptuo.TemplateEngine.Providers.Message",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (key, text, type){
            this._Key = null;
            this._Type = Neptuo.TemplateEngine.Providers.MessageType.Error;
            this._Text = null;
            System.Object.ctor.call(this);
            if (text == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("text"), new Error());
            this.set_Key(key);
            this.set_Text(text);
            this.set_Type(type);
        },
        Key$$: "System.String",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        },
        Type$$: "Neptuo.TemplateEngine.Providers.MessageType",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String", "Neptuo.TemplateEngine.Providers.MessageType"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$Message);
var Neptuo$TemplateEngine$Providers$MessageType = {
    fullname: "Neptuo.TemplateEngine.Providers.MessageType",
    staticDefinition: {
        Error: 0,
        Info: 1,
        Warn: 2
    },
    Kind: "Enum",
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$MessageType);
var Neptuo$TemplateEngine$Providers$MessageStorage = {
    fullname: "Neptuo.TemplateEngine.Providers.MessageStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (group, key, text, type){
            if (group == null)
                group = System.String.Empty;
            var list;
            if (!(function (){
                var $1 = {
                    Value: list
                };
                var $res = this.storage.TryGetValue(group, $1);
                list = $1.Value;
                return $res;
            }).call(this)){
                list = new System.Collections.Generic.List$1.ctor(Neptuo.TemplateEngine.Providers.Message.ctor);
                this.storage.Add(group, list);
            }
            list.Add(new Neptuo.TemplateEngine.Providers.Message.ctor(key, text, type));
        },
        GetList: function (key){
            if (key == null)
                key = System.String.Empty;
            var list;
            if (!(function (){
                var $1 = {
                    Value: list
                };
                var $res = this.storage.TryGetValue(key, $1);
                list = $1.Value;
                return $res;
            }).call(this))
                return new System.Collections.Generic.List$1.ctor(Neptuo.TemplateEngine.Providers.Message.ctor);
            return list;
        },
        GetStorage: function (){
            return this.storage;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$MessageStorage);
var Neptuo$TemplateEngine$Providers$MessageStorageExtensions = {
    fullname: "Neptuo.TemplateEngine.Providers.MessageStorageExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        AddValidationResult: function (messageStorage, validationResult, group, addFillAll){
            if (!validationResult.get_IsValid()){
                if (addFillAll)
                    messageStorage.Add(group, System.String.Empty, "Please fill all required values correctly.", Neptuo.TemplateEngine.Providers.MessageType.Error);
                var $it1 = validationResult.get_Messages().GetEnumerator();
                while ($it1.MoveNext()){
                    var message = $it1.get_Current();
                    messageStorage.Add(group, message.get_Key(), message.get_Message(), Neptuo.TemplateEngine.Providers.MessageType.Error);
                }
            }
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$MessageStorageExtensions);
var Neptuo$TemplateEngine$Providers$NavigationCollection = {
    fullname: "Neptuo.TemplateEngine.Providers.NavigationCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Providers",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.items = new System.Collections.Generic.HashSet$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (name){
            if (name == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("name"), new Error());
            this.items.Add(name);
        },
        Contains: function (name){
            if (name == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("name"), new Error());
            return this.items.Contains(name);
        },
        GetEnumerator: function (){
            return this.items.GetEnumerator();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$NavigationCollection);
var Neptuo$TemplateEngine$Providers$ParameterProviderExtensions = {
    fullname: "Neptuo.TemplateEngine.Providers.ParameterProviderExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetAllParameters: function (provider){
            var result = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
            var value;
            var $it2 = provider.get_Keys().GetEnumerator();
            while ($it2.MoveNext()){
                var key = $it2.get_Current();
                if ((function (){
                    var $1 = {
                        Value: value
                    };
                    var $res = provider.TryGet(key, $1);
                    value = $1.Value;
                    return $res;
                })())
                    result.set_Item$$TKey(key, value);
            }
            return result;
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Providers",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ParameterProviderExtensions);
var Neptuo$TemplateEngine$Providers$ParameterProviderType = {
    fullname: "Neptuo.TemplateEngine.Providers.ParameterProviderType",
    staticDefinition: {
        All: 0,
        Url: 1,
        Form: 2
    },
    Kind: "Enum",
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Providers$ParameterProviderType);

