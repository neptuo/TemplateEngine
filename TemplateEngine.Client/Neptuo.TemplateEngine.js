/* Generated by SharpKit 5 v5.3.6 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$TemplateEngine$Bootstrap$PresentationModelBootstrapTask = {
    fullname: "Neptuo.TemplateEngine.Bootstrap.PresentationModelBootstrapTask",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapTask"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyContainer){
            this._DependencyContainer = null;
            System.Object.ctor.call(this);
            this.set_DependencyContainer(dependencyContainer);
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        Initialize: function (){
            var metadataReaders = new Neptuo.PresentationModels.TypeModels.MetadataReaderService.ctor();
            this.SetupMetadataReaderService(metadataReaders);
            var validators = new Neptuo.PresentationModels.Validation.MetadataValidatorCollection.ctor();
            this.SetupMetadataValidatorCollection(validators);
            var bindingConverters = new Neptuo.PresentationModels.BindingConverterCollection.ctor(null);
            this.SetupBindingConverterCollection(bindingConverters);
            Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer$$Object(Neptuo.PresentationModels.TypeModels.IModelValueProviderFactory.ctor, Neptuo.PresentationModels.TypeModels.ReflectionModelValueProviderFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer$$Object(Neptuo.PresentationModels.TypeModels.IModelDefinitionFactory.ctor, Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Providers.ModelBinders.IModelBinder.ctor, Neptuo.TemplateEngine.Providers.ModelBinders.ModelBinder.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.IBindingConverterCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.BindingConverterCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.Validation.IMetadataValidatorCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.Validation.MetadataValidatorCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.PresentationModels.TypeModels.MetadataReaderService.ctor, this.get_DependencyContainer(), metadataReaders), validators), validators), bindingConverters), bindingConverters)), new Neptuo.Lifetimes.SingletonLifetime.ctor()), new Neptuo.Lifetimes.SingletonLifetime.ctor());
        },
        SetupMetadataReaderService: function (readerService){
        },
        SetupMetadataValidatorCollection: function (validators){
        },
        SetupBindingConverterCollection: function (bindingConverters){
            Neptuo.PresentationModels.BindingConverters.BindingConverterCollectionExtensions.AddStandart(bindingConverters);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyContainer"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Bootstrap$PresentationModelBootstrapTask);
var Neptuo$TemplateEngine$ModelValueGetterListResult = {
    fullname: "Neptuo.TemplateEngine.ModelValueGetterListResult",
    baseTypeName: "Neptuo.TemplateEngine.Templates.DataSources.ListResult",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (data, totalCount){
            Neptuo.TemplateEngine.Templates.DataSources.ListResult.ctor.call(this, data, totalCount);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.IEnumerable", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$ModelValueGetterListResult);
var Neptuo$TemplateEngine$ModelValueGetterListResult$ModelValueGetter = {
    fullname: "Neptuo.TemplateEngine.ModelValueGetterListResult.ModelValueGetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueGetter"],
    Kind: "Class",
    definition: {
        ctor: function (source){
            this.source = null;
            System.Object.ctor.call(this);
            this.source = source;
        },
        TryGetValue: function (identifier, value){
            if (this.source == null){
                value.Value = null;
                return false;
            }
            if (System.String.IsNullOrEmpty(identifier)){
                value.Value = this.source;
                return true;
            }
            var currentSource = this.source;
            var exprs = identifier.Split$$Char$Array$$StringSplitOptions(["."], 1);
            for (var i = 0; i < exprs.length; i++){
                currentSource = currentSource[exprs[i]];
                if (currentSource == null)
                    break;
            }
            value.Value = currentSource;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["SharpKit.JavaScript.JsObject"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$ModelValueGetterListResult$ModelValueGetter);
var Neptuo$TemplateEngine$ModelValueGetterListResultConverter = {
    fullname: "Neptuo.TemplateEngine.ModelValueGetterListResultConverter",
    baseTypeName: "Neptuo.ComponentModel.Converters.ConverterBase$2",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.ComponentModel.Converters.ConverterBase$2.ctor.call(this, Object, Neptuo.TemplateEngine.ModelValueGetterListResult.ctor);
        },
        TryConvert: function (sourceValue, targetValue){
            var totalCount = sourceValue["TotalCount"];
            var data = sourceValue["Data"];
            targetValue.Value = new Neptuo.TemplateEngine.ModelValueGetterListResult.ctor(this.GetModelValueGetters(data), totalCount);
            return true;
        },
        GetModelValueGetters: function (sourceValue){
            var data = new System.Collections.Generic.List$1.ctor(Neptuo.PresentationModels.IModelValueGetter.ctor);
            var array = sourceValue;
            for (var i = 0; i < array.length; i++){
                var item = array[i];
                data.Add(new Neptuo.TemplateEngine.ModelValueGetterListResult.ModelValueGetter.ctor(item));
            }
            return data;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$ModelValueGetterListResultConverter);
var Neptuo$TemplateEngine$Routing$ApplicationRouter = {
    fullname: "Neptuo.TemplateEngine.Routing.ApplicationRouter",
    baseTypeName: "Neptuo.TemplateEngine.Routing.Router",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (redirectWhenNoRoute){
            this._RedirectWhenNoRoute = false;
            Neptuo.TemplateEngine.Routing.Router.ctor.call(this);
            this.set_RedirectWhenNoRoute(redirectWhenNoRoute);
        },
        RedirectWhenNoRoute$$: "System.Boolean",
        get_RedirectWhenNoRoute: function (){
            return this._RedirectWhenNoRoute;
        },
        set_RedirectWhenNoRoute: function (value){
            this._RedirectWhenNoRoute = value;
        },
        WhenNoRouteFound: function (context){
            if (this.get_RedirectWhenNoRoute())
                window.location.href = context.get_Url();
            else
                alert("Route not found for: " + context.get_Url());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Boolean"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Routing$ApplicationRouter);
var Neptuo$TemplateEngine$Routing$TemplateRoute = {
    fullname: "Neptuo.TemplateEngine.Routing.TemplateRoute",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Routing.IRoute"],
    Kind: "Class",
    definition: {
        ctor: function (urlSuffix, application){
            this._UrlSuffix = null;
            this._Application = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(application, "application");
            this.set_UrlSuffix(urlSuffix);
            this.set_Application(application);
        },
        UrlSuffix$$: "System.String",
        get_UrlSuffix: function (){
            return this._UrlSuffix;
        },
        set_UrlSuffix: function (value){
            this._UrlSuffix = value;
        },
        Application$$: "Neptuo.TemplateEngine.Web.IApplication",
        get_Application: function (){
            return this._Application;
        },
        set_Application: function (value){
            this._Application = value;
        },
        GetRouteData: function (context){
            var viewPath = this.MapView(context.get_Url());
            if (System.String.IsNullOrEmpty(viewPath))
                return null;
            var childContainer = this.get_Application().get_DependencyContainer().CreateChildContainer();
            var toUpdate = this.get_Application().get_DefaultToUpdate();
            if (context.get_CustomValues().ContainsKey("ToUpdate")){
                var value = Cast(context.get_CustomValues().get_Item$$TKey("ToUpdate"), Array);
                if (value != null)
                    toUpdate = value;
            }
            if (context.get_CustomValues().ContainsKey("Messages"))
                Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Providers.MessageStorage.ctor, childContainer, Cast(context.get_CustomValues().get_Item$$TKey("Messages"), Neptuo.TemplateEngine.Providers.MessageStorage.ctor));
            return new Neptuo.TemplateEngine.Routing.RouteData.ctor(context, new Neptuo.TemplateEngine.Routing.TemplateRouteHandler.ctor(this.get_Application().get_MainView(), viewPath, toUpdate, childContainer), new Neptuo.TemplateEngine.Routing.RouteValueDictionary.ctor());
        },
        MapView: function (url){
            if (this.get_UrlSuffix() != null && !url.EndsWith$$String(this.get_UrlSuffix()))
                return null;
            if (this.get_Application().get_ApplicationPath().length > 1 && url.StartsWith$$String(this.get_Application().get_ApplicationPath()))
                url = url.substr(this.get_Application().get_ApplicationPath().length);
            if (this.get_UrlSuffix() != null)
                url = url.Replace$$String$$String(this.get_UrlSuffix(), ".view");
            else
                url = url + ".view";
            var viewPath = "~/Views" + url;
            return viewPath;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "Neptuo.TemplateEngine.Web.IApplication"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Routing$TemplateRoute);
var Neptuo$TemplateEngine$Routing$TemplateRouteHandler = {
    fullname: "Neptuo.TemplateEngine.Routing.TemplateRouteHandler",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Routing.IRouteHandler"],
    Kind: "Class",
    definition: {
        ctor: function (mainView, viewPath, toUpdate, dependencyContainer){
            this._MainView = null;
            this._ViewPath = null;
            this._ToUpdate = null;
            this._DependencyContainer = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(mainView, "mainView");
            Neptuo.Guard.NotNullOrEmpty(viewPath, "viewPath");
            Neptuo.Guard.NotNull$$Object$$String(toUpdate, "toUpdate");
            Neptuo.Guard.NotNull$$Object$$String(dependencyContainer, "dependencyContainer");
            this.set_MainView(mainView);
            this.set_ViewPath(viewPath);
            this.set_ToUpdate(toUpdate);
            this.set_DependencyContainer(dependencyContainer);
        },
        MainView$$: "Neptuo.TemplateEngine.Web.IMainView",
        get_MainView: function (){
            return this._MainView;
        },
        set_MainView: function (value){
            this._MainView = value;
        },
        ViewPath$$: "System.String",
        get_ViewPath: function (){
            return this._ViewPath;
        },
        set_ViewPath: function (value){
            this._ViewPath = value;
        },
        ToUpdate$$: "System.String[]",
        get_ToUpdate: function (){
            return this._ToUpdate;
        },
        set_ToUpdate: function (value){
            this._ToUpdate = value;
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        ProcessRequest: function (context){
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Routing.RouteContext.ctor, this.get_DependencyContainer(), context);
            this.get_MainView().RenderView(this.get_ViewPath(), this.get_ToUpdate(), this.get_DependencyContainer());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Web.IMainView", "System.String", "System.String[]", "Neptuo.IDependencyContainer"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Routing$TemplateRouteHandler);
var Neptuo$TemplateEngine$Web$Application = {
    fullname: "Neptuo.TemplateEngine.Web.Application",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Web.Application._Instance = null;
        },
        Instance$$: "Neptuo.TemplateEngine.Web.IApplication",
        get_Instance: function (){
            return Neptuo.TemplateEngine.Web.Application._Instance;
        },
        set_Instance: function (value){
            Neptuo.TemplateEngine.Web.Application._Instance = value;
        },
        Start: function (isDebug, applicationPath, defaultToUpdate, templateUrlSuffix){
            if (Neptuo.TemplateEngine.Web.Application.get_Instance() != null)
                throw $CreateException(new System.ApplicationException.ctor$$String("Application is already started."), new Error());
            Neptuo.TemplateEngine.Web.Application.set_Instance(new Neptuo.TemplateEngine.Web.Application.ctor(isDebug, applicationPath, defaultToUpdate, templateUrlSuffix));
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IApplication", "Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Providers.ICurrentUrlProvider", "Neptuo.TemplateEngine.Providers.ITemplateUrlFormatter"],
    Kind: "Class",
    definition: {
        ctor: function (isDebug, applicationPath, defaultToUpdate, templateUrlSuffix){
            this._IsDebug = false;
            this._ApplicationPath = null;
            this._DefaultToUpdate = null;
            this._TemplateUrlSuffix = null;
            this._HistoryState = null;
            this._MainView = null;
            this._DependencyContainer = null;
            this._ControllerManager = null;
            this._Router = null;
            this._UpdateViewNotifier = null;
            this._ControllerRegistry = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(applicationPath, "applicationPath");
            Neptuo.Guard.NotNull$$Object$$String(defaultToUpdate, "defaultToUpdate");
            Neptuo.Guard.NotNull$$Object$$String(templateUrlSuffix, "templateUrlSuffix");
            this.set_IsDebug(isDebug);
            this.set_ApplicationPath(applicationPath);
            this.set_DefaultToUpdate(defaultToUpdate);
            this.set_TemplateUrlSuffix(templateUrlSuffix);
            this.set_DependencyContainer(this.CreateDependencyContainer());
            this.get_HistoryState().add_OnPop($CreateDelegate(this, this.OnHistoryStatePop));
            this.get_MainView().add_OnLinkClick($CreateDelegate(this, this.OnNavigation));
            this.get_MainView().add_OnGetFormSubmit($CreateDelegate(this, this.OnNavigation));
            this.get_MainView().add_OnPostFormSubmit($CreateDelegate(this, this.OnFormSubmit));
            this.RunBootstrapTasks(this.get_DependencyContainer());
        },
        IsDebug$$: "System.Boolean",
        get_IsDebug: function (){
            return this._IsDebug;
        },
        set_IsDebug: function (value){
            this._IsDebug = value;
        },
        ApplicationPath$$: "System.String",
        get_ApplicationPath: function (){
            return this._ApplicationPath;
        },
        set_ApplicationPath: function (value){
            this._ApplicationPath = value;
        },
        DefaultToUpdate$$: "System.String[]",
        get_DefaultToUpdate: function (){
            return this._DefaultToUpdate;
        },
        set_DefaultToUpdate: function (value){
            this._DefaultToUpdate = value;
        },
        TemplateUrlSuffix$$: "System.String",
        get_TemplateUrlSuffix: function (){
            return this._TemplateUrlSuffix;
        },
        set_TemplateUrlSuffix: function (value){
            this._TemplateUrlSuffix = value;
        },
        HistoryState$$: "Neptuo.TemplateEngine.Web.IHistoryState",
        get_HistoryState: function (){
            return this._HistoryState;
        },
        set_HistoryState: function (value){
            this._HistoryState = value;
        },
        MainView$$: "Neptuo.TemplateEngine.Web.IMainView",
        get_MainView: function (){
            return this._MainView;
        },
        set_MainView: function (value){
            this._MainView = value;
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        ControllerManager$$: "Neptuo.TemplateEngine.Web.IControllerInvokeManager",
        get_ControllerManager: function (){
            return this._ControllerManager;
        },
        set_ControllerManager: function (value){
            this._ControllerManager = value;
        },
        Router$$: "Neptuo.TemplateEngine.Routing.IRouter",
        get_Router: function (){
            return this._Router;
        },
        set_Router: function (value){
            this._Router = value;
        },
        UpdateViewNotifier$$: "Neptuo.TemplateEngine.Web.IUpdateViewNotifier",
        get_UpdateViewNotifier: function (){
            return this._UpdateViewNotifier;
        },
        set_UpdateViewNotifier: function (value){
            this._UpdateViewNotifier = value;
        },
        ControllerRegistry$$: "Neptuo.TemplateEngine.Controllers.IAsyncControllerRegistry",
        get_ControllerRegistry: function (){
            return this._ControllerRegistry;
        },
        set_ControllerRegistry: function (value){
            this._ControllerRegistry = value;
        },
        CreateDependencyContainer: function (){
            var container = new Neptuo.ObjectBuilder.DependencyContainer.ctor();
            container.Map(Typeof(Neptuo.Lifetimes.SingletonLifetime.ctor), new Neptuo.ObjectBuilder.Lifetimes.Mapping.SingletonLifetimeMapper.ctor());
            var viewActivator = new Neptuo.TemplateEngine.Templates.StaticViewActivator.ctor(container);
            this.set_HistoryState(new Neptuo.TemplateEngine.Web.HistoryState.ctor());
            this.set_MainView(new Neptuo.TemplateEngine.Web.MainView.ctor(viewActivator, this));
            this.set_Router(new Neptuo.TemplateEngine.Routing.ApplicationRouter.ctor(!this.get_IsDebug()));
            this.get_Router().AddRoute(new Neptuo.TemplateEngine.Routing.TemplateRoute.ctor(this.get_TemplateUrlSuffix(), this));
            this.set_UpdateViewNotifier(new Neptuo.TemplateEngine.Web.UpdateViewNotifier.ctor(this.get_MainView()));
            this.set_ControllerManager(new Neptuo.TemplateEngine.Web.QueueControllerInvokeManager.ctor());
            this.set_ControllerRegistry(new Neptuo.TemplateEngine.Controllers.AsyncControllerRegistryBase.ctor());
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Routing.IRouter.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IMainView.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.IHistoryState.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Controllers.IAsyncControllerRegistry.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Navigation.Bootstrap.IFormUriRegistry.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Navigation.IFormUriRepository.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Providers.GlobalNavigationCollection.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Templates.IViewActivator.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.IGuidProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Templates.DataContextStorage.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Templates.TemplateContentStorageStack.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Providers.IRequestContext.ctor, Neptuo.TemplateEngine.Templates.CompositeRequestContext.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Templates.IValueConverterService.ctor, Neptuo.TemplateEngine.Templates.ValueConverterService.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Templates.IBindingManager.ctor, Neptuo.TemplateEngine.Templates.BindingManagerBase.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Providers.IParameterProvider.ctor, Neptuo.TemplateEngine.Web.RouteParameterProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.TemplateEngine.Providers.IParameterProviderFactory.ctor, Neptuo.TemplateEngine.Web.RouteParameterProviderFactory.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Providers.ITemplateUrlFormatter.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Providers.ICurrentUrlProvider.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.Templates.IVirtualUrlProvider.ctor, container, this), this), this)))))), new Neptuo.TemplateEngine.Templates.TemplateContentStorageStack.ctor()), new Neptuo.TemplateEngine.Templates.DataContextStorage.ctor()), new Neptuo.SequenceGuidProvider.ctor("guid", 1)), viewActivator), new Neptuo.TemplateEngine.Providers.GlobalNavigationCollection.ctor()), Neptuo.TemplateEngine.Navigation.FormUriTable.get_Repository()), Neptuo.TemplateEngine.Navigation.FormUriTable.get_Registry()), this.get_ControllerRegistry()), this.get_HistoryState()), this.get_MainView()), this.get_Router());
            return container;
        },
        RunBootstrapTasks: function (dependencyContainer){
            var taskFactory = $CreateAnonymousDelegate(this, function (type){
                return dependencyContainer.Resolve(type, null);
            });
            var constrainFactory = $CreateAnonymousDelegate(this, function (type){
                return dependencyContainer.Resolve(type, null);
            });
            var bootstrapper = new Neptuo.Bootstrap.AutomaticBootstrapper.ctor$$Func$2$Type$IBootstrapTask$$IEnumerable$1$Type$$IBootstrapConstraintProvider(taskFactory, JsCompiler.NewTypes, new Neptuo.Bootstrap.Constraints.AttributeConstraintProvider.ctor(constrainFactory));
            bootstrapper.Initialize();
            AfterNextCompilation($CreateDelegate(this, this.AfterCompilation));
        },
        AfterCompilation: function (){
            this.RunBootstrapTasks(this.get_DependencyContainer());
        },
        OnHistoryStatePop: function (historyItem){
            if (historyItem == null)
                historyItem = new Neptuo.TemplateEngine.Web.HistoryItem.ctor(this.GetCurrentUrl(), this.get_DefaultToUpdate(), null);
            this.get_Router().RouteTo(new Neptuo.TemplateEngine.Routing.RequestContext.ctor(historyItem.Url, Neptuo.TemplateEngine.Web.JsArrayExtensions.ToRouteParams(historyItem.FormData), new Neptuo.TemplateEngine.Routing.RouteValueDictionary.ctor().AddItem("ToUpdate", historyItem.ToUpdate)));
        },
        OnNavigation: function (url, toUpdate){
            this.get_UpdateViewNotifier().StartUpdate();
            toUpdate = (toUpdate != null ? toUpdate : this.get_DefaultToUpdate());
            this.get_HistoryState().Push(new Neptuo.TemplateEngine.Web.HistoryItem.ctor(url, toUpdate, null));
            this.NavigateToUrl(url, toUpdate);
        },
        OnFormSubmit: function (context){
            this.InvokeController(context);
        },
        InvokeController: function (context){
            this.get_UpdateViewNotifier().StartUpdate();
            this.get_ControllerManager().Invoke(new Neptuo.TemplateEngine.Web.ControllerInvoker.ctor(this, this.get_ControllerRegistry(), context));
        },
        NavigateToUrl: function (url, toUpdate){
            this.get_Router().RouteTo(new Neptuo.TemplateEngine.Routing.RequestContext.ctor(url, new Neptuo.TemplateEngine.Routing.RouteParamDictionary.ctor(), new Neptuo.TemplateEngine.Routing.RouteValueDictionary.ctor().AddItem("ToUpdate", toUpdate)));
        },
        ResolveUrl: function (path){
            var applicationPath = this.get_ApplicationPath();
            if (!this.get_ApplicationPath().EndsWith$$String("/"))
                applicationPath += "/";
            return path.Replace$$String$$String("~/", applicationPath);
        },
        GetCurrentUrl: function (){
            return location.pathname;
        },
        FormatUrl: function (urlPart){
            return urlPart + this.get_TemplateUrlSuffix();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Boolean", "System.String", "System.String[]", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Application);
var Neptuo$TemplateEngine$Web$AsyncNotifyService = {
    fullname: "Neptuo.TemplateEngine.Web.AsyncNotifyService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.counter = 0;
            this.sources = new System.Collections.Generic.HashSet$1.ctor(System.Object.ctor);
            this.OnReady = null;
            System.Object.ctor.call(this);
        },
        add_OnReady: function (value){
            this.OnReady = $CombineDelegates(this.OnReady, value);
        },
        remove_OnReady: function (value){
            this.OnReady = $RemoveDelegate(this.OnReady, value);
        },
        IsReady$$: "System.Boolean",
        get_IsReady: function (){
            return this.counter == 0;
        },
        Register: function (source){
            if (this.sources.Add(source))
                this.counter++;
        },
        NotifyDone: function (source){
            if (this.sources.Remove(source))
                this.counter--;
            if (this.counter == 0 && this.OnReady != null)
                this.OnReady();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$AsyncNotifyService);
var Neptuo$TemplateEngine$Web$AsyncViewRenderer = {
    fullname: "Neptuo.TemplateEngine.Web.AsyncViewRenderer",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IAsyncViewRenderer"],
    Kind: "Class",
    definition: {
        ctor: function (viewPath, toUpdate, dependencyContainer, viewActivator, checker, urlProvider){
            this.view = null;
            this.notifyService = null;
            this.isNotifyReadyCalled = false;
            this.OnCompleted = null;
            this._ViewPath = null;
            this._ToUpdate = null;
            this._DependencyContainer = null;
            this._ViewActivator = null;
            this._Checker = null;
            this._UrlProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(viewPath, "viewPath");
            Neptuo.Guard.NotNull$$Object$$String(toUpdate, "toUpdate");
            Neptuo.Guard.NotNull$$Object$$String(dependencyContainer, "dependencyContainer");
            Neptuo.Guard.NotNull$$Object$$String(viewActivator, "viewActivator");
            Neptuo.Guard.NotNull$$Object$$String(checker, "checker");
            Neptuo.Guard.NotNull$$Object$$String(urlProvider, "urlProvider");
            this.set_ViewPath(viewPath);
            this.set_ToUpdate(toUpdate);
            this.set_DependencyContainer(dependencyContainer);
            this.set_ViewActivator(viewActivator);
            this.set_Checker(checker);
            this.set_UrlProvider(urlProvider);
        },
        ViewPath$$: "System.String",
        get_ViewPath: function (){
            return this._ViewPath;
        },
        set_ViewPath: function (value){
            this._ViewPath = value;
        },
        ToUpdate$$: "System.String[]",
        get_ToUpdate: function (){
            return this._ToUpdate;
        },
        set_ToUpdate: function (value){
            this._ToUpdate = value;
        },
        DependencyContainer$$: "Neptuo.IDependencyContainer",
        get_DependencyContainer: function (){
            return this._DependencyContainer;
        },
        set_DependencyContainer: function (value){
            this._DependencyContainer = value;
        },
        ViewActivator$$: "Neptuo.TemplateEngine.Templates.IViewActivator",
        get_ViewActivator: function (){
            return this._ViewActivator;
        },
        set_ViewActivator: function (value){
            this._ViewActivator = value;
        },
        Checker$$: "Neptuo.TemplateEngine.Web.IViewLoadedChecker",
        get_Checker: function (){
            return this._Checker;
        },
        set_Checker: function (value){
            this._Checker = value;
        },
        UrlProvider$$: "Neptuo.Templates.IVirtualUrlProvider",
        get_UrlProvider: function (){
            return this._UrlProvider;
        },
        set_UrlProvider: function (value){
            this._UrlProvider = value;
        },
        add_OnCompleted: function (value){
            this.OnCompleted = $CombineDelegates(this.OnCompleted, value);
        },
        remove_OnCompleted: function (value){
            this.OnCompleted = $RemoveDelegate(this.OnCompleted, value);
        },
        Render: function (){
            if (!this.get_Checker().IsViewLoaded(this.get_ViewPath())){
                $.ajax({
                    url: this.FormatViewUrl(),
                    dataType: "script",
                    success: $CreateDelegate(this, this.OnScriptLoaded)
                });
            }
            else {
                this.RenderView();
            }
        },
        OnScriptLoaded: function (data, status, response){
            this.RenderView();
        },
        FormatViewUrl: function (){
            var viewPath = this.get_ViewPath();
            if (viewPath.StartsWith$$String("/"))
                viewPath = "~" + viewPath;
            return System.String.Format$$String$$Object$$Object("{0}?Path={1}", this.get_UrlProvider().ResolveUrl("~/Views.ashx"), viewPath);
        },
        RenderView: function (){
            this.notifyService = new Neptuo.TemplateEngine.Web.AsyncNotifyService.ctor();
            var componentManager = new Neptuo.TemplateEngine.Templates.PartialUpdateComponentManager.ctor(this.get_ToUpdate());
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Web.AsyncNotifyService.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Templates.IPartialUpdateWriter.ctor, Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.Templates.IComponentManager.ctor, this.get_DependencyContainer(), componentManager), componentManager), this.notifyService);
            this.view = this.get_ViewActivator().CreateView(this.get_ViewPath());
            this.view.Setup(new Neptuo.Templates.BaseViewPage.ctor(componentManager), componentManager, this.get_DependencyContainer());
            this.view.CreateControls();
            this.view.Init();
            if (this.notifyService.get_IsReady())
                this.OnAsyncNotifyReady();
            else
                this.notifyService.add_OnReady($CreateDelegate(this, this.OnAsyncNotifyReady));
        },
        OnAsyncNotifyReady: function (){
            if (this.isNotifyReadyCalled)
                alert("OnReady called twice!!");
            this.isNotifyReadyCalled = true;
            this.notifyService.remove_OnReady($CreateDelegate(this, this.OnAsyncNotifyReady));
            var writer = new System.IO.StringWriter.ctor();
            this.view.Render(new Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter.ctor(writer));
            this.view.Dispose();
            if (this.OnCompleted != null)
                this.OnCompleted();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String[]", "Neptuo.IDependencyContainer", "Neptuo.TemplateEngine.Templates.IViewActivator", "Neptuo.TemplateEngine.Web.IViewLoadedChecker", "Neptuo.Templates.IVirtualUrlProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$AsyncViewRenderer);
var Neptuo$TemplateEngine$Bootstrap$ConverterBootstrapTask = {
    fullname: "Neptuo.TemplateEngine.Bootstrap.ConverterBootstrapTask",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapTask"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.repository = null;
            System.Object.ctor.call(this);
            this.repository = Neptuo.Converts.get_Repository();
        },
        Initialize: function (){
            this.repository.Add(Typeof(Object), Typeof(Neptuo.TemplateEngine.Providers.PartialResponse.ctor), new Neptuo.TemplateEngine.Web.PartialResponseConverter.ctor()).Add(Typeof(Object), Typeof(Neptuo.TemplateEngine.ModelValueGetterListResult.ctor), new Neptuo.TemplateEngine.ModelValueGetterListResultConverter.ctor());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Bootstrap$ConverterBootstrapTask);
var Neptuo$TemplateEngine$Web$ErrorModel = {
    fullname: "Neptuo.TemplateEngine.Web.ErrorModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (statusCode, statusText, responseText){
            this._StatusCode = 0;
            this._StatusText = null;
            this._ResponseText = null;
            System.Object.ctor.call(this);
            this.set_StatusCode(statusCode);
            this.set_StatusText(statusText);
            this.set_ResponseText(responseText);
        },
        StatusCode$$: "System.Int32",
        get_StatusCode: function (){
            return this._StatusCode;
        },
        set_StatusCode: function (value){
            this._StatusCode = value;
        },
        StatusText$$: "System.String",
        get_StatusText: function (){
            return this._StatusText;
        },
        set_StatusText: function (value){
            this._StatusText = value;
        },
        ResponseText$$: "System.String",
        get_ResponseText: function (){
            return this._ResponseText;
        },
        set_ResponseText: function (value){
            this._ResponseText = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Int32", "System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$ErrorModel);
var Neptuo$TemplateEngine$Web$ControllerInvoker = {
    fullname: "Neptuo.TemplateEngine.Web.ControllerInvoker",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IControllerInvoker"],
    Kind: "Class",
    definition: {
        ctor: function (application, controllerRegistry, context){
            this.controllerContext = null;
            this.OnSuccess = null;
            this.OnError = null;
            this._Application = null;
            this._ControllerRegistry = null;
            this._Context = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(application, "application");
            Neptuo.Guard.NotNull$$Object$$String(context, "context");
            Neptuo.Guard.NotNull$$Object$$String(controllerRegistry, "controllerRegistry");
            this.set_Application(application);
            this.set_ControllerRegistry(controllerRegistry);
            this.set_Context(context);
        },
        Application$$: "Neptuo.TemplateEngine.Web.IApplication",
        get_Application: function (){
            return this._Application;
        },
        set_Application: function (value){
            this._Application = value;
        },
        ControllerRegistry$$: "Neptuo.TemplateEngine.Controllers.IAsyncControllerRegistry",
        get_ControllerRegistry: function (){
            return this._ControllerRegistry;
        },
        set_ControllerRegistry: function (value){
            this._ControllerRegistry = value;
        },
        Context$$: "Neptuo.TemplateEngine.Web.FormRequestContext",
        get_Context: function (){
            return this._Context;
        },
        set_Context: function (value){
            this._Context = value;
        },
        add_OnSuccess: function (value){
            this.OnSuccess = $CombineDelegates(this.OnSuccess, value);
        },
        remove_OnSuccess: function (value){
            this.OnSuccess = $RemoveDelegate(this.OnSuccess, value);
        },
        add_OnError: function (value){
            this.OnError = $CombineDelegates(this.OnError, value);
        },
        remove_OnError: function (value){
            this.OnError = $RemoveDelegate(this.OnError, value);
        },
        Invoke: function (){
            this.get_Application().get_HistoryState().Replace(new Neptuo.TemplateEngine.Web.HistoryItem.ctor(this.get_Context().FormUrl, this.get_Context().ToUpdate, this.get_Context()));
            if (!this.TryInvokeControllers()){
                var headers = new Object();
                headers["X-EngineRequestType"] = "Partial";
                $.ajax({
                    url: this.get_Context().FormUrl,
                    type: "POST",
                    data: this.get_Context().Parameters,
                    headers: headers,
                    success: $CreateDelegate(this, this.OnSubmitSuccess),
                    error: $CreateDelegate(this, this.OnSubmitError)
                });
            }
        },
        TryInvokeControllers: function (){
            var parameterProvider = Neptuo.TemplateEngine.Web.JsArrayExtensions.ToParameterProvider(this.get_Context().Parameters);
            var container = this.get_Application().get_DependencyContainer().CreateChildContainer();
            Neptuo.DependencyContainerExtensions.RegisterInstance$1(Neptuo.TemplateEngine.Providers.IParameterProvider.ctor, container, parameterProvider);
            var modelBinder = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.TemplateEngine.Providers.ModelBinders.IModelBinder.ctor, container);
            var messageStorage = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.TemplateEngine.Providers.MessageStorage.ctor, container);
            var $it1 = parameterProvider.get_Keys().GetEnumerator();
            while ($it1.MoveNext()){
                var key = $it1.get_Current();
                var controller;
                if ((function (){
                    var $1 = {
                        Value: controller
                    };
                    var $res = this.get_ControllerRegistry().TryGet(key, $1);
                    controller = $1.Value;
                    return $res;
                }).call(this)){
                    this.controllerContext = new Neptuo.TemplateEngine.Controllers.AsyncControllerContext.ctor(key, parameterProvider, modelBinder, container, messageStorage, $CreateDelegate(this, this.OnControllerExecuted));
                    controller.Execute(this.controllerContext);
                    return true;
                }
            }
            return false;
        },
        OnControllerExecuted: function (){
            this.ProcessResponse(new Neptuo.TemplateEngine.Providers.PartialResponse.ctor(this.controllerContext.get_Messages(), this.controllerContext.get_Navigation()));
        },
        OnSubmitSuccess: function (response, status, sender){
            var partialResponse;
            if ((function (){
                var $1 = {
                    Value: partialResponse
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Object, Neptuo.TemplateEngine.Providers.PartialResponse.ctor, response, $1);
                partialResponse = $1.Value;
                return $res;
            }).call(this)){
                this.ProcessResponse(partialResponse);
                if (this.OnSuccess != null)
                    this.OnSuccess(this);
            }
            else {
                alert(status);
            }
        },
        ProcessResponse: function (partialResponse){
            var navigationUrl = this.ResolveNavigationUrl(partialResponse.get_Navigation());
            var customValues = new Neptuo.TemplateEngine.Routing.RouteValueDictionary.ctor().AddItem("ToUpdate", this.get_Context().ToUpdate).AddItem("Messages", partialResponse.get_Messages());
            var parameters = new Neptuo.TemplateEngine.Routing.RouteParamDictionary.ctor();
            if (navigationUrl == this.get_Application().GetCurrentUrl())
                parameters = Neptuo.TemplateEngine.Web.JsArrayExtensions.ToRouteParams(this.get_Context().Parameters);
            else
                this.get_Application().get_HistoryState().Push(new Neptuo.TemplateEngine.Web.HistoryItem.ctor(navigationUrl, this.get_Context().ToUpdate, null));
            this.get_Application().get_Router().RouteTo(new Neptuo.TemplateEngine.Routing.RequestContext.ctor(navigationUrl, parameters, customValues));
        },
        ResolveNavigationUrl: function (navigation){
            if (navigation != null)
                return this.get_Application().ResolveUrl(navigation);
            else
                return this.get_Application().GetCurrentUrl();
        },
        OnSubmitError: function (response, status, error){
            if (this.OnError != null)
                this.OnError(this, new Neptuo.TemplateEngine.Web.ErrorModel.ctor(response.status, response.statusText, response.responseText));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Web.IApplication", "Neptuo.TemplateEngine.Controllers.IAsyncControllerRegistry", "Neptuo.TemplateEngine.Web.FormRequestContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$ControllerInvoker);
var Neptuo$TemplateEngine$Web$FormRequestContext = {
    fullname: "Neptuo.TemplateEngine.Web.FormRequestContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (toUpdate, parameters, formUrl){
            this.ToUpdate = null;
            this.Parameters = null;
            this.FormUrl = null;
            System.Object.ctor.call(this);
            this.ToUpdate = toUpdate;
            this.Parameters = parameters;
            this.FormUrl = formUrl;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String[]", "SharpKit.JavaScript.JsArray", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$FormRequestContext);
var Neptuo$TemplateEngine$Web$HistoryItem = {
    fullname: "Neptuo.TemplateEngine.Web.HistoryItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (url, toUpdate, context){
            this.ToUpdate = null;
            this.Url = null;
            this.FormData = null;
            System.Object.ctor.call(this);
            this.Url = url;
            this.ToUpdate = toUpdate;
            if (context != null)
                this.FormData = context.Parameters;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String[]", "Neptuo.TemplateEngine.Web.FormRequestContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$HistoryItem);
var Neptuo$TemplateEngine$Web$HistoryState = {
    fullname: "Neptuo.TemplateEngine.Web.HistoryState",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IHistoryState"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.isPopAssigned = false;
            this.onPop = null;
            this.OnPop = null;
            System.Object.ctor.call(this);
        },
        add_onPop: function (value){
            this.onPop = $CombineDelegates(this.onPop, value);
        },
        remove_onPop: function (value){
            this.onPop = $RemoveDelegate(this.onPop, value);
        },
        add_OnPop: function (value){
            this.add_onPop(value);
            if (this.onPop != null && !this.isPopAssigned){
                window.addEventListener("popstate", $CreateDelegate(this, this.OnPopState));
                this.isPopAssigned = true;
            }
        },
        remove_OnPop: function (value){
            this.remove_onPop(value);
            if (this.onPop == null && this.isPopAssigned){
                window.removeEventListener("popstate", $CreateDelegate(this, this.OnPopState));
                this.isPopAssigned = false;
            }
        },
        OnPopState: function (e){
            var state = e;
            var historyItem = state.state;
            if (this.onPop != null)
                this.onPop(historyItem);
        },
        Push: function (item){
            history.pushState(item, "", item.Url);
        },
        Replace: function (item){
            history.replaceState(item, "", item.Url);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$HistoryState);
var Neptuo$TemplateEngine$Web$IApplication = {
    fullname: "Neptuo.TemplateEngine.Web.IApplication",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.ITemplateConfiguration", "Neptuo.Templates.IVirtualUrlProvider", "Neptuo.TemplateEngine.Providers.ICurrentUrlProvider"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IApplication);
var Neptuo$TemplateEngine$Web$IAsyncViewRenderer = {
    fullname: "Neptuo.TemplateEngine.Web.IAsyncViewRenderer",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IAsyncViewRenderer);
var Neptuo$TemplateEngine$Web$IControllerInvoker = {
    fullname: "Neptuo.TemplateEngine.Web.IControllerInvoker",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IControllerInvoker);
var Neptuo$TemplateEngine$Web$IControllerInvokeManager = {
    fullname: "Neptuo.TemplateEngine.Web.IControllerInvokeManager",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IControllerInvokeManager);
var Neptuo$TemplateEngine$Web$IHistoryState = {
    fullname: "Neptuo.TemplateEngine.Web.IHistoryState",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IHistoryState);
var Neptuo$TemplateEngine$Web$IMainView = {
    fullname: "Neptuo.TemplateEngine.Web.IMainView",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IMainView);
var Neptuo$TemplateEngine$Web$ITemplateConfiguration = {
    fullname: "Neptuo.TemplateEngine.Web.ITemplateConfiguration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$ITemplateConfiguration);
var Neptuo$TemplateEngine$Web$IUpdateViewNotifier = {
    fullname: "Neptuo.TemplateEngine.Web.IUpdateViewNotifier",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IUpdateViewNotifier);
var Neptuo$TemplateEngine$JsObjectBuilder = {
    fullname: "Neptuo.TemplateEngine.JsObjectBuilder",
    baseTypeName: "System.Object",
    staticDefinition: {
        New: function (key, value){
            var result = new Neptuo.TemplateEngine.JsObjectBuilder.ctor();
            if (key != null)
                result.Set(key, value);
            return result;
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.data = new Object();
            System.Object.ctor.call(this);
        },
        Set: function (key, value){
            this.data[key] = value;
            return this;
        },
        ToJsObject: function (){
            return this.data;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$JsObjectBuilder);
var Neptuo$TemplateEngine$Templates$PartialUpdateComponentManager = {
    fullname: "Neptuo.TemplateEngine.Templates.PartialUpdateComponentManager",
    baseTypeName: "Neptuo.Templates.ComponentManager",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.IPartialUpdateWriter"],
    Kind: "Class",
    definition: {
        ctor: function (partialsToUpdate){
            this.partialsToUpdate = null;
            this.partialUpdates = null;
            Neptuo.Templates.ComponentManager.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(partialsToUpdate, "partialsToUpdate");
            this.partialsToUpdate = partialsToUpdate;
            this.partialUpdates = new System.Collections.Generic.Dictionary$2.ctor(Neptuo.Templates.Controls.IControl.ctor, System.String.ctor);
        },
        DoRenderControl: function (control, writer){
            var partialView;
            if ((function (){
                var $1 = {
                    Value: partialView
                };
                var $res = this.partialUpdates.TryGetValue(control, $1);
                partialView = $1.Value;
                return $res;
            }).call(this) && System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, this.partialsToUpdate, partialView)){
                var stringWriter = new System.IO.StringWriter.ctor();
                var extendedWriter = new Neptuo.TemplateEngine.Templates.ExtendedHtmlTextWriter.ctor(stringWriter);
                Neptuo.Templates.ComponentManager.commonPrototype.DoRenderControl.call(this, control, extendedWriter);
                var target = $("[data-update=" + partialView + "]");
                target.replaceWith(stringWriter.toString());
                return;
            }
            Neptuo.Templates.ComponentManager.commonPrototype.DoRenderControl.call(this, control, writer);
        },
        Update: function (partialView, control){
            this.partialUpdates.set_Item$$TKey(control, partialView);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String[]"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$PartialUpdateComponentManager);
var Neptuo$TemplateEngine$Web$PartialUpdateHelper = {
    fullname: "Neptuo.TemplateEngine.Web.PartialUpdateHelper",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.Templates.Controls.IControl"],
    Kind: "Class",
    definition: {
        ctor: function (guidProvider, mainView){
            this.guidProvider = null;
            this.mainView = null;
            this.partialElementGuid = null;
            this.isRenderCalled = false;
            this.isDataLoaded = false;
            this.error = null;
            this.RenderContent = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(guidProvider, "guidProvider");
            Neptuo.Guard.NotNull$$Object$$String(mainView, "mainView");
            this.guidProvider = guidProvider;
            this.mainView = mainView;
        },
        add_RenderContent: function (value){
            this.RenderContent = $CombineDelegates(this.RenderContent, value);
        },
        remove_RenderContent: function (value){
            this.RenderContent = $RemoveDelegate(this.RenderContent, value);
        },
        OnInit: function (){
            Neptuo.Guard.NotNull$$Object$$String(this.RenderContent, "RenderContent");
            this.partialElementGuid = this.guidProvider.Next();
        },
        Render: function (writer){
            if (!this.isDataLoaded){
                this.isRenderCalled = true;
                this.mainView.WritePlaceholder(writer, this.partialElementGuid);
                return;
            }
            else {
                if (this.error != null)
                    this.mainView.UpdateError(this.partialElementGuid, this.error);
                else if (this.RenderContent != null)
                    this.RenderContent(writer);
            }
        },
        OnDataLoaded: function (){
            this.isDataLoaded = true;
            if (this.isRenderCalled){
                var stringWriter = new System.IO.StringWriter.ctor();
                var writer = new Neptuo.Templates.HtmlTextWriter.ctor(stringWriter);
                if (this.RenderContent != null)
                    this.RenderContent(writer);
                this.mainView.UpdateView(this.partialElementGuid, stringWriter);
            }
        },
        OnError: function (error){
            this.isDataLoaded = true;
            if (this.isRenderCalled)
                this.mainView.UpdateError(this.partialElementGuid, error);
            else
                this.error = error;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IGuidProvider", "Neptuo.TemplateEngine.Web.IMainView"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PartialUpdateHelper);
var Neptuo$TemplateEngine$Web$RenderEventHandler = {
    fullname: "Neptuo.TemplateEngine.Web.RenderEventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$RenderEventHandler);
var Neptuo$TemplateEngine$Templates$StaticViewActivator = {
    fullname: "Neptuo.TemplateEngine.Templates.StaticViewActivator",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Templates.StaticViewActivator.mappings = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Type.ctor);
        },
        Add: function (viewPath, viewType){
            Neptuo.TemplateEngine.Templates.StaticViewActivator.mappings.set_Item$$TKey(viewPath, viewType);
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Templates.IViewActivator", "Neptuo.TemplateEngine.Web.IViewLoadedChecker"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            this.dependencyProvider = dependencyProvider;
        },
        CreateView: function (path){
            var viewType;
            if ((function (){
                var $1 = {
                    Value: viewType
                };
                var $res = Neptuo.TemplateEngine.Templates.StaticViewActivator.mappings.TryGetValue(path, $1);
                viewType = $1.Value;
                return $res;
            }).call(this))
                return Cast(Neptuo.DependencyProviderExtensions.Resolve$$IDependencyProvider$$Type(this.dependencyProvider, viewType), Neptuo.Templates.BaseGeneratedView.ctor);
            if (Neptuo.TemplateEngine.Web.Application.get_Instance().get_IsDebug())
                alert("View class not found! For view path: " + path);
            location.reload();
            throw $CreateException(new System.NotSupportedException.ctor(), new Error());
        },
        IsViewLoaded: function (viewPath){
            return Neptuo.TemplateEngine.Templates.StaticViewActivator.mappings.ContainsKey(viewPath);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Templates$StaticViewActivator);
var Neptuo$TemplateEngine$Web$Routing$TemplateRouteParameterBase = {
    fullname: "Neptuo.TemplateEngine.Web.Routing.TemplateRouteParameterBase",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.TemplateEngine.Web.Routing.TemplateRouteParameterBase.TemplateUrlSuffix = ".html";
            Neptuo.TemplateEngine.Web.Routing.TemplateRouteParameterBase.TemplatePathSuffix = ".view";
        },
        FormatUrl: function (path){
            if (path == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("path"), new Error());
            return System.String.Format$$String$$Object$$Object("{0}{1}", path, ".html");
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$Routing$TemplateRouteParameterBase);
var Neptuo$TemplateEngine$Web$UpdateViewNotifier = {
    fullname: "Neptuo.TemplateEngine.Web.UpdateViewNotifier",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IUpdateViewNotifier"],
    Kind: "Class",
    definition: {
        ctor: function (mainView){
            System.Object.ctor.call(this);
            mainView.add_OnBeforeRenderView($CreateDelegate(this, this.OnBeforeRenderView));
            mainView.add_OnAfterRenderView($CreateDelegate(this, this.OnAfterRenderView));
        },
        OnBeforeRenderView: function (viewPath, toUpdate){
            this.StartUpdate();
        },
        OnAfterRenderView: function (){
            this.EndUpdate();
        },
        StartUpdate: function (){
            $("body").css("opacity", 0.5);
        },
        EndUpdate: function (){
            $("body").css("opacity", 1);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Web.IMainView"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$UpdateViewNotifier);
var Neptuo$TemplateEngine$Web$IViewLoadedChecker = {
    fullname: "Neptuo.TemplateEngine.Web.IViewLoadedChecker",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$IViewLoadedChecker);
var Neptuo$TemplateEngine$Web$JsArrayExtensions = {
    fullname: "Neptuo.TemplateEngine.Web.JsArrayExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        ToRouteParams: function (data){
            var result = new Neptuo.TemplateEngine.Routing.RouteParamDictionary.ctor();
            if (data != null){
                for (var i = 0; i < data.length; i++){
                    var key = data[i]["name"];
                    var value = data[i]["value"];
                    var currentValue;
                    if ((function (){
                        var $1 = {
                            Value: currentValue
                        };
                        var $res = result.TryGetValue(key, $1);
                        currentValue = $1.Value;
                        return $res;
                    })())
                        result.set_Item$$TKey(key, currentValue + "," + value);
                    else
                        result.Add(key, value);
                }
            }
            return result;
        },
        ToParameterProvider: function (data){
            var result = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            if (data != null){
                for (var i = 0; i < data.length; i++){
                    var key = data[i]["name"];
                    var value = data[i]["value"];
                    var currentValue;
                    if ((function (){
                        var $1 = {
                            Value: currentValue
                        };
                        var $res = result.TryGetValue(key, $1);
                        currentValue = $1.Value;
                        return $res;
                    })())
                        result.set_Item$$TKey(key, currentValue + "," + value);
                    else
                        result.Add(key, value);
                }
            }
            return new Neptuo.TemplateEngine.Web.DictionaryParameterProvider.ctor(result);
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$JsArrayExtensions);
var Neptuo$TemplateEngine$Web$MainView = {
    fullname: "Neptuo.TemplateEngine.Web.MainView",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IMainView"],
    Kind: "Class",
    definition: {
        ctor: function (viewActivator, application){
            this.OnLinkClick = null;
            this.OnPostFormSubmit = null;
            this.OnGetFormSubmit = null;
            this.OnBeforeRenderView = null;
            this.OnAfterRenderView = null;
            this._ViewActivator = null;
            this._Application = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(viewActivator, "viewActivator");
            Neptuo.Guard.NotNull$$Object$$String(application, "application");
            this.set_ViewActivator(viewActivator);
            this.set_Application(application);
            $($CreateAnonymousDelegate(this, function (){
                var body = $("body");
                body.delegate("a", "click", $CreateDelegate(this, this.OnLinkClickInternal));
                body.delegate("button", "click", $CreateDelegate(this, this.OnButtonClickInternal));
                body.delegate("form", "submit", $CreateDelegate(this, this.OnFormSubmitInternal));
            }));
        },
        ViewActivator$$: "Neptuo.TemplateEngine.Templates.IViewActivator",
        get_ViewActivator: function (){
            return this._ViewActivator;
        },
        set_ViewActivator: function (value){
            this._ViewActivator = value;
        },
        Application$$: "Neptuo.TemplateEngine.Web.IApplication",
        get_Application: function (){
            return this._Application;
        },
        set_Application: function (value){
            this._Application = value;
        },
        add_OnLinkClick: function (value){
            this.OnLinkClick = $CombineDelegates(this.OnLinkClick, value);
        },
        remove_OnLinkClick: function (value){
            this.OnLinkClick = $RemoveDelegate(this.OnLinkClick, value);
        },
        add_OnPostFormSubmit: function (value){
            this.OnPostFormSubmit = $CombineDelegates(this.OnPostFormSubmit, value);
        },
        remove_OnPostFormSubmit: function (value){
            this.OnPostFormSubmit = $RemoveDelegate(this.OnPostFormSubmit, value);
        },
        add_OnGetFormSubmit: function (value){
            this.OnGetFormSubmit = $CombineDelegates(this.OnGetFormSubmit, value);
        },
        remove_OnGetFormSubmit: function (value){
            this.OnGetFormSubmit = $RemoveDelegate(this.OnGetFormSubmit, value);
        },
        add_OnBeforeRenderView: function (value){
            this.OnBeforeRenderView = $CombineDelegates(this.OnBeforeRenderView, value);
        },
        remove_OnBeforeRenderView: function (value){
            this.OnBeforeRenderView = $RemoveDelegate(this.OnBeforeRenderView, value);
        },
        add_OnAfterRenderView: function (value){
            this.OnAfterRenderView = $CombineDelegates(this.OnAfterRenderView, value);
        },
        remove_OnAfterRenderView: function (value){
            this.OnAfterRenderView = $RemoveDelegate(this.OnAfterRenderView, value);
        },
        GetToUpdateFromElement: function (element){
            var value = element.data("toupdate");
            if (System.String.IsNullOrEmpty(value))
                return null;
            return value.Split$$Char$Array(",");
        },
        OnLinkClickInternal: function (e){
            var link = $(e.currentTarget);
            var newUrl = link.attr("href");
            var toUpdate = this.GetToUpdateFromElement(link);
            if (this.OnLinkClick != null)
                this.OnLinkClick(newUrl, toUpdate);
            e.preventDefault();
        },
        OnButtonClickInternal: function (e){
            var button = $(e.currentTarget);
            var buttonName = button.attr("name");
            button.parents("form").first().data("button", buttonName);
        },
        OnFormSubmitInternal: function (e){
            var form = $(e.currentTarget);
            var buttonName = form.data("button");
            if (System.String.IsNullOrEmpty(buttonName))
                buttonName = form.find("button:first").attr("name");
            var formUrl = (form.attr("action") != null ? form.attr("action") : this.get_Application().GetCurrentUrl());
            if (formUrl.Contains("://"))
                formUrl = formUrl.substr(formUrl.indexOf("/", 10));
            var toUpdate = (this.GetToUpdateFromElement(form) != null ? this.GetToUpdateFromElement(form) : this.get_Application().get_DefaultToUpdate());
            if (form.is("[method]") && form.attr("method").toLocaleLowerCase() == "post"){
                var formData = form.serializeArray();
                if (!System.String.IsNullOrEmpty(buttonName)){
                    var submitButton = new Object();
                    submitButton["name"] = buttonName;
                    submitButton["value"] = null;
                    formData.push(submitButton);
                }
                var context = new Neptuo.TemplateEngine.Web.FormRequestContext.ctor(toUpdate, formData, formUrl);
                if (this.OnPostFormSubmit != null)
                    this.OnPostFormSubmit(context);
            }
            else {
                var formData = form.serialize();
                var queryIndex = formUrl.indexOf("?");
                if (queryIndex > 0)
                    formUrl = formUrl.substr(0, queryIndex);
                formUrl += "?" + formData;
                if (this.OnGetFormSubmit != null)
                    this.OnGetFormSubmit(formUrl, toUpdate);
            }
            e.preventDefault();
        },
        RenderView: function (viewPath, toUpdate, dependencyContainer){
            if (this.OnBeforeRenderView != null)
                this.OnBeforeRenderView(viewPath, toUpdate);
            var viewRenderer = new Neptuo.TemplateEngine.Web.AsyncViewRenderer.ctor(viewPath, toUpdate, dependencyContainer, this.get_ViewActivator(), As(this.get_ViewActivator(), Neptuo.TemplateEngine.Templates.StaticViewActivator.ctor), this.get_Application());
            viewRenderer.add_OnCompleted($CreateDelegate(this, this.OnViewRendered));
            viewRenderer.Render();
        },
        OnViewRendered: function (){
            if (this.OnAfterRenderView != null)
                this.OnAfterRenderView();
            this.AutoFocus();
        },
        UpdateView: function (partialGuid, content){
            var target = $("div[data-partial=" + partialGuid + "]");
            target.replaceWith(content.toString());
        },
        UpdateError: function (partialGuid, model){
            var stringWriter = new System.IO.StringWriter.ctor();
            var writer = new Neptuo.Templates.HtmlTextWriter.ctor(stringWriter);
            if (this.get_Application().get_IsDebug()){
                writer.Tag("strong").Attribute("class", "error-info").Content$$String(model.get_StatusText()).CloseFullTag();
            }
            else {
                writer.Tag("strong").Attribute("class", "error-info").Content$$String("We are sorry, but there was a problem loading data from server. Please try reloading page...").CloseFullTag();
            }
            this.UpdateView(partialGuid, stringWriter);
        },
        WritePlaceholder: function (writer, partialGuid){
            writer.Tag("div").Attribute("data-partial", partialGuid).Content$$String("Loading data...").CloseFullTag();
        },
        AutoFocus: function (){
            $("body").find("[autofocus]").focus();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Templates.IViewActivator", "Neptuo.TemplateEngine.Web.IApplication"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$MainView);
var Neptuo$TemplateEngine$Web$PartialResponseConverter = {
    fullname: "Neptuo.TemplateEngine.Web.PartialResponseConverter",
    baseTypeName: "Neptuo.ComponentModel.Converters.ConverterBase$2",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.ComponentModel.Converters.ConverterBase$2.ctor.call(this, Object, Neptuo.TemplateEngine.Providers.PartialResponse.ctor);
        },
        TryConvert: function (sourceValue, targetValue){
            if (sourceValue == null){
                targetValue.Value = null;
                return false;
            }
            var messageStorage = new Neptuo.TemplateEngine.Providers.MessageStorage.ctor();
            if (sourceValue["Messages"] != null){
                var messages = sourceValue["Messages"];
                for (var key in messages){
                    var messageList = messages[key];
                    for (var i = 0; i < messageList.length; i++){
                        var message = messageList[i];
                        messageStorage.Add(key, message["Key"], message["Text"], message["Type"]);
                    }
                }
            }
            targetValue.Value = new Neptuo.TemplateEngine.Providers.PartialResponse.ctor(messageStorage, sourceValue["Navigation"]);
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$PartialResponseConverter);
var Neptuo$TemplateEngine$Web$QueueControllerInvokeManager = {
    fullname: "Neptuo.TemplateEngine.Web.QueueControllerInvokeManager",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Web.IControllerInvokeManager"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.isRunning = false;
            this.invokers = new System.Collections.Generic.List$1.ctor(Neptuo.TemplateEngine.Web.IControllerInvoker.ctor);
            System.Object.ctor.call(this);
        },
        Invoke: function (invoker){
            invoker.add_OnSuccess($CreateDelegate(this, this.OnSuccess));
            invoker.add_OnError($CreateDelegate(this, this.OnError));
            this.invokers.Add(invoker);
            if (!this.isRunning)
                this.InvokeFirst();
        },
        OnSuccess: function (invoker){
            this.invokers.Remove(invoker);
            this.isRunning = false;
            this.InvokeFirst();
        },
        OnError: function (invoker, error){
            this.invokers.Remove(invoker);
            if (confirm("There was an error processing your request. Do you want to try again? If you say no, this page will be reloaded...")){
                this.invokers.Insert(0, invoker);
                this.InvokeFirst();
            }
            else {
                location.reload();
            }
        },
        InvokeFirst: function (){
            var invoker = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(Neptuo.TemplateEngine.Web.IControllerInvoker.ctor, this.invokers);
            if (invoker != null){
                invoker.Invoke();
                this.isRunning = true;
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$QueueControllerInvokeManager);
var Neptuo$TemplateEngine$Web$RouteParameterProvider = {
    fullname: "Neptuo.TemplateEngine.Web.RouteParameterProvider",
    baseTypeName: "Neptuo.TemplateEngine.Web.DictionaryParameterProvider",
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (routeContext){
            this.routeContext = null;
            Neptuo.TemplateEngine.Web.DictionaryParameterProvider.ctor.call(this, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor));
            Neptuo.Guard.NotNull$$Object$$String(routeContext, "routeContext");
            Neptuo.Collections.Generic.DictionaryExtensions.AddRange$2(System.String.ctor, System.String.ctor, this.get_Parameters(), routeContext.get_Request().get_Form());
            Neptuo.Collections.Generic.DictionaryExtensions.AddRange$2(System.String.ctor, System.String.ctor, this.get_Parameters(), routeContext.get_Request().get_QueryString());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Routing.RouteContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$RouteParameterProvider);
var Neptuo$TemplateEngine$Web$RouteParameterProviderFactory = {
    fullname: "Neptuo.TemplateEngine.Web.RouteParameterProviderFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.TemplateEngine.Client",
    interfaceNames: ["Neptuo.TemplateEngine.Providers.IParameterProviderFactory"],
    Kind: "Class",
    definition: {
        ctor: function (routeContext){
            this.routeContext = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(routeContext, "routeContext");
            this.routeContext = routeContext;
        },
        Provider: function (providerType){
            var parameters = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            switch (providerType){
                case 0:
                    Neptuo.Collections.Generic.DictionaryExtensions.AddRange$2(System.String.ctor, System.String.ctor, parameters, this.routeContext.get_Request().get_Form());
                    Neptuo.Collections.Generic.DictionaryExtensions.AddRange$2(System.String.ctor, System.String.ctor, parameters, this.routeContext.get_Request().get_QueryString());
                    break;
                case 1:
                    Neptuo.Collections.Generic.DictionaryExtensions.AddRange$2(System.String.ctor, System.String.ctor, parameters, this.routeContext.get_Request().get_QueryString());
                    break;
                case 2:
                    Neptuo.Collections.Generic.DictionaryExtensions.AddRange$2(System.String.ctor, System.String.ctor, parameters, this.routeContext.get_Request().get_Form());
                    break;
                default:
                    break;
            }
            return new Neptuo.TemplateEngine.Web.DictionaryParameterProvider.ctor(parameters);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.TemplateEngine.Routing.RouteContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$TemplateEngine$Web$RouteParameterProviderFactory);
var Neptuo$TemplateEngine$Web$InitScript = {
    fullname: "Neptuo.TemplateEngine.Web.InitScript",
    baseTypeName: "System.Object",
    staticDefinition: {
        TransformParameters: function (data){
            var parameters = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            for (var i = 0; i < data.length; i++)
                parameters.set_Item$$TKey(data[i]["name"], data[i]["value"]);
            return parameters;
        }
    },
    assemblyName: "Neptuo.TemplateEngine.Client",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$TemplateEngine$Web$InitScript);

